
Procrastinator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a018  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800a1b0  0800a1b0  0001a1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1cc  0800a1cc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1cc  0800a1cc  0001a1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1d4  0800a1d4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1d4  0800a1d4  0001a1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1d8  0800a1d8  0001a1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a1dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000894  20000090  0800a26c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000924  0800a26c  00020924  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001741a  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f36  00000000  00000000  000374da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  0003b410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  0003c5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198b3  00000000  00000000  0003d610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019eb9  00000000  00000000  00056ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ec0e  00000000  00000000  00070d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff98a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c1c  00000000  00000000  000ff9dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a198 	.word	0x0800a198

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	0800a198 	.word	0x0800a198

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_ldivmod>:
 8000a14:	b97b      	cbnz	r3, 8000a36 <__aeabi_ldivmod+0x22>
 8000a16:	b972      	cbnz	r2, 8000a36 <__aeabi_ldivmod+0x22>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bfbe      	ittt	lt
 8000a1c:	2000      	movlt	r0, #0
 8000a1e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000a22:	e006      	blt.n	8000a32 <__aeabi_ldivmod+0x1e>
 8000a24:	bf08      	it	eq
 8000a26:	2800      	cmpeq	r0, #0
 8000a28:	bf1c      	itt	ne
 8000a2a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000a2e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a32:	f000 b9bf 	b.w	8000db4 <__aeabi_idiv0>
 8000a36:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a3a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a3e:	2900      	cmp	r1, #0
 8000a40:	db09      	blt.n	8000a56 <__aeabi_ldivmod+0x42>
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	db1a      	blt.n	8000a7c <__aeabi_ldivmod+0x68>
 8000a46:	f000 f84d 	bl	8000ae4 <__udivmoddi4>
 8000a4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a52:	b004      	add	sp, #16
 8000a54:	4770      	bx	lr
 8000a56:	4240      	negs	r0, r0
 8000a58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db1b      	blt.n	8000a98 <__aeabi_ldivmod+0x84>
 8000a60:	f000 f840 	bl	8000ae4 <__udivmoddi4>
 8000a64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a6c:	b004      	add	sp, #16
 8000a6e:	4240      	negs	r0, r0
 8000a70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a74:	4252      	negs	r2, r2
 8000a76:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a7a:	4770      	bx	lr
 8000a7c:	4252      	negs	r2, r2
 8000a7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a82:	f000 f82f 	bl	8000ae4 <__udivmoddi4>
 8000a86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a8e:	b004      	add	sp, #16
 8000a90:	4240      	negs	r0, r0
 8000a92:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a96:	4770      	bx	lr
 8000a98:	4252      	negs	r2, r2
 8000a9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a9e:	f000 f821 	bl	8000ae4 <__udivmoddi4>
 8000aa2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aaa:	b004      	add	sp, #16
 8000aac:	4252      	negs	r2, r2
 8000aae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ab2:	4770      	bx	lr

08000ab4 <__aeabi_uldivmod>:
 8000ab4:	b953      	cbnz	r3, 8000acc <__aeabi_uldivmod+0x18>
 8000ab6:	b94a      	cbnz	r2, 8000acc <__aeabi_uldivmod+0x18>
 8000ab8:	2900      	cmp	r1, #0
 8000aba:	bf08      	it	eq
 8000abc:	2800      	cmpeq	r0, #0
 8000abe:	bf1c      	itt	ne
 8000ac0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ac4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ac8:	f000 b974 	b.w	8000db4 <__aeabi_idiv0>
 8000acc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad4:	f000 f806 	bl	8000ae4 <__udivmoddi4>
 8000ad8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae0:	b004      	add	sp, #16
 8000ae2:	4770      	bx	lr

08000ae4 <__udivmoddi4>:
 8000ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae8:	9d08      	ldr	r5, [sp, #32]
 8000aea:	4604      	mov	r4, r0
 8000aec:	468e      	mov	lr, r1
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d14d      	bne.n	8000b8e <__udivmoddi4+0xaa>
 8000af2:	428a      	cmp	r2, r1
 8000af4:	4694      	mov	ip, r2
 8000af6:	d969      	bls.n	8000bcc <__udivmoddi4+0xe8>
 8000af8:	fab2 f282 	clz	r2, r2
 8000afc:	b152      	cbz	r2, 8000b14 <__udivmoddi4+0x30>
 8000afe:	fa01 f302 	lsl.w	r3, r1, r2
 8000b02:	f1c2 0120 	rsb	r1, r2, #32
 8000b06:	fa20 f101 	lsr.w	r1, r0, r1
 8000b0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b12:	4094      	lsls	r4, r2
 8000b14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b18:	0c21      	lsrs	r1, r4, #16
 8000b1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b1e:	fa1f f78c 	uxth.w	r7, ip
 8000b22:	fb08 e316 	mls	r3, r8, r6, lr
 8000b26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b2a:	fb06 f107 	mul.w	r1, r6, r7
 8000b2e:	4299      	cmp	r1, r3
 8000b30:	d90a      	bls.n	8000b48 <__udivmoddi4+0x64>
 8000b32:	eb1c 0303 	adds.w	r3, ip, r3
 8000b36:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b3a:	f080 811f 	bcs.w	8000d7c <__udivmoddi4+0x298>
 8000b3e:	4299      	cmp	r1, r3
 8000b40:	f240 811c 	bls.w	8000d7c <__udivmoddi4+0x298>
 8000b44:	3e02      	subs	r6, #2
 8000b46:	4463      	add	r3, ip
 8000b48:	1a5b      	subs	r3, r3, r1
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b50:	fb08 3310 	mls	r3, r8, r0, r3
 8000b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b58:	fb00 f707 	mul.w	r7, r0, r7
 8000b5c:	42a7      	cmp	r7, r4
 8000b5e:	d90a      	bls.n	8000b76 <__udivmoddi4+0x92>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b68:	f080 810a 	bcs.w	8000d80 <__udivmoddi4+0x29c>
 8000b6c:	42a7      	cmp	r7, r4
 8000b6e:	f240 8107 	bls.w	8000d80 <__udivmoddi4+0x29c>
 8000b72:	4464      	add	r4, ip
 8000b74:	3802      	subs	r0, #2
 8000b76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7a:	1be4      	subs	r4, r4, r7
 8000b7c:	2600      	movs	r6, #0
 8000b7e:	b11d      	cbz	r5, 8000b88 <__udivmoddi4+0xa4>
 8000b80:	40d4      	lsrs	r4, r2
 8000b82:	2300      	movs	r3, #0
 8000b84:	e9c5 4300 	strd	r4, r3, [r5]
 8000b88:	4631      	mov	r1, r6
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	428b      	cmp	r3, r1
 8000b90:	d909      	bls.n	8000ba6 <__udivmoddi4+0xc2>
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	f000 80ef 	beq.w	8000d76 <__udivmoddi4+0x292>
 8000b98:	2600      	movs	r6, #0
 8000b9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b9e:	4630      	mov	r0, r6
 8000ba0:	4631      	mov	r1, r6
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	fab3 f683 	clz	r6, r3
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	d14a      	bne.n	8000c44 <__udivmoddi4+0x160>
 8000bae:	428b      	cmp	r3, r1
 8000bb0:	d302      	bcc.n	8000bb8 <__udivmoddi4+0xd4>
 8000bb2:	4282      	cmp	r2, r0
 8000bb4:	f200 80f9 	bhi.w	8000daa <__udivmoddi4+0x2c6>
 8000bb8:	1a84      	subs	r4, r0, r2
 8000bba:	eb61 0303 	sbc.w	r3, r1, r3
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	469e      	mov	lr, r3
 8000bc2:	2d00      	cmp	r5, #0
 8000bc4:	d0e0      	beq.n	8000b88 <__udivmoddi4+0xa4>
 8000bc6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bca:	e7dd      	b.n	8000b88 <__udivmoddi4+0xa4>
 8000bcc:	b902      	cbnz	r2, 8000bd0 <__udivmoddi4+0xec>
 8000bce:	deff      	udf	#255	; 0xff
 8000bd0:	fab2 f282 	clz	r2, r2
 8000bd4:	2a00      	cmp	r2, #0
 8000bd6:	f040 8092 	bne.w	8000cfe <__udivmoddi4+0x21a>
 8000bda:	eba1 010c 	sub.w	r1, r1, ip
 8000bde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000be2:	fa1f fe8c 	uxth.w	lr, ip
 8000be6:	2601      	movs	r6, #1
 8000be8:	0c20      	lsrs	r0, r4, #16
 8000bea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bee:	fb07 1113 	mls	r1, r7, r3, r1
 8000bf2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bf6:	fb0e f003 	mul.w	r0, lr, r3
 8000bfa:	4288      	cmp	r0, r1
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x12c>
 8000bfe:	eb1c 0101 	adds.w	r1, ip, r1
 8000c02:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x12a>
 8000c08:	4288      	cmp	r0, r1
 8000c0a:	f200 80cb 	bhi.w	8000da4 <__udivmoddi4+0x2c0>
 8000c0e:	4643      	mov	r3, r8
 8000c10:	1a09      	subs	r1, r1, r0
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c18:	fb07 1110 	mls	r1, r7, r0, r1
 8000c1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c20:	fb0e fe00 	mul.w	lr, lr, r0
 8000c24:	45a6      	cmp	lr, r4
 8000c26:	d908      	bls.n	8000c3a <__udivmoddi4+0x156>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c30:	d202      	bcs.n	8000c38 <__udivmoddi4+0x154>
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	f200 80bb 	bhi.w	8000dae <__udivmoddi4+0x2ca>
 8000c38:	4608      	mov	r0, r1
 8000c3a:	eba4 040e 	sub.w	r4, r4, lr
 8000c3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c42:	e79c      	b.n	8000b7e <__udivmoddi4+0x9a>
 8000c44:	f1c6 0720 	rsb	r7, r6, #32
 8000c48:	40b3      	lsls	r3, r6
 8000c4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c52:	fa20 f407 	lsr.w	r4, r0, r7
 8000c56:	fa01 f306 	lsl.w	r3, r1, r6
 8000c5a:	431c      	orrs	r4, r3
 8000c5c:	40f9      	lsrs	r1, r7
 8000c5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c62:	fa00 f306 	lsl.w	r3, r0, r6
 8000c66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c6a:	0c20      	lsrs	r0, r4, #16
 8000c6c:	fa1f fe8c 	uxth.w	lr, ip
 8000c70:	fb09 1118 	mls	r1, r9, r8, r1
 8000c74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c78:	fb08 f00e 	mul.w	r0, r8, lr
 8000c7c:	4288      	cmp	r0, r1
 8000c7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c82:	d90b      	bls.n	8000c9c <__udivmoddi4+0x1b8>
 8000c84:	eb1c 0101 	adds.w	r1, ip, r1
 8000c88:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c8c:	f080 8088 	bcs.w	8000da0 <__udivmoddi4+0x2bc>
 8000c90:	4288      	cmp	r0, r1
 8000c92:	f240 8085 	bls.w	8000da0 <__udivmoddi4+0x2bc>
 8000c96:	f1a8 0802 	sub.w	r8, r8, #2
 8000c9a:	4461      	add	r1, ip
 8000c9c:	1a09      	subs	r1, r1, r0
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ca4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ca8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb0:	458e      	cmp	lr, r1
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x1e2>
 8000cb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000cbc:	d26c      	bcs.n	8000d98 <__udivmoddi4+0x2b4>
 8000cbe:	458e      	cmp	lr, r1
 8000cc0:	d96a      	bls.n	8000d98 <__udivmoddi4+0x2b4>
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	4461      	add	r1, ip
 8000cc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cca:	fba0 9402 	umull	r9, r4, r0, r2
 8000cce:	eba1 010e 	sub.w	r1, r1, lr
 8000cd2:	42a1      	cmp	r1, r4
 8000cd4:	46c8      	mov	r8, r9
 8000cd6:	46a6      	mov	lr, r4
 8000cd8:	d356      	bcc.n	8000d88 <__udivmoddi4+0x2a4>
 8000cda:	d053      	beq.n	8000d84 <__udivmoddi4+0x2a0>
 8000cdc:	b15d      	cbz	r5, 8000cf6 <__udivmoddi4+0x212>
 8000cde:	ebb3 0208 	subs.w	r2, r3, r8
 8000ce2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ce6:	fa01 f707 	lsl.w	r7, r1, r7
 8000cea:	fa22 f306 	lsr.w	r3, r2, r6
 8000cee:	40f1      	lsrs	r1, r6
 8000cf0:	431f      	orrs	r7, r3
 8000cf2:	e9c5 7100 	strd	r7, r1, [r5]
 8000cf6:	2600      	movs	r6, #0
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	f1c2 0320 	rsb	r3, r2, #32
 8000d02:	40d8      	lsrs	r0, r3
 8000d04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d08:	fa21 f303 	lsr.w	r3, r1, r3
 8000d0c:	4091      	lsls	r1, r2
 8000d0e:	4301      	orrs	r1, r0
 8000d10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d14:	fa1f fe8c 	uxth.w	lr, ip
 8000d18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d20:	0c0b      	lsrs	r3, r1, #16
 8000d22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d26:	fb00 f60e 	mul.w	r6, r0, lr
 8000d2a:	429e      	cmp	r6, r3
 8000d2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x260>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d3a:	d22f      	bcs.n	8000d9c <__udivmoddi4+0x2b8>
 8000d3c:	429e      	cmp	r6, r3
 8000d3e:	d92d      	bls.n	8000d9c <__udivmoddi4+0x2b8>
 8000d40:	3802      	subs	r0, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	1b9b      	subs	r3, r3, r6
 8000d46:	b289      	uxth	r1, r1
 8000d48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb06 f30e 	mul.w	r3, r6, lr
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x28a>
 8000d5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d60:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d64:	d216      	bcs.n	8000d94 <__udivmoddi4+0x2b0>
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d914      	bls.n	8000d94 <__udivmoddi4+0x2b0>
 8000d6a:	3e02      	subs	r6, #2
 8000d6c:	4461      	add	r1, ip
 8000d6e:	1ac9      	subs	r1, r1, r3
 8000d70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d74:	e738      	b.n	8000be8 <__udivmoddi4+0x104>
 8000d76:	462e      	mov	r6, r5
 8000d78:	4628      	mov	r0, r5
 8000d7a:	e705      	b.n	8000b88 <__udivmoddi4+0xa4>
 8000d7c:	4606      	mov	r6, r0
 8000d7e:	e6e3      	b.n	8000b48 <__udivmoddi4+0x64>
 8000d80:	4618      	mov	r0, r3
 8000d82:	e6f8      	b.n	8000b76 <__udivmoddi4+0x92>
 8000d84:	454b      	cmp	r3, r9
 8000d86:	d2a9      	bcs.n	8000cdc <__udivmoddi4+0x1f8>
 8000d88:	ebb9 0802 	subs.w	r8, r9, r2
 8000d8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d90:	3801      	subs	r0, #1
 8000d92:	e7a3      	b.n	8000cdc <__udivmoddi4+0x1f8>
 8000d94:	4646      	mov	r6, r8
 8000d96:	e7ea      	b.n	8000d6e <__udivmoddi4+0x28a>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	e794      	b.n	8000cc6 <__udivmoddi4+0x1e2>
 8000d9c:	4640      	mov	r0, r8
 8000d9e:	e7d1      	b.n	8000d44 <__udivmoddi4+0x260>
 8000da0:	46d0      	mov	r8, sl
 8000da2:	e77b      	b.n	8000c9c <__udivmoddi4+0x1b8>
 8000da4:	3b02      	subs	r3, #2
 8000da6:	4461      	add	r1, ip
 8000da8:	e732      	b.n	8000c10 <__udivmoddi4+0x12c>
 8000daa:	4630      	mov	r0, r6
 8000dac:	e709      	b.n	8000bc2 <__udivmoddi4+0xde>
 8000dae:	4464      	add	r4, ip
 8000db0:	3802      	subs	r0, #2
 8000db2:	e742      	b.n	8000c3a <__udivmoddi4+0x156>

08000db4 <__aeabi_idiv0>:
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop

08000db8 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08c      	sub	sp, #48	; 0x30
 8000dbc:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dc2:	9302      	str	r3, [sp, #8]
 8000dc4:	2319      	movs	r3, #25
 8000dc6:	9301      	str	r3, [sp, #4]
 8000dc8:	463b      	mov	r3, r7
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	2301      	movs	r3, #1
 8000dce:	2288      	movs	r2, #136	; 0x88
 8000dd0:	21ec      	movs	r1, #236	; 0xec
 8000dd2:	4857      	ldr	r0, [pc, #348]	; (8000f30 <TrimRead+0x178>)
 8000dd4:	f003 fc18 	bl	8004608 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8000dd8:	463b      	mov	r3, r7
 8000dda:	3319      	adds	r3, #25
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000de0:	9202      	str	r2, [sp, #8]
 8000de2:	2207      	movs	r2, #7
 8000de4:	9201      	str	r2, [sp, #4]
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2301      	movs	r3, #1
 8000dea:	22e1      	movs	r2, #225	; 0xe1
 8000dec:	21ec      	movs	r1, #236	; 0xec
 8000dee:	4850      	ldr	r0, [pc, #320]	; (8000f30 <TrimRead+0x178>)
 8000df0:	f003 fc0a 	bl	8004608 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8000df4:	787b      	ldrb	r3, [r7, #1]
 8000df6:	021b      	lsls	r3, r3, #8
 8000df8:	b21a      	sxth	r2, r3
 8000dfa:	783b      	ldrb	r3, [r7, #0]
 8000dfc:	b21b      	sxth	r3, r3
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	b21b      	sxth	r3, r3
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	4b4b      	ldr	r3, [pc, #300]	; (8000f34 <TrimRead+0x17c>)
 8000e06:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8000e08:	78fb      	ldrb	r3, [r7, #3]
 8000e0a:	021b      	lsls	r3, r3, #8
 8000e0c:	b21a      	sxth	r2, r3
 8000e0e:	78bb      	ldrb	r3, [r7, #2]
 8000e10:	b21b      	sxth	r3, r3
 8000e12:	4313      	orrs	r3, r2
 8000e14:	b21a      	sxth	r2, r3
 8000e16:	4b48      	ldr	r3, [pc, #288]	; (8000f38 <TrimRead+0x180>)
 8000e18:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8000e1a:	797b      	ldrb	r3, [r7, #5]
 8000e1c:	021b      	lsls	r3, r3, #8
 8000e1e:	b21a      	sxth	r2, r3
 8000e20:	793b      	ldrb	r3, [r7, #4]
 8000e22:	b21b      	sxth	r3, r3
 8000e24:	4313      	orrs	r3, r2
 8000e26:	b21a      	sxth	r2, r3
 8000e28:	4b44      	ldr	r3, [pc, #272]	; (8000f3c <TrimRead+0x184>)
 8000e2a:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	021b      	lsls	r3, r3, #8
 8000e30:	b21a      	sxth	r2, r3
 8000e32:	797b      	ldrb	r3, [r7, #5]
 8000e34:	b21b      	sxth	r3, r3
 8000e36:	4313      	orrs	r3, r2
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	4b40      	ldr	r3, [pc, #256]	; (8000f40 <TrimRead+0x188>)
 8000e3e:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8000e40:	7a7b      	ldrb	r3, [r7, #9]
 8000e42:	021b      	lsls	r3, r3, #8
 8000e44:	b21a      	sxth	r2, r3
 8000e46:	79bb      	ldrb	r3, [r7, #6]
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	b21a      	sxth	r2, r3
 8000e4e:	4b3d      	ldr	r3, [pc, #244]	; (8000f44 <TrimRead+0x18c>)
 8000e50:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8000e52:	7afb      	ldrb	r3, [r7, #11]
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	b21a      	sxth	r2, r3
 8000e58:	7abb      	ldrb	r3, [r7, #10]
 8000e5a:	b21b      	sxth	r3, r3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b21a      	sxth	r2, r3
 8000e60:	4b39      	ldr	r3, [pc, #228]	; (8000f48 <TrimRead+0x190>)
 8000e62:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8000e64:	7b7b      	ldrb	r3, [r7, #13]
 8000e66:	021b      	lsls	r3, r3, #8
 8000e68:	b21a      	sxth	r2, r3
 8000e6a:	7b3b      	ldrb	r3, [r7, #12]
 8000e6c:	b21b      	sxth	r3, r3
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	b21a      	sxth	r2, r3
 8000e72:	4b36      	ldr	r3, [pc, #216]	; (8000f4c <TrimRead+0x194>)
 8000e74:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	b21a      	sxth	r2, r3
 8000e7c:	7bbb      	ldrb	r3, [r7, #14]
 8000e7e:	b21b      	sxth	r3, r3
 8000e80:	4313      	orrs	r3, r2
 8000e82:	b21a      	sxth	r2, r3
 8000e84:	4b32      	ldr	r3, [pc, #200]	; (8000f50 <TrimRead+0x198>)
 8000e86:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8000e88:	7c7b      	ldrb	r3, [r7, #17]
 8000e8a:	021b      	lsls	r3, r3, #8
 8000e8c:	b21a      	sxth	r2, r3
 8000e8e:	7c3b      	ldrb	r3, [r7, #16]
 8000e90:	b21b      	sxth	r3, r3
 8000e92:	4313      	orrs	r3, r2
 8000e94:	b21a      	sxth	r2, r3
 8000e96:	4b2f      	ldr	r3, [pc, #188]	; (8000f54 <TrimRead+0x19c>)
 8000e98:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8000e9a:	7cfb      	ldrb	r3, [r7, #19]
 8000e9c:	021b      	lsls	r3, r3, #8
 8000e9e:	b21a      	sxth	r2, r3
 8000ea0:	7cbb      	ldrb	r3, [r7, #18]
 8000ea2:	b21b      	sxth	r3, r3
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	b21a      	sxth	r2, r3
 8000ea8:	4b2b      	ldr	r3, [pc, #172]	; (8000f58 <TrimRead+0x1a0>)
 8000eaa:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8000eac:	7d7b      	ldrb	r3, [r7, #21]
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	b21a      	sxth	r2, r3
 8000eb2:	7d3b      	ldrb	r3, [r7, #20]
 8000eb4:	b21b      	sxth	r3, r3
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	b21a      	sxth	r2, r3
 8000eba:	4b28      	ldr	r3, [pc, #160]	; (8000f5c <TrimRead+0x1a4>)
 8000ebc:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8000ebe:	7dfb      	ldrb	r3, [r7, #23]
 8000ec0:	021b      	lsls	r3, r3, #8
 8000ec2:	b21a      	sxth	r2, r3
 8000ec4:	7dbb      	ldrb	r3, [r7, #22]
 8000ec6:	b21b      	sxth	r3, r3
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	b21a      	sxth	r2, r3
 8000ecc:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <TrimRead+0x1a8>)
 8000ece:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8000ed0:	7e3b      	ldrb	r3, [r7, #24]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <TrimRead+0x1ac>)
 8000ed6:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8000ed8:	7ebb      	ldrb	r3, [r7, #26]
 8000eda:	021b      	lsls	r3, r3, #8
 8000edc:	b21a      	sxth	r2, r3
 8000ede:	7e7b      	ldrb	r3, [r7, #25]
 8000ee0:	b21b      	sxth	r3, r3
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	b21a      	sxth	r2, r3
 8000ee6:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <TrimRead+0x1b0>)
 8000ee8:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8000eea:	7efb      	ldrb	r3, [r7, #27]
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <TrimRead+0x1b4>)
 8000ef0:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8000ef2:	7f3b      	ldrb	r3, [r7, #28]
 8000ef4:	011b      	lsls	r3, r3, #4
 8000ef6:	b21a      	sxth	r2, r3
 8000ef8:	7f7b      	ldrb	r3, [r7, #29]
 8000efa:	b21b      	sxth	r3, r3
 8000efc:	f003 030f 	and.w	r3, r3, #15
 8000f00:	b21b      	sxth	r3, r3
 8000f02:	4313      	orrs	r3, r2
 8000f04:	b21a      	sxth	r2, r3
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <TrimRead+0x1b8>)
 8000f08:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 8000f0a:	7fbb      	ldrb	r3, [r7, #30]
 8000f0c:	011b      	lsls	r3, r3, #4
 8000f0e:	b21a      	sxth	r2, r3
 8000f10:	7f7b      	ldrb	r3, [r7, #29]
 8000f12:	091b      	lsrs	r3, r3, #4
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	b21b      	sxth	r3, r3
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	b21a      	sxth	r2, r3
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <TrimRead+0x1bc>)
 8000f1e:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8000f20:	7ffb      	ldrb	r3, [r7, #31]
 8000f22:	b21a      	sxth	r2, r3
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <TrimRead+0x1c0>)
 8000f26:	801a      	strh	r2, [r3, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200000e4 	.word	0x200000e4
 8000f34:	200000bc 	.word	0x200000bc
 8000f38:	200000c4 	.word	0x200000c4
 8000f3c:	200000c6 	.word	0x200000c6
 8000f40:	200000be 	.word	0x200000be
 8000f44:	200000c8 	.word	0x200000c8
 8000f48:	200000ca 	.word	0x200000ca
 8000f4c:	200000cc 	.word	0x200000cc
 8000f50:	200000ce 	.word	0x200000ce
 8000f54:	200000d0 	.word	0x200000d0
 8000f58:	200000d2 	.word	0x200000d2
 8000f5c:	200000d4 	.word	0x200000d4
 8000f60:	200000d6 	.word	0x200000d6
 8000f64:	200000c0 	.word	0x200000c0
 8000f68:	200000d8 	.word	0x200000d8
 8000f6c:	200000c2 	.word	0x200000c2
 8000f70:	200000da 	.word	0x200000da
 8000f74:	200000dc 	.word	0x200000dc
 8000f78:	200000de 	.word	0x200000de

08000f7c <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af04      	add	r7, sp, #16
 8000f82:	4604      	mov	r4, r0
 8000f84:	4608      	mov	r0, r1
 8000f86:	4611      	mov	r1, r2
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4623      	mov	r3, r4
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71bb      	strb	r3, [r7, #6]
 8000f92:	460b      	mov	r3, r1
 8000f94:	717b      	strb	r3, [r7, #5]
 8000f96:	4613      	mov	r3, r2
 8000f98:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 8000f9a:	f7ff ff0d 	bl	8000db8 <TrimRead>


	uint8_t datatowrite = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8000fa6:	23b6      	movs	r3, #182	; 0xb6
 8000fa8:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	f107 030f 	add.w	r3, r7, #15
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	22e0      	movs	r2, #224	; 0xe0
 8000fbe:	21ec      	movs	r1, #236	; 0xec
 8000fc0:	4858      	ldr	r0, [pc, #352]	; (8001124 <BME280_Config+0x1a8>)
 8000fc2:	f003 fa27 	bl	8004414 <HAL_I2C_Mem_Write>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d002      	beq.n	8000fd2 <BME280_Config+0x56>
	{
		return -1;
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fd0:	e0a3      	b.n	800111a <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 8000fd2:	2064      	movs	r0, #100	; 0x64
 8000fd4:	f001 f9fc 	bl	80023d0 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8000fd8:	797b      	ldrb	r3, [r7, #5]
 8000fda:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe0:	9302      	str	r3, [sp, #8]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	9301      	str	r3, [sp, #4]
 8000fe6:	f107 030f 	add.w	r3, r7, #15
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2301      	movs	r3, #1
 8000fee:	22f2      	movs	r2, #242	; 0xf2
 8000ff0:	21ec      	movs	r1, #236	; 0xec
 8000ff2:	484c      	ldr	r0, [pc, #304]	; (8001124 <BME280_Config+0x1a8>)
 8000ff4:	f003 fa0e 	bl	8004414 <HAL_I2C_Mem_Write>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d002      	beq.n	8001004 <BME280_Config+0x88>
	{
		return -1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001002:	e08a      	b.n	800111a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001004:	2064      	movs	r0, #100	; 0x64
 8001006:	f001 f9e3 	bl	80023d0 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 800100a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100e:	9302      	str	r3, [sp, #8]
 8001010:	2301      	movs	r3, #1
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	f107 030e 	add.w	r3, r7, #14
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2301      	movs	r3, #1
 800101c:	22f2      	movs	r2, #242	; 0xf2
 800101e:	21ec      	movs	r1, #236	; 0xec
 8001020:	4840      	ldr	r0, [pc, #256]	; (8001124 <BME280_Config+0x1a8>)
 8001022:	f003 faf1 	bl	8004608 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001026:	7bba      	ldrb	r2, [r7, #14]
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	429a      	cmp	r2, r3
 800102c:	d002      	beq.n	8001034 <BME280_Config+0xb8>
	{
		return -1;
 800102e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001032:	e072      	b.n	800111a <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001034:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001038:	015b      	lsls	r3, r3, #5
 800103a:	b25a      	sxtb	r2, r3
 800103c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	b25b      	sxtb	r3, r3
 8001044:	4313      	orrs	r3, r2
 8001046:	b25b      	sxtb	r3, r3
 8001048:	b2db      	uxtb	r3, r3
 800104a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800104c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001050:	9302      	str	r3, [sp, #8]
 8001052:	2301      	movs	r3, #1
 8001054:	9301      	str	r3, [sp, #4]
 8001056:	f107 030f 	add.w	r3, r7, #15
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2301      	movs	r3, #1
 800105e:	22f5      	movs	r2, #245	; 0xf5
 8001060:	21ec      	movs	r1, #236	; 0xec
 8001062:	4830      	ldr	r0, [pc, #192]	; (8001124 <BME280_Config+0x1a8>)
 8001064:	f003 f9d6 	bl	8004414 <HAL_I2C_Mem_Write>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d002      	beq.n	8001074 <BME280_Config+0xf8>
	{
		return -1;
 800106e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001072:	e052      	b.n	800111a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001074:	2064      	movs	r0, #100	; 0x64
 8001076:	f001 f9ab 	bl	80023d0 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 800107a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107e:	9302      	str	r3, [sp, #8]
 8001080:	2301      	movs	r3, #1
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	f107 030e 	add.w	r3, r7, #14
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2301      	movs	r3, #1
 800108c:	22f5      	movs	r2, #245	; 0xf5
 800108e:	21ec      	movs	r1, #236	; 0xec
 8001090:	4824      	ldr	r0, [pc, #144]	; (8001124 <BME280_Config+0x1a8>)
 8001092:	f003 fab9 	bl	8004608 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001096:	7bba      	ldrb	r2, [r7, #14]
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	429a      	cmp	r2, r3
 800109c:	d002      	beq.n	80010a4 <BME280_Config+0x128>
	{
		return -1;
 800109e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010a2:	e03a      	b.n	800111a <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	015b      	lsls	r3, r3, #5
 80010a8:	b25a      	sxtb	r2, r3
 80010aa:	79bb      	ldrb	r3, [r7, #6]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	4313      	orrs	r3, r2
 80010b2:	b25a      	sxtb	r2, r3
 80010b4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	b25b      	sxtb	r3, r3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80010c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c4:	9302      	str	r3, [sp, #8]
 80010c6:	2301      	movs	r3, #1
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	f107 030f 	add.w	r3, r7, #15
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2301      	movs	r3, #1
 80010d2:	22f4      	movs	r2, #244	; 0xf4
 80010d4:	21ec      	movs	r1, #236	; 0xec
 80010d6:	4813      	ldr	r0, [pc, #76]	; (8001124 <BME280_Config+0x1a8>)
 80010d8:	f003 f99c 	bl	8004414 <HAL_I2C_Mem_Write>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d002      	beq.n	80010e8 <BME280_Config+0x16c>
	{
		return -1;
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010e6:	e018      	b.n	800111a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80010e8:	2064      	movs	r0, #100	; 0x64
 80010ea:	f001 f971 	bl	80023d0 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80010ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	2301      	movs	r3, #1
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	f107 030e 	add.w	r3, r7, #14
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2301      	movs	r3, #1
 8001100:	22f4      	movs	r2, #244	; 0xf4
 8001102:	21ec      	movs	r1, #236	; 0xec
 8001104:	4807      	ldr	r0, [pc, #28]	; (8001124 <BME280_Config+0x1a8>)
 8001106:	f003 fa7f 	bl	8004608 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800110a:	7bba      	ldrb	r2, [r7, #14]
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	429a      	cmp	r2, r3
 8001110:	d002      	beq.n	8001118 <BME280_Config+0x19c>
	{
		return -1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001116:	e000      	b.n	800111a <BME280_Config+0x19e>
	}

	return 0;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	bd90      	pop	{r4, r7, pc}
 8001122:	bf00      	nop
 8001124:	200000e4 	.word	0x200000e4

08001128 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 800112e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001132:	9302      	str	r3, [sp, #8]
 8001134:	2301      	movs	r3, #1
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <BMEReadRaw+0x8c>)
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2301      	movs	r3, #1
 800113e:	22d0      	movs	r2, #208	; 0xd0
 8001140:	21ec      	movs	r1, #236	; 0xec
 8001142:	481d      	ldr	r0, [pc, #116]	; (80011b8 <BMEReadRaw+0x90>)
 8001144:	f003 fa60 	bl	8004608 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001148:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <BMEReadRaw+0x8c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b60      	cmp	r3, #96	; 0x60
 800114e:	d12a      	bne.n	80011a6 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001154:	9302      	str	r3, [sp, #8]
 8001156:	2308      	movs	r3, #8
 8001158:	9301      	str	r3, [sp, #4]
 800115a:	463b      	mov	r3, r7
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2301      	movs	r3, #1
 8001160:	22f7      	movs	r2, #247	; 0xf7
 8001162:	21ec      	movs	r1, #236	; 0xec
 8001164:	4814      	ldr	r0, [pc, #80]	; (80011b8 <BMEReadRaw+0x90>)
 8001166:	f003 fa4f 	bl	8004608 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 800116a:	783b      	ldrb	r3, [r7, #0]
 800116c:	031a      	lsls	r2, r3, #12
 800116e:	787b      	ldrb	r3, [r7, #1]
 8001170:	011b      	lsls	r3, r3, #4
 8001172:	4313      	orrs	r3, r2
 8001174:	78ba      	ldrb	r2, [r7, #2]
 8001176:	0912      	lsrs	r2, r2, #4
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	4313      	orrs	r3, r2
 800117c:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <BMEReadRaw+0x94>)
 800117e:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	031a      	lsls	r2, r3, #12
 8001184:	793b      	ldrb	r3, [r7, #4]
 8001186:	011b      	lsls	r3, r3, #4
 8001188:	4313      	orrs	r3, r2
 800118a:	797a      	ldrb	r2, [r7, #5]
 800118c:	0912      	lsrs	r2, r2, #4
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	4313      	orrs	r3, r2
 8001192:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <BMEReadRaw+0x98>)
 8001194:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8001196:	79bb      	ldrb	r3, [r7, #6]
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	79fa      	ldrb	r2, [r7, #7]
 800119c:	4313      	orrs	r3, r2
 800119e:	4a09      	ldr	r2, [pc, #36]	; (80011c4 <BMEReadRaw+0x9c>)
 80011a0:	6013      	str	r3, [r2, #0]

		return 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	e001      	b.n	80011aa <BMEReadRaw+0x82>
	}

	else return -1;
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200000ac 	.word	0x200000ac
 80011b8:	200000e4 	.word	0x200000e4
 80011bc:	200000b4 	.word	0x200000b4
 80011c0:	200000b0 	.word	0x200000b0
 80011c4:	200000b8 	.word	0x200000b8

080011c8 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b087      	sub	sp, #28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	10da      	asrs	r2, r3, #3
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <BME280_compensate_T_int32+0x74>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	4a18      	ldr	r2, [pc, #96]	; (8001240 <BME280_compensate_T_int32+0x78>)
 80011de:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011e2:	fb02 f303 	mul.w	r3, r2, r3
 80011e6:	12db      	asrs	r3, r3, #11
 80011e8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	111b      	asrs	r3, r3, #4
 80011ee:	4a13      	ldr	r2, [pc, #76]	; (800123c <BME280_compensate_T_int32+0x74>)
 80011f0:	8812      	ldrh	r2, [r2, #0]
 80011f2:	1a9b      	subs	r3, r3, r2
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	1112      	asrs	r2, r2, #4
 80011f8:	4910      	ldr	r1, [pc, #64]	; (800123c <BME280_compensate_T_int32+0x74>)
 80011fa:	8809      	ldrh	r1, [r1, #0]
 80011fc:	1a52      	subs	r2, r2, r1
 80011fe:	fb02 f303 	mul.w	r3, r2, r3
 8001202:	131b      	asrs	r3, r3, #12
 8001204:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <BME280_compensate_T_int32+0x7c>)
 8001206:	f9b2 2000 	ldrsh.w	r2, [r2]
 800120a:	fb02 f303 	mul.w	r3, r2, r3
 800120e:	139b      	asrs	r3, r3, #14
 8001210:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4413      	add	r3, r2
 8001218:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <BME280_compensate_T_int32+0x80>)
 800121a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <BME280_compensate_T_int32+0x80>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4613      	mov	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	3380      	adds	r3, #128	; 0x80
 8001228:	121b      	asrs	r3, r3, #8
 800122a:	60fb      	str	r3, [r7, #12]
	return T;
 800122c:	68fb      	ldr	r3, [r7, #12]
}
 800122e:	4618      	mov	r0, r3
 8001230:	371c      	adds	r7, #28
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	200000bc 	.word	0x200000bc
 8001240:	200000c4 	.word	0x200000c4
 8001244:	200000c6 	.word	0x200000c6
 8001248:	200000e0 	.word	0x200000e0

0800124c <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 800124c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001250:	b0ca      	sub	sp, #296	; 0x128
 8001252:	af00      	add	r7, sp, #0
 8001254:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001258:	4baf      	ldr	r3, [pc, #700]	; (8001518 <BME280_compensate_P_int64+0x2cc>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	17da      	asrs	r2, r3, #31
 800125e:	461c      	mov	r4, r3
 8001260:	4615      	mov	r5, r2
 8001262:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001266:	f145 3bff 	adc.w	fp, r5, #4294967295	; 0xffffffff
 800126a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800126e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001272:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001276:	fb03 f102 	mul.w	r1, r3, r2
 800127a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800127e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001282:	fb02 f303 	mul.w	r3, r2, r3
 8001286:	18ca      	adds	r2, r1, r3
 8001288:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800128c:	fba3 8903 	umull	r8, r9, r3, r3
 8001290:	eb02 0309 	add.w	r3, r2, r9
 8001294:	4699      	mov	r9, r3
 8001296:	4ba1      	ldr	r3, [pc, #644]	; (800151c <BME280_compensate_P_int64+0x2d0>)
 8001298:	f9b3 3000 	ldrsh.w	r3, [r3]
 800129c:	b21b      	sxth	r3, r3
 800129e:	17da      	asrs	r2, r3, #31
 80012a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80012a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80012a8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80012ac:	4603      	mov	r3, r0
 80012ae:	fb03 f209 	mul.w	r2, r3, r9
 80012b2:	460b      	mov	r3, r1
 80012b4:	fb08 f303 	mul.w	r3, r8, r3
 80012b8:	4413      	add	r3, r2
 80012ba:	4602      	mov	r2, r0
 80012bc:	fba8 1202 	umull	r1, r2, r8, r2
 80012c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80012c4:	460a      	mov	r2, r1
 80012c6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80012ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80012ce:	4413      	add	r3, r2
 80012d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80012d4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80012d8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80012dc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80012e0:	4b8f      	ldr	r3, [pc, #572]	; (8001520 <BME280_compensate_P_int64+0x2d4>)
 80012e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	17da      	asrs	r2, r3, #31
 80012ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80012ee:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80012f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012f6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80012fa:	462a      	mov	r2, r5
 80012fc:	fb02 f203 	mul.w	r2, r2, r3
 8001300:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001304:	4621      	mov	r1, r4
 8001306:	fb01 f303 	mul.w	r3, r1, r3
 800130a:	441a      	add	r2, r3
 800130c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001310:	4621      	mov	r1, r4
 8001312:	fba3 1301 	umull	r1, r3, r3, r1
 8001316:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800131a:	460b      	mov	r3, r1
 800131c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001324:	18d3      	adds	r3, r2, r3
 8001326:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800132a:	f04f 0000 	mov.w	r0, #0
 800132e:	f04f 0100 	mov.w	r1, #0
 8001332:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001336:	462b      	mov	r3, r5
 8001338:	0459      	lsls	r1, r3, #17
 800133a:	4623      	mov	r3, r4
 800133c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001340:	4623      	mov	r3, r4
 8001342:	0458      	lsls	r0, r3, #17
 8001344:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001348:	1814      	adds	r4, r2, r0
 800134a:	643c      	str	r4, [r7, #64]	; 0x40
 800134c:	414b      	adcs	r3, r1
 800134e:	647b      	str	r3, [r7, #68]	; 0x44
 8001350:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001354:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001358:	4b72      	ldr	r3, [pc, #456]	; (8001524 <BME280_compensate_P_int64+0x2d8>)
 800135a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800135e:	b21b      	sxth	r3, r3
 8001360:	17da      	asrs	r2, r3, #31
 8001362:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001366:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800136a:	f04f 0000 	mov.w	r0, #0
 800136e:	f04f 0100 	mov.w	r1, #0
 8001372:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001376:	00d9      	lsls	r1, r3, #3
 8001378:	2000      	movs	r0, #0
 800137a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800137e:	1814      	adds	r4, r2, r0
 8001380:	63bc      	str	r4, [r7, #56]	; 0x38
 8001382:	414b      	adcs	r3, r1
 8001384:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001386:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800138a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800138e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001392:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001396:	fb03 f102 	mul.w	r1, r3, r2
 800139a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800139e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013a2:	fb02 f303 	mul.w	r3, r2, r3
 80013a6:	18ca      	adds	r2, r1, r3
 80013a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013ac:	fba3 1303 	umull	r1, r3, r3, r3
 80013b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80013b4:	460b      	mov	r3, r1
 80013b6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80013ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80013be:	18d3      	adds	r3, r2, r3
 80013c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80013c4:	4b58      	ldr	r3, [pc, #352]	; (8001528 <BME280_compensate_P_int64+0x2dc>)
 80013c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	17da      	asrs	r2, r3, #31
 80013ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80013d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80013d6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80013da:	462b      	mov	r3, r5
 80013dc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80013e0:	4642      	mov	r2, r8
 80013e2:	fb02 f203 	mul.w	r2, r2, r3
 80013e6:	464b      	mov	r3, r9
 80013e8:	4621      	mov	r1, r4
 80013ea:	fb01 f303 	mul.w	r3, r1, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	4622      	mov	r2, r4
 80013f2:	4641      	mov	r1, r8
 80013f4:	fba2 1201 	umull	r1, r2, r2, r1
 80013f8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80013fc:	460a      	mov	r2, r1
 80013fe:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001402:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001406:	4413      	add	r3, r2
 8001408:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800140c:	f04f 0000 	mov.w	r0, #0
 8001410:	f04f 0100 	mov.w	r1, #0
 8001414:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001418:	4623      	mov	r3, r4
 800141a:	0a18      	lsrs	r0, r3, #8
 800141c:	462b      	mov	r3, r5
 800141e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001422:	462b      	mov	r3, r5
 8001424:	1219      	asrs	r1, r3, #8
 8001426:	4b41      	ldr	r3, [pc, #260]	; (800152c <BME280_compensate_P_int64+0x2e0>)
 8001428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142c:	b21b      	sxth	r3, r3
 800142e:	17da      	asrs	r2, r3, #31
 8001430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001434:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001438:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800143c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001440:	464a      	mov	r2, r9
 8001442:	fb02 f203 	mul.w	r2, r2, r3
 8001446:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800144a:	4644      	mov	r4, r8
 800144c:	fb04 f303 	mul.w	r3, r4, r3
 8001450:	441a      	add	r2, r3
 8001452:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001456:	4644      	mov	r4, r8
 8001458:	fba3 4304 	umull	r4, r3, r3, r4
 800145c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001460:	4623      	mov	r3, r4
 8001462:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001466:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800146a:	18d3      	adds	r3, r2, r3
 800146c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800147c:	464c      	mov	r4, r9
 800147e:	0323      	lsls	r3, r4, #12
 8001480:	4644      	mov	r4, r8
 8001482:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001486:	4644      	mov	r4, r8
 8001488:	0322      	lsls	r2, r4, #12
 800148a:	1884      	adds	r4, r0, r2
 800148c:	633c      	str	r4, [r7, #48]	; 0x30
 800148e:	eb41 0303 	adc.w	r3, r1, r3
 8001492:	637b      	str	r3, [r7, #52]	; 0x34
 8001494:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001498:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 800149c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80014a0:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80014a4:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80014a8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80014ac:	4b20      	ldr	r3, [pc, #128]	; (8001530 <BME280_compensate_P_int64+0x2e4>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	2200      	movs	r2, #0
 80014b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80014b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80014bc:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80014c0:	462b      	mov	r3, r5
 80014c2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80014c6:	4642      	mov	r2, r8
 80014c8:	fb02 f203 	mul.w	r2, r2, r3
 80014cc:	464b      	mov	r3, r9
 80014ce:	4621      	mov	r1, r4
 80014d0:	fb01 f303 	mul.w	r3, r1, r3
 80014d4:	4413      	add	r3, r2
 80014d6:	4622      	mov	r2, r4
 80014d8:	4641      	mov	r1, r8
 80014da:	fba2 1201 	umull	r1, r2, r2, r1
 80014de:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80014e2:	460a      	mov	r2, r1
 80014e4:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80014e8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80014ec:	4413      	add	r3, r2
 80014ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80014fe:	4629      	mov	r1, r5
 8001500:	104a      	asrs	r2, r1, #1
 8001502:	4629      	mov	r1, r5
 8001504:	17cb      	asrs	r3, r1, #31
 8001506:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 800150a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800150e:	4313      	orrs	r3, r2
 8001510:	d110      	bne.n	8001534 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001512:	2300      	movs	r3, #0
 8001514:	e154      	b.n	80017c0 <BME280_compensate_P_int64+0x574>
 8001516:	bf00      	nop
 8001518:	200000e0 	.word	0x200000e0
 800151c:	200000d0 	.word	0x200000d0
 8001520:	200000ce 	.word	0x200000ce
 8001524:	200000cc 	.word	0x200000cc
 8001528:	200000ca 	.word	0x200000ca
 800152c:	200000c8 	.word	0x200000c8
 8001530:	200000be 	.word	0x200000be
	}
	p = 1048576-adc_P;
 8001534:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001538:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800153c:	17da      	asrs	r2, r3, #31
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001540:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001542:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001546:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800154a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800154e:	105b      	asrs	r3, r3, #1
 8001550:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001554:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001558:	07db      	lsls	r3, r3, #31
 800155a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800155e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001562:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001566:	4621      	mov	r1, r4
 8001568:	1a89      	subs	r1, r1, r2
 800156a:	67b9      	str	r1, [r7, #120]	; 0x78
 800156c:	4629      	mov	r1, r5
 800156e:	eb61 0303 	sbc.w	r3, r1, r3
 8001572:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001574:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001578:	4622      	mov	r2, r4
 800157a:	462b      	mov	r3, r5
 800157c:	1891      	adds	r1, r2, r2
 800157e:	6239      	str	r1, [r7, #32]
 8001580:	415b      	adcs	r3, r3
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
 8001584:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001588:	4621      	mov	r1, r4
 800158a:	1851      	adds	r1, r2, r1
 800158c:	61b9      	str	r1, [r7, #24]
 800158e:	4629      	mov	r1, r5
 8001590:	414b      	adcs	r3, r1
 8001592:	61fb      	str	r3, [r7, #28]
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80015a0:	4649      	mov	r1, r9
 80015a2:	018b      	lsls	r3, r1, #6
 80015a4:	4641      	mov	r1, r8
 80015a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015aa:	4641      	mov	r1, r8
 80015ac:	018a      	lsls	r2, r1, #6
 80015ae:	4641      	mov	r1, r8
 80015b0:	1889      	adds	r1, r1, r2
 80015b2:	6139      	str	r1, [r7, #16]
 80015b4:	4649      	mov	r1, r9
 80015b6:	eb43 0101 	adc.w	r1, r3, r1
 80015ba:	6179      	str	r1, [r7, #20]
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80015c8:	4649      	mov	r1, r9
 80015ca:	008b      	lsls	r3, r1, #2
 80015cc:	4641      	mov	r1, r8
 80015ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015d2:	4641      	mov	r1, r8
 80015d4:	008a      	lsls	r2, r1, #2
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	4603      	mov	r3, r0
 80015dc:	4622      	mov	r2, r4
 80015de:	189b      	adds	r3, r3, r2
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	460b      	mov	r3, r1
 80015e4:	462a      	mov	r2, r5
 80015e6:	eb42 0303 	adc.w	r3, r2, r3
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	f04f 0200 	mov.w	r2, #0
 80015f0:	f04f 0300 	mov.w	r3, #0
 80015f4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80015f8:	4649      	mov	r1, r9
 80015fa:	008b      	lsls	r3, r1, #2
 80015fc:	4641      	mov	r1, r8
 80015fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001602:	4641      	mov	r1, r8
 8001604:	008a      	lsls	r2, r1, #2
 8001606:	4610      	mov	r0, r2
 8001608:	4619      	mov	r1, r3
 800160a:	4603      	mov	r3, r0
 800160c:	4622      	mov	r2, r4
 800160e:	189b      	adds	r3, r3, r2
 8001610:	673b      	str	r3, [r7, #112]	; 0x70
 8001612:	462b      	mov	r3, r5
 8001614:	460a      	mov	r2, r1
 8001616:	eb42 0303 	adc.w	r3, r2, r3
 800161a:	677b      	str	r3, [r7, #116]	; 0x74
 800161c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001620:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001624:	f7ff f9f6 	bl	8000a14 <__aeabi_ldivmod>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001630:	4b66      	ldr	r3, [pc, #408]	; (80017cc <BME280_compensate_P_int64+0x580>)
 8001632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001636:	b21b      	sxth	r3, r3
 8001638:	17da      	asrs	r2, r3, #31
 800163a:	66bb      	str	r3, [r7, #104]	; 0x68
 800163c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800163e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001642:	f04f 0000 	mov.w	r0, #0
 8001646:	f04f 0100 	mov.w	r1, #0
 800164a:	0b50      	lsrs	r0, r2, #13
 800164c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001650:	1359      	asrs	r1, r3, #13
 8001652:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001656:	462b      	mov	r3, r5
 8001658:	fb00 f203 	mul.w	r2, r0, r3
 800165c:	4623      	mov	r3, r4
 800165e:	fb03 f301 	mul.w	r3, r3, r1
 8001662:	4413      	add	r3, r2
 8001664:	4622      	mov	r2, r4
 8001666:	fba2 1200 	umull	r1, r2, r2, r0
 800166a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800166e:	460a      	mov	r2, r1
 8001670:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001674:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001678:	4413      	add	r3, r2
 800167a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800167e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001682:	f04f 0000 	mov.w	r0, #0
 8001686:	f04f 0100 	mov.w	r1, #0
 800168a:	0b50      	lsrs	r0, r2, #13
 800168c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001690:	1359      	asrs	r1, r3, #13
 8001692:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001696:	462b      	mov	r3, r5
 8001698:	fb00 f203 	mul.w	r2, r0, r3
 800169c:	4623      	mov	r3, r4
 800169e:	fb03 f301 	mul.w	r3, r3, r1
 80016a2:	4413      	add	r3, r2
 80016a4:	4622      	mov	r2, r4
 80016a6:	fba2 1200 	umull	r1, r2, r2, r0
 80016aa:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80016ae:	460a      	mov	r2, r1
 80016b0:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80016b4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80016b8:	4413      	add	r3, r2
 80016ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	f04f 0300 	mov.w	r3, #0
 80016c6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80016ca:	4621      	mov	r1, r4
 80016cc:	0e4a      	lsrs	r2, r1, #25
 80016ce:	4629      	mov	r1, r5
 80016d0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80016d4:	4629      	mov	r1, r5
 80016d6:	164b      	asrs	r3, r1, #25
 80016d8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80016dc:	4b3c      	ldr	r3, [pc, #240]	; (80017d0 <BME280_compensate_P_int64+0x584>)
 80016de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	17da      	asrs	r2, r3, #31
 80016e6:	663b      	str	r3, [r7, #96]	; 0x60
 80016e8:	667a      	str	r2, [r7, #100]	; 0x64
 80016ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016ee:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80016f2:	462a      	mov	r2, r5
 80016f4:	fb02 f203 	mul.w	r2, r2, r3
 80016f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016fc:	4621      	mov	r1, r4
 80016fe:	fb01 f303 	mul.w	r3, r1, r3
 8001702:	4413      	add	r3, r2
 8001704:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001708:	4621      	mov	r1, r4
 800170a:	fba2 1201 	umull	r1, r2, r2, r1
 800170e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001712:	460a      	mov	r2, r1
 8001714:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001718:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800171c:	4413      	add	r3, r2
 800171e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800172e:	4621      	mov	r1, r4
 8001730:	0cca      	lsrs	r2, r1, #19
 8001732:	4629      	mov	r1, r5
 8001734:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001738:	4629      	mov	r1, r5
 800173a:	14cb      	asrs	r3, r1, #19
 800173c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001740:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001744:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001748:	1884      	adds	r4, r0, r2
 800174a:	65bc      	str	r4, [r7, #88]	; 0x58
 800174c:	eb41 0303 	adc.w	r3, r1, r3
 8001750:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001752:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001756:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800175a:	4621      	mov	r1, r4
 800175c:	1889      	adds	r1, r1, r2
 800175e:	6539      	str	r1, [r7, #80]	; 0x50
 8001760:	4629      	mov	r1, r5
 8001762:	eb43 0101 	adc.w	r1, r3, r1
 8001766:	6579      	str	r1, [r7, #84]	; 0x54
 8001768:	f04f 0000 	mov.w	r0, #0
 800176c:	f04f 0100 	mov.w	r1, #0
 8001770:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001774:	4623      	mov	r3, r4
 8001776:	0a18      	lsrs	r0, r3, #8
 8001778:	462b      	mov	r3, r5
 800177a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800177e:	462b      	mov	r3, r5
 8001780:	1219      	asrs	r1, r3, #8
 8001782:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <BME280_compensate_P_int64+0x588>)
 8001784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001788:	b21b      	sxth	r3, r3
 800178a:	17da      	asrs	r2, r3, #31
 800178c:	64bb      	str	r3, [r7, #72]	; 0x48
 800178e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800179c:	464c      	mov	r4, r9
 800179e:	0123      	lsls	r3, r4, #4
 80017a0:	4644      	mov	r4, r8
 80017a2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80017a6:	4644      	mov	r4, r8
 80017a8:	0122      	lsls	r2, r4, #4
 80017aa:	1884      	adds	r4, r0, r2
 80017ac:	603c      	str	r4, [r7, #0]
 80017ae:	eb41 0303 	adc.w	r3, r1, r3
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017b8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 80017bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80017c6:	46bd      	mov	sp, r7
 80017c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017cc:	200000d6 	.word	0x200000d6
 80017d0:	200000d4 	.word	0x200000d4
 80017d4:	200000d2 	.word	0x200000d2

080017d8 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 80017e0:	4b2c      	ldr	r3, [pc, #176]	; (8001894 <bme280_compensate_H_int32+0xbc>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80017e8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	039a      	lsls	r2, r3, #14
 80017ee:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <bme280_compensate_H_int32+0xc0>)
 80017f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f4:	051b      	lsls	r3, r3, #20
 80017f6:	1ad2      	subs	r2, r2, r3
 80017f8:	4b28      	ldr	r3, [pc, #160]	; (800189c <bme280_compensate_H_int32+0xc4>)
 80017fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017fe:	4619      	mov	r1, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	fb01 f303 	mul.w	r3, r1, r3
 8001806:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001808:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800180c:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 800180e:	4a24      	ldr	r2, [pc, #144]	; (80018a0 <bme280_compensate_H_int32+0xc8>)
 8001810:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001814:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 800181c:	1292      	asrs	r2, r2, #10
 800181e:	4921      	ldr	r1, [pc, #132]	; (80018a4 <bme280_compensate_H_int32+0xcc>)
 8001820:	8809      	ldrh	r1, [r1, #0]
 8001822:	4608      	mov	r0, r1
 8001824:	68f9      	ldr	r1, [r7, #12]
 8001826:	fb00 f101 	mul.w	r1, r0, r1
 800182a:	12c9      	asrs	r1, r1, #11
 800182c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001830:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001834:	1292      	asrs	r2, r2, #10
 8001836:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800183a:	491b      	ldr	r1, [pc, #108]	; (80018a8 <bme280_compensate_H_int32+0xd0>)
 800183c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001840:	fb01 f202 	mul.w	r2, r1, r2
 8001844:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001848:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 800184a:	fb02 f303 	mul.w	r3, r2, r3
 800184e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	13db      	asrs	r3, r3, #15
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	13d2      	asrs	r2, r2, #15
 8001858:	fb02 f303 	mul.w	r3, r2, r3
 800185c:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 800185e:	4a13      	ldr	r2, [pc, #76]	; (80018ac <bme280_compensate_H_int32+0xd4>)
 8001860:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001862:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001866:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001874:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 800187c:	bfa8      	it	ge
 800187e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001882:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	131b      	asrs	r3, r3, #12
}
 8001888:	4618      	mov	r0, r3
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	200000e0 	.word	0x200000e0
 8001898:	200000da 	.word	0x200000da
 800189c:	200000dc 	.word	0x200000dc
 80018a0:	200000de 	.word	0x200000de
 80018a4:	200000c2 	.word	0x200000c2
 80018a8:	200000d8 	.word	0x200000d8
 80018ac:	200000c0 	.word	0x200000c0

080018b0 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 80018b4:	f7ff fc38 	bl	8001128 <BMEReadRaw>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d163      	bne.n	8001986 <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 80018be:	4b39      	ldr	r3, [pc, #228]	; (80019a4 <BME280_Measure+0xf4>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80018c6:	d104      	bne.n	80018d2 <BME280_Measure+0x22>
 80018c8:	4b37      	ldr	r3, [pc, #220]	; (80019a8 <BME280_Measure+0xf8>)
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	e016      	b.n	8001900 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 80018d2:	4b34      	ldr	r3, [pc, #208]	; (80019a4 <BME280_Measure+0xf4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fc76 	bl	80011c8 <BME280_compensate_T_int32>
 80018dc:	4603      	mov	r3, r0
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fdcc 	bl	800047c <__aeabi_i2d>
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	4b30      	ldr	r3, [pc, #192]	; (80019ac <BME280_Measure+0xfc>)
 80018ea:	f7fe ff5b 	bl	80007a4 <__aeabi_ddiv>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f7ff f83d 	bl	8000974 <__aeabi_d2f>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4a2a      	ldr	r2, [pc, #168]	; (80019a8 <BME280_Measure+0xf8>)
 80018fe:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001900:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <BME280_Measure+0x100>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001908:	d104      	bne.n	8001914 <BME280_Measure+0x64>
 800190a:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <BME280_Measure+0x104>)
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	e016      	b.n	8001942 <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001914:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <BME280_Measure+0x100>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fc97 	bl	800124c <BME280_compensate_P_int64>
 800191e:	4603      	mov	r3, r0
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fd9b 	bl	800045c <__aeabi_ui2d>
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <BME280_Measure+0x108>)
 800192c:	f7fe ff3a 	bl	80007a4 <__aeabi_ddiv>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4610      	mov	r0, r2
 8001936:	4619      	mov	r1, r3
 8001938:	f7ff f81c 	bl	8000974 <__aeabi_d2f>
 800193c:	4603      	mov	r3, r0
 800193e:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <BME280_Measure+0x104>)
 8001940:	6013      	str	r3, [r2, #0]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001942:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <BME280_Measure+0x10c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800194a:	d104      	bne.n	8001956 <BME280_Measure+0xa6>
 800194c:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <BME280_Measure+0x110>)
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001954:	e023      	b.n	800199e <BME280_Measure+0xee>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001956:	4b19      	ldr	r3, [pc, #100]	; (80019bc <BME280_Measure+0x10c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ff3c 	bl	80017d8 <bme280_compensate_H_int32>
 8001960:	4603      	mov	r3, r0
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fd7a 	bl	800045c <__aeabi_ui2d>
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <BME280_Measure+0x114>)
 800196e:	f7fe ff19 	bl	80007a4 <__aeabi_ddiv>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	f7fe fffb 	bl	8000974 <__aeabi_d2f>
 800197e:	4603      	mov	r3, r0
 8001980:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <BME280_Measure+0x110>)
 8001982:	6013      	str	r3, [r2, #0]
}
 8001984:	e00b      	b.n	800199e <BME280_Measure+0xee>
		Temperature = Pressure = Humidity = 0;
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <BME280_Measure+0x110>)
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <BME280_Measure+0x110>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a08      	ldr	r2, [pc, #32]	; (80019b4 <BME280_Measure+0x104>)
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <BME280_Measure+0x104>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a03      	ldr	r2, [pc, #12]	; (80019a8 <BME280_Measure+0xf8>)
 800199c:	6013      	str	r3, [r2, #0]
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200000b0 	.word	0x200000b0
 80019a8:	200001c8 	.word	0x200001c8
 80019ac:	40590000 	.word	0x40590000
 80019b0:	200000b4 	.word	0x200000b4
 80019b4:	200001cc 	.word	0x200001cc
 80019b8:	40700000 	.word	0x40700000
 80019bc:	200000b8 	.word	0x200000b8
 80019c0:	200001d0 	.word	0x200001d0
 80019c4:	40900000 	.word	0x40900000

080019c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08c      	sub	sp, #48	; 0x30
 80019cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
 80019dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	61bb      	str	r3, [r7, #24]
 80019e2:	4b61      	ldr	r3, [pc, #388]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a60      	ldr	r2, [pc, #384]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 80019e8:	f043 0310 	orr.w	r3, r3, #16
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b5e      	ldr	r3, [pc, #376]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0310 	and.w	r3, r3, #16
 80019f6:	61bb      	str	r3, [r7, #24]
 80019f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	4b5a      	ldr	r3, [pc, #360]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a59      	ldr	r2, [pc, #356]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b57      	ldr	r3, [pc, #348]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	4b53      	ldr	r3, [pc, #332]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a52      	ldr	r2, [pc, #328]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 8001a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b50      	ldr	r3, [pc, #320]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b4c      	ldr	r3, [pc, #304]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a4b      	ldr	r2, [pc, #300]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b49      	ldr	r3, [pc, #292]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	4b45      	ldr	r3, [pc, #276]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a44      	ldr	r2, [pc, #272]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b42      	ldr	r3, [pc, #264]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	4b3e      	ldr	r3, [pc, #248]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a3d      	ldr	r2, [pc, #244]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 8001a74:	f043 0308 	orr.w	r3, r3, #8
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b3b      	ldr	r3, [pc, #236]	; (8001b68 <MX_GPIO_Init+0x1a0>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2108      	movs	r1, #8
 8001a8a:	4838      	ldr	r0, [pc, #224]	; (8001b6c <MX_GPIO_Init+0x1a4>)
 8001a8c:	f000 ff5a 	bl	8002944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001a90:	2201      	movs	r2, #1
 8001a92:	2101      	movs	r1, #1
 8001a94:	4836      	ldr	r0, [pc, #216]	; (8001b70 <MX_GPIO_Init+0x1a8>)
 8001a96:	f000 ff55 	bl	8002944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001aa0:	4834      	ldr	r0, [pc, #208]	; (8001b74 <MX_GPIO_Init+0x1ac>)
 8001aa2:	f000 ff4f 	bl	8002944 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001aa6:	2304      	movs	r3, #4
 8001aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8001ab2:	f107 031c 	add.w	r3, r7, #28
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	482c      	ldr	r0, [pc, #176]	; (8001b6c <MX_GPIO_Init+0x1a4>)
 8001aba:	f000 fdbf 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001abe:	2308      	movs	r3, #8
 8001ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	2300      	movs	r3, #0
 8001acc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001ace:	f107 031c 	add.w	r3, r7, #28
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4825      	ldr	r0, [pc, #148]	; (8001b6c <MX_GPIO_Init+0x1a4>)
 8001ad6:	f000 fdb1 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8001ada:	2332      	movs	r3, #50	; 0x32
 8001adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ade:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ae8:	f107 031c 	add.w	r3, r7, #28
 8001aec:	4619      	mov	r1, r3
 8001aee:	481f      	ldr	r0, [pc, #124]	; (8001b6c <MX_GPIO_Init+0x1a4>)
 8001af0:	f000 fda4 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001af4:	2301      	movs	r3, #1
 8001af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af8:	2301      	movs	r3, #1
 8001afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b04:	f107 031c 	add.w	r3, r7, #28
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4819      	ldr	r0, [pc, #100]	; (8001b70 <MX_GPIO_Init+0x1a8>)
 8001b0c:	f000 fd96 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b10:	2301      	movs	r3, #1
 8001b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b14:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	f107 031c 	add.w	r3, r7, #28
 8001b22:	4619      	mov	r1, r3
 8001b24:	4814      	ldr	r0, [pc, #80]	; (8001b78 <MX_GPIO_Init+0x1b0>)
 8001b26:	f000 fd89 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001b2a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001b2e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b30:	2301      	movs	r3, #1
 8001b32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b3c:	f107 031c 	add.w	r3, r7, #28
 8001b40:	4619      	mov	r1, r3
 8001b42:	480c      	ldr	r0, [pc, #48]	; (8001b74 <MX_GPIO_Init+0x1ac>)
 8001b44:	f000 fd7a 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001b48:	2320      	movs	r3, #32
 8001b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b54:	f107 031c 	add.w	r3, r7, #28
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4806      	ldr	r0, [pc, #24]	; (8001b74 <MX_GPIO_Init+0x1ac>)
 8001b5c:	f000 fd6e 	bl	800263c <HAL_GPIO_Init>

}
 8001b60:	bf00      	nop
 8001b62:	3730      	adds	r7, #48	; 0x30
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40020800 	.word	0x40020800
 8001b74:	40020c00 	.word	0x40020c00
 8001b78:	40020000 	.word	0x40020000

08001b7c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <MX_I2C1_Init+0x50>)
 8001b82:	4a13      	ldr	r2, [pc, #76]	; (8001bd0 <MX_I2C1_Init+0x54>)
 8001b84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <MX_I2C1_Init+0x50>)
 8001b88:	4a12      	ldr	r2, [pc, #72]	; (8001bd4 <MX_I2C1_Init+0x58>)
 8001b8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <MX_I2C1_Init+0x50>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <MX_I2C1_Init+0x50>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <MX_I2C1_Init+0x50>)
 8001b9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ba0:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <MX_I2C1_Init+0x50>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <MX_I2C1_Init+0x50>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bac:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <MX_I2C1_Init+0x50>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <MX_I2C1_Init+0x50>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bb8:	4804      	ldr	r0, [pc, #16]	; (8001bcc <MX_I2C1_Init+0x50>)
 8001bba:	f002 fae7 	bl	800418c <HAL_I2C_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bc4:	f000 fa40 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	200000e4 	.word	0x200000e4
 8001bd0:	40005400 	.word	0x40005400
 8001bd4:	000186a0 	.word	0x000186a0

08001bd8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <HAL_I2C_MspInit+0x84>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d12c      	bne.n	8001c54 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <HAL_I2C_MspInit+0x88>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <HAL_I2C_MspInit+0x88>)
 8001c04:	f043 0302 	orr.w	r3, r3, #2
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <HAL_I2C_MspInit+0x88>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001c16:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c1c:	2312      	movs	r3, #18
 8001c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c20:	2301      	movs	r3, #1
 8001c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c28:	2304      	movs	r3, #4
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4619      	mov	r1, r3
 8001c32:	480c      	ldr	r0, [pc, #48]	; (8001c64 <HAL_I2C_MspInit+0x8c>)
 8001c34:	f000 fd02 	bl	800263c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <HAL_I2C_MspInit+0x88>)
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	4a07      	ldr	r2, [pc, #28]	; (8001c60 <HAL_I2C_MspInit+0x88>)
 8001c42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c46:	6413      	str	r3, [r2, #64]	; 0x40
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <HAL_I2C_MspInit+0x88>)
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c54:	bf00      	nop
 8001c56:	3728      	adds	r7, #40	; 0x28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40005400 	.word	0x40005400
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40020400 	.word	0x40020400

08001c68 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <MX_I2S2_Init+0x50>)
 8001c6e:	4a13      	ldr	r2, [pc, #76]	; (8001cbc <MX_I2S2_Init+0x54>)
 8001c70:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <MX_I2S2_Init+0x50>)
 8001c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c78:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001c7a:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <MX_I2S2_Init+0x50>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001c80:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <MX_I2S2_Init+0x50>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001c86:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <MX_I2S2_Init+0x50>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001c8c:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <MX_I2S2_Init+0x50>)
 8001c8e:	4a0c      	ldr	r2, [pc, #48]	; (8001cc0 <MX_I2S2_Init+0x58>)
 8001c90:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <MX_I2S2_Init+0x50>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001c98:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <MX_I2S2_Init+0x50>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <MX_I2S2_Init+0x50>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001ca4:	4804      	ldr	r0, [pc, #16]	; (8001cb8 <MX_I2S2_Init+0x50>)
 8001ca6:	f003 fb5f 	bl	8005368 <HAL_I2S_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8001cb0:	f000 f9ca 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000138 	.word	0x20000138
 8001cbc:	40003800 	.word	0x40003800
 8001cc0:	00017700 	.word	0x00017700

08001cc4 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001cc8:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <MX_I2S3_Init+0x54>)
 8001cca:	4a14      	ldr	r2, [pc, #80]	; (8001d1c <MX_I2S3_Init+0x58>)
 8001ccc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001cce:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <MX_I2S3_Init+0x54>)
 8001cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <MX_I2S3_Init+0x54>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <MX_I2S3_Init+0x54>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <MX_I2S3_Init+0x54>)
 8001ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ce8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <MX_I2S3_Init+0x54>)
 8001cec:	4a0c      	ldr	r2, [pc, #48]	; (8001d20 <MX_I2S3_Init+0x5c>)
 8001cee:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <MX_I2S3_Init+0x54>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <MX_I2S3_Init+0x54>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <MX_I2S3_Init+0x54>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001d02:	4805      	ldr	r0, [pc, #20]	; (8001d18 <MX_I2S3_Init+0x54>)
 8001d04:	f003 fb30 	bl	8005368 <HAL_I2S_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001d0e:	f000 f99b 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000180 	.word	0x20000180
 8001d1c:	40003c00 	.word	0x40003c00
 8001d20:	00017700 	.word	0x00017700

08001d24 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08e      	sub	sp, #56	; 0x38
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a59      	ldr	r2, [pc, #356]	; (8001ea8 <HAL_I2S_MspInit+0x184>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d15b      	bne.n	8001dfe <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	623b      	str	r3, [r7, #32]
 8001d4a:	4b58      	ldr	r3, [pc, #352]	; (8001eac <HAL_I2S_MspInit+0x188>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	4a57      	ldr	r2, [pc, #348]	; (8001eac <HAL_I2S_MspInit+0x188>)
 8001d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d54:	6413      	str	r3, [r2, #64]	; 0x40
 8001d56:	4b55      	ldr	r3, [pc, #340]	; (8001eac <HAL_I2S_MspInit+0x188>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d5e:	623b      	str	r3, [r7, #32]
 8001d60:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	4b51      	ldr	r3, [pc, #324]	; (8001eac <HAL_I2S_MspInit+0x188>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	4a50      	ldr	r2, [pc, #320]	; (8001eac <HAL_I2S_MspInit+0x188>)
 8001d6c:	f043 0304 	orr.w	r3, r3, #4
 8001d70:	6313      	str	r3, [r2, #48]	; 0x30
 8001d72:	4b4e      	ldr	r3, [pc, #312]	; (8001eac <HAL_I2S_MspInit+0x188>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	61fb      	str	r3, [r7, #28]
 8001d7c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61bb      	str	r3, [r7, #24]
 8001d82:	4b4a      	ldr	r3, [pc, #296]	; (8001eac <HAL_I2S_MspInit+0x188>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a49      	ldr	r2, [pc, #292]	; (8001eac <HAL_I2S_MspInit+0x188>)
 8001d88:	f043 0302 	orr.w	r3, r3, #2
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b47      	ldr	r3, [pc, #284]	; (8001eac <HAL_I2S_MspInit+0x188>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	61bb      	str	r3, [r7, #24]
 8001d98:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d9a:	2304      	movs	r3, #4
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	2300      	movs	r3, #0
 8001da8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001daa:	2306      	movs	r3, #6
 8001dac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db2:	4619      	mov	r1, r3
 8001db4:	483e      	ldr	r0, [pc, #248]	; (8001eb0 <HAL_I2S_MspInit+0x18c>)
 8001db6:	f000 fc41 	bl	800263c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001dba:	2308      	movs	r3, #8
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dca:	2305      	movs	r3, #5
 8001dcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4836      	ldr	r0, [pc, #216]	; (8001eb0 <HAL_I2S_MspInit+0x18c>)
 8001dd6:	f000 fc31 	bl	800263c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001dda:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	2302      	movs	r3, #2
 8001de2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de8:	2300      	movs	r3, #0
 8001dea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dec:	2305      	movs	r3, #5
 8001dee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df4:	4619      	mov	r1, r3
 8001df6:	482f      	ldr	r0, [pc, #188]	; (8001eb4 <HAL_I2S_MspInit+0x190>)
 8001df8:	f000 fc20 	bl	800263c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001dfc:	e04f      	b.n	8001e9e <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a2d      	ldr	r2, [pc, #180]	; (8001eb8 <HAL_I2S_MspInit+0x194>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d14a      	bne.n	8001e9e <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	4b27      	ldr	r3, [pc, #156]	; (8001eac <HAL_I2S_MspInit+0x188>)
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	4a26      	ldr	r2, [pc, #152]	; (8001eac <HAL_I2S_MspInit+0x188>)
 8001e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e16:	6413      	str	r3, [r2, #64]	; 0x40
 8001e18:	4b24      	ldr	r3, [pc, #144]	; (8001eac <HAL_I2S_MspInit+0x188>)
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	4b20      	ldr	r3, [pc, #128]	; (8001eac <HAL_I2S_MspInit+0x188>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	4a1f      	ldr	r2, [pc, #124]	; (8001eac <HAL_I2S_MspInit+0x188>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	6313      	str	r3, [r2, #48]	; 0x30
 8001e34:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <HAL_I2S_MspInit+0x188>)
 8001e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	4b19      	ldr	r3, [pc, #100]	; (8001eac <HAL_I2S_MspInit+0x188>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	4a18      	ldr	r2, [pc, #96]	; (8001eac <HAL_I2S_MspInit+0x188>)
 8001e4a:	f043 0304 	orr.w	r3, r3, #4
 8001e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e50:	4b16      	ldr	r3, [pc, #88]	; (8001eac <HAL_I2S_MspInit+0x188>)
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001e5c:	2310      	movs	r3, #16
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e6c:	2306      	movs	r3, #6
 8001e6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e74:	4619      	mov	r1, r3
 8001e76:	4811      	ldr	r0, [pc, #68]	; (8001ebc <HAL_I2S_MspInit+0x198>)
 8001e78:	f000 fbe0 	bl	800263c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001e7c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e8e:	2306      	movs	r3, #6
 8001e90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e96:	4619      	mov	r1, r3
 8001e98:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <HAL_I2S_MspInit+0x18c>)
 8001e9a:	f000 fbcf 	bl	800263c <HAL_GPIO_Init>
}
 8001e9e:	bf00      	nop
 8001ea0:	3738      	adds	r7, #56	; 0x38
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40003800 	.word	0x40003800
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40020800 	.word	0x40020800
 8001eb4:	40020400 	.word	0x40020400
 8001eb8:	40003c00 	.word	0x40003c00
 8001ebc:	40020000 	.word	0x40020000

08001ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ec6:	f000 fa11 	bl	80022ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eca:	f000 f835 	bl	8001f38 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001ece:	f000 f89b 	bl	8002008 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ed2:	f7ff fd79 	bl	80019c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001ed6:	f7ff fe51 	bl	8001b7c <MX_I2C1_Init>
  MX_I2S2_Init();
 8001eda:	f7ff fec5 	bl	8001c68 <MX_I2S2_Init>
  MX_I2S3_Init();
 8001ede:	f7ff fef1 	bl	8001cc4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001ee2:	f000 f8b7 	bl	8002054 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001ee6:	f007 fd0f 	bl	8009908 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001eea:	2304      	movs	r3, #4
 8001eec:	9301      	str	r3, [sp, #4]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	2105      	movs	r1, #5
 8001ef8:	2002      	movs	r0, #2
 8001efa:	f7ff f83f 	bl	8000f7c <BME280_Config>
  if(HAL_I2C_IsDeviceReady(&hi2c1, 0xEC, 2, 10)==HAL_OK){
 8001efe:	230a      	movs	r3, #10
 8001f00:	2202      	movs	r2, #2
 8001f02:	21ec      	movs	r1, #236	; 0xec
 8001f04:	480a      	ldr	r0, [pc, #40]	; (8001f30 <main+0x70>)
 8001f06:	f002 fda5 	bl	8004a54 <HAL_I2C_IsDeviceReady>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d105      	bne.n	8001f1c <main+0x5c>
 	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001f10:	2201      	movs	r2, #1
 8001f12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f16:	4807      	ldr	r0, [pc, #28]	; (8001f34 <main+0x74>)
 8001f18:	f000 fd14 	bl	8002944 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001f1c:	f007 fd1a 	bl	8009954 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    BME280_Measure();
 8001f20:	f7ff fcc6 	bl	80018b0 <BME280_Measure>
    HAL_Delay(500);
 8001f24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f28:	f000 fa52 	bl	80023d0 <HAL_Delay>
    MX_USB_HOST_Process();
 8001f2c:	e7f6      	b.n	8001f1c <main+0x5c>
 8001f2e:	bf00      	nop
 8001f30:	200000e4 	.word	0x200000e4
 8001f34:	40020c00 	.word	0x40020c00

08001f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b094      	sub	sp, #80	; 0x50
 8001f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f3e:	f107 0320 	add.w	r3, r7, #32
 8001f42:	2230      	movs	r2, #48	; 0x30
 8001f44:	2100      	movs	r1, #0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f008 f820 	bl	8009f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f4c:	f107 030c 	add.w	r3, r7, #12
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	4b27      	ldr	r3, [pc, #156]	; (8002000 <SystemClock_Config+0xc8>)
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	4a26      	ldr	r2, [pc, #152]	; (8002000 <SystemClock_Config+0xc8>)
 8001f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6c:	4b24      	ldr	r3, [pc, #144]	; (8002000 <SystemClock_Config+0xc8>)
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f78:	2300      	movs	r3, #0
 8001f7a:	607b      	str	r3, [r7, #4]
 8001f7c:	4b21      	ldr	r3, [pc, #132]	; (8002004 <SystemClock_Config+0xcc>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a20      	ldr	r2, [pc, #128]	; (8002004 <SystemClock_Config+0xcc>)
 8001f82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	4b1e      	ldr	r3, [pc, #120]	; (8002004 <SystemClock_Config+0xcc>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f94:	2301      	movs	r3, #1
 8001f96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fa2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001fa8:	2304      	movs	r3, #4
 8001faa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001fac:	2348      	movs	r3, #72	; 0x48
 8001fae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fb8:	f107 0320 	add.w	r3, r7, #32
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f003 fe73 	bl	8005ca8 <HAL_RCC_OscConfig>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001fc8:	f000 f83e 	bl	8002048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fcc:	230f      	movs	r3, #15
 8001fce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fdc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fe2:	f107 030c 	add.w	r3, r7, #12
 8001fe6:	2102      	movs	r1, #2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f004 f8d5 	bl	8006198 <HAL_RCC_ClockConfig>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ff4:	f000 f828 	bl	8002048 <Error_Handler>
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	3750      	adds	r7, #80	; 0x50
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40023800 	.word	0x40023800
 8002004:	40007000 	.word	0x40007000

08002008 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800200e:	463b      	mov	r3, r7
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
 800201c:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800201e:	2301      	movs	r3, #1
 8002020:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8002022:	23c8      	movs	r3, #200	; 0xc8
 8002024:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8002026:	2305      	movs	r3, #5
 8002028:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800202a:	2302      	movs	r3, #2
 800202c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800202e:	463b      	mov	r3, r7
 8002030:	4618      	mov	r0, r3
 8002032:	f004 fabd 	bl	80065b0 <HAL_RCCEx_PeriphCLKConfig>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800203c:	f000 f804 	bl	8002048 <Error_Handler>
  }
}
 8002040:	bf00      	nop
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800204c:	b672      	cpsid	i
}
 800204e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002050:	e7fe      	b.n	8002050 <Error_Handler+0x8>
	...

08002054 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002058:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <MX_SPI1_Init+0x64>)
 800205a:	4a18      	ldr	r2, [pc, #96]	; (80020bc <MX_SPI1_Init+0x68>)
 800205c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <MX_SPI1_Init+0x64>)
 8002060:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002064:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002066:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <MX_SPI1_Init+0x64>)
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800206c:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <MX_SPI1_Init+0x64>)
 800206e:	2200      	movs	r2, #0
 8002070:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002072:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <MX_SPI1_Init+0x64>)
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002078:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <MX_SPI1_Init+0x64>)
 800207a:	2200      	movs	r2, #0
 800207c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800207e:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <MX_SPI1_Init+0x64>)
 8002080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002084:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002086:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <MX_SPI1_Init+0x64>)
 8002088:	2200      	movs	r2, #0
 800208a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800208c:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <MX_SPI1_Init+0x64>)
 800208e:	2200      	movs	r2, #0
 8002090:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002092:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <MX_SPI1_Init+0x64>)
 8002094:	2200      	movs	r2, #0
 8002096:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002098:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <MX_SPI1_Init+0x64>)
 800209a:	2200      	movs	r2, #0
 800209c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <MX_SPI1_Init+0x64>)
 80020a0:	220a      	movs	r2, #10
 80020a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020a4:	4804      	ldr	r0, [pc, #16]	; (80020b8 <MX_SPI1_Init+0x64>)
 80020a6:	f004 fbd3 	bl	8006850 <HAL_SPI_Init>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80020b0:	f7ff ffca 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	200001d4 	.word	0x200001d4
 80020bc:	40013000 	.word	0x40013000

080020c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	; 0x28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a19      	ldr	r2, [pc, #100]	; (8002144 <HAL_SPI_MspInit+0x84>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d12b      	bne.n	800213a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	4b18      	ldr	r3, [pc, #96]	; (8002148 <HAL_SPI_MspInit+0x88>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	4a17      	ldr	r2, [pc, #92]	; (8002148 <HAL_SPI_MspInit+0x88>)
 80020ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020f0:	6453      	str	r3, [r2, #68]	; 0x44
 80020f2:	4b15      	ldr	r3, [pc, #84]	; (8002148 <HAL_SPI_MspInit+0x88>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	4b11      	ldr	r3, [pc, #68]	; (8002148 <HAL_SPI_MspInit+0x88>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a10      	ldr	r2, [pc, #64]	; (8002148 <HAL_SPI_MspInit+0x88>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <HAL_SPI_MspInit+0x88>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800211a:	23e0      	movs	r3, #224	; 0xe0
 800211c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	2302      	movs	r3, #2
 8002120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002126:	2303      	movs	r3, #3
 8002128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800212a:	2305      	movs	r3, #5
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212e:	f107 0314 	add.w	r3, r7, #20
 8002132:	4619      	mov	r1, r3
 8002134:	4805      	ldr	r0, [pc, #20]	; (800214c <HAL_SPI_MspInit+0x8c>)
 8002136:	f000 fa81 	bl	800263c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800213a:	bf00      	nop
 800213c:	3728      	adds	r7, #40	; 0x28
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40013000 	.word	0x40013000
 8002148:	40023800 	.word	0x40023800
 800214c:	40020000 	.word	0x40020000

08002150 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	4b10      	ldr	r3, [pc, #64]	; (800219c <HAL_MspInit+0x4c>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	4a0f      	ldr	r2, [pc, #60]	; (800219c <HAL_MspInit+0x4c>)
 8002160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002164:	6453      	str	r3, [r2, #68]	; 0x44
 8002166:	4b0d      	ldr	r3, [pc, #52]	; (800219c <HAL_MspInit+0x4c>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	603b      	str	r3, [r7, #0]
 8002176:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_MspInit+0x4c>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	4a08      	ldr	r2, [pc, #32]	; (800219c <HAL_MspInit+0x4c>)
 800217c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002180:	6413      	str	r3, [r2, #64]	; 0x40
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_MspInit+0x4c>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800218e:	2007      	movs	r0, #7
 8002190:	f000 fa12 	bl	80025b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40023800 	.word	0x40023800

080021a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021a4:	e7fe      	b.n	80021a4 <NMI_Handler+0x4>

080021a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021aa:	e7fe      	b.n	80021aa <HardFault_Handler+0x4>

080021ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021b0:	e7fe      	b.n	80021b0 <MemManage_Handler+0x4>

080021b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021b6:	e7fe      	b.n	80021b6 <BusFault_Handler+0x4>

080021b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021bc:	e7fe      	b.n	80021bc <UsageFault_Handler+0x4>

080021be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ec:	f000 f8d0 	bl	8002390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80021f8:	4802      	ldr	r0, [pc, #8]	; (8002204 <OTG_FS_IRQHandler+0x10>)
 80021fa:	f000 fe27 	bl	8002e4c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000610 	.word	0x20000610

08002208 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002210:	4a14      	ldr	r2, [pc, #80]	; (8002264 <_sbrk+0x5c>)
 8002212:	4b15      	ldr	r3, [pc, #84]	; (8002268 <_sbrk+0x60>)
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800221c:	4b13      	ldr	r3, [pc, #76]	; (800226c <_sbrk+0x64>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d102      	bne.n	800222a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002224:	4b11      	ldr	r3, [pc, #68]	; (800226c <_sbrk+0x64>)
 8002226:	4a12      	ldr	r2, [pc, #72]	; (8002270 <_sbrk+0x68>)
 8002228:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800222a:	4b10      	ldr	r3, [pc, #64]	; (800226c <_sbrk+0x64>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	429a      	cmp	r2, r3
 8002236:	d207      	bcs.n	8002248 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002238:	f007 fe6e 	bl	8009f18 <__errno>
 800223c:	4603      	mov	r3, r0
 800223e:	220c      	movs	r2, #12
 8002240:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002246:	e009      	b.n	800225c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002248:	4b08      	ldr	r3, [pc, #32]	; (800226c <_sbrk+0x64>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <_sbrk+0x64>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	4a05      	ldr	r2, [pc, #20]	; (800226c <_sbrk+0x64>)
 8002258:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800225a:	68fb      	ldr	r3, [r7, #12]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20020000 	.word	0x20020000
 8002268:	00000400 	.word	0x00000400
 800226c:	2000022c 	.word	0x2000022c
 8002270:	20000928 	.word	0x20000928

08002274 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <SystemInit+0x20>)
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227e:	4a05      	ldr	r2, [pc, #20]	; (8002294 <SystemInit+0x20>)
 8002280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002298:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800229c:	480d      	ldr	r0, [pc, #52]	; (80022d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800229e:	490e      	ldr	r1, [pc, #56]	; (80022d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022a0:	4a0e      	ldr	r2, [pc, #56]	; (80022dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a4:	e002      	b.n	80022ac <LoopCopyDataInit>

080022a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022aa:	3304      	adds	r3, #4

080022ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b0:	d3f9      	bcc.n	80022a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022b2:	4a0b      	ldr	r2, [pc, #44]	; (80022e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022b4:	4c0b      	ldr	r4, [pc, #44]	; (80022e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b8:	e001      	b.n	80022be <LoopFillZerobss>

080022ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022bc:	3204      	adds	r2, #4

080022be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c0:	d3fb      	bcc.n	80022ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022c2:	f7ff ffd7 	bl	8002274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022c6:	f007 fe2d 	bl	8009f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ca:	f7ff fdf9 	bl	8001ec0 <main>
  bx  lr    
 80022ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80022dc:	0800a1dc 	.word	0x0800a1dc
  ldr r2, =_sbss
 80022e0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80022e4:	20000924 	.word	0x20000924

080022e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022e8:	e7fe      	b.n	80022e8 <ADC_IRQHandler>
	...

080022ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022f0:	4b0e      	ldr	r3, [pc, #56]	; (800232c <HAL_Init+0x40>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0d      	ldr	r2, [pc, #52]	; (800232c <HAL_Init+0x40>)
 80022f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <HAL_Init+0x40>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a0a      	ldr	r2, [pc, #40]	; (800232c <HAL_Init+0x40>)
 8002302:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002306:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002308:	4b08      	ldr	r3, [pc, #32]	; (800232c <HAL_Init+0x40>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a07      	ldr	r2, [pc, #28]	; (800232c <HAL_Init+0x40>)
 800230e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002312:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002314:	2003      	movs	r0, #3
 8002316:	f000 f94f 	bl	80025b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800231a:	2000      	movs	r0, #0
 800231c:	f000 f808 	bl	8002330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002320:	f7ff ff16 	bl	8002150 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023c00 	.word	0x40023c00

08002330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002338:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_InitTick+0x54>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b12      	ldr	r3, [pc, #72]	; (8002388 <HAL_InitTick+0x58>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	4619      	mov	r1, r3
 8002342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002346:	fbb3 f3f1 	udiv	r3, r3, r1
 800234a:	fbb2 f3f3 	udiv	r3, r2, r3
 800234e:	4618      	mov	r0, r3
 8002350:	f000 f967 	bl	8002622 <HAL_SYSTICK_Config>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e00e      	b.n	800237c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b0f      	cmp	r3, #15
 8002362:	d80a      	bhi.n	800237a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002364:	2200      	movs	r2, #0
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800236c:	f000 f92f 	bl	80025ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002370:	4a06      	ldr	r2, [pc, #24]	; (800238c <HAL_InitTick+0x5c>)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	e000      	b.n	800237c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
}
 800237c:	4618      	mov	r0, r3
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000000 	.word	0x20000000
 8002388:	20000008 	.word	0x20000008
 800238c:	20000004 	.word	0x20000004

08002390 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002394:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <HAL_IncTick+0x20>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	461a      	mov	r2, r3
 800239a:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <HAL_IncTick+0x24>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4413      	add	r3, r2
 80023a0:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <HAL_IncTick+0x24>)
 80023a2:	6013      	str	r3, [r2, #0]
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	20000008 	.word	0x20000008
 80023b4:	20000230 	.word	0x20000230

080023b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return uwTick;
 80023bc:	4b03      	ldr	r3, [pc, #12]	; (80023cc <HAL_GetTick+0x14>)
 80023be:	681b      	ldr	r3, [r3, #0]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	20000230 	.word	0x20000230

080023d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023d8:	f7ff ffee 	bl	80023b8 <HAL_GetTick>
 80023dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023e8:	d005      	beq.n	80023f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ea:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <HAL_Delay+0x44>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4413      	add	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023f6:	bf00      	nop
 80023f8:	f7ff ffde 	bl	80023b8 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	429a      	cmp	r2, r3
 8002406:	d8f7      	bhi.n	80023f8 <HAL_Delay+0x28>
  {
  }
}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000008 	.word	0x20000008

08002418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <__NVIC_SetPriorityGrouping+0x44>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002434:	4013      	ands	r3, r2
 8002436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002440:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800244a:	4a04      	ldr	r2, [pc, #16]	; (800245c <__NVIC_SetPriorityGrouping+0x44>)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	60d3      	str	r3, [r2, #12]
}
 8002450:	bf00      	nop
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002464:	4b04      	ldr	r3, [pc, #16]	; (8002478 <__NVIC_GetPriorityGrouping+0x18>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	0a1b      	lsrs	r3, r3, #8
 800246a:	f003 0307 	and.w	r3, r3, #7
}
 800246e:	4618      	mov	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248a:	2b00      	cmp	r3, #0
 800248c:	db0b      	blt.n	80024a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	f003 021f 	and.w	r2, r3, #31
 8002494:	4907      	ldr	r1, [pc, #28]	; (80024b4 <__NVIC_EnableIRQ+0x38>)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	2001      	movs	r0, #1
 800249e:	fa00 f202 	lsl.w	r2, r0, r2
 80024a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	e000e100 	.word	0xe000e100

080024b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	6039      	str	r1, [r7, #0]
 80024c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	db0a      	blt.n	80024e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	490c      	ldr	r1, [pc, #48]	; (8002504 <__NVIC_SetPriority+0x4c>)
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	0112      	lsls	r2, r2, #4
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	440b      	add	r3, r1
 80024dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e0:	e00a      	b.n	80024f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4908      	ldr	r1, [pc, #32]	; (8002508 <__NVIC_SetPriority+0x50>)
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	3b04      	subs	r3, #4
 80024f0:	0112      	lsls	r2, r2, #4
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	440b      	add	r3, r1
 80024f6:	761a      	strb	r2, [r3, #24]
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000e100 	.word	0xe000e100
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800250c:	b480      	push	{r7}
 800250e:	b089      	sub	sp, #36	; 0x24
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f1c3 0307 	rsb	r3, r3, #7
 8002526:	2b04      	cmp	r3, #4
 8002528:	bf28      	it	cs
 800252a:	2304      	movcs	r3, #4
 800252c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3304      	adds	r3, #4
 8002532:	2b06      	cmp	r3, #6
 8002534:	d902      	bls.n	800253c <NVIC_EncodePriority+0x30>
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3b03      	subs	r3, #3
 800253a:	e000      	b.n	800253e <NVIC_EncodePriority+0x32>
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002540:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43da      	mvns	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	401a      	ands	r2, r3
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002554:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	fa01 f303 	lsl.w	r3, r1, r3
 800255e:	43d9      	mvns	r1, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002564:	4313      	orrs	r3, r2
         );
}
 8002566:	4618      	mov	r0, r3
 8002568:	3724      	adds	r7, #36	; 0x24
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
	...

08002574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3b01      	subs	r3, #1
 8002580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002584:	d301      	bcc.n	800258a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002586:	2301      	movs	r3, #1
 8002588:	e00f      	b.n	80025aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800258a:	4a0a      	ldr	r2, [pc, #40]	; (80025b4 <SysTick_Config+0x40>)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3b01      	subs	r3, #1
 8002590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002592:	210f      	movs	r1, #15
 8002594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002598:	f7ff ff8e 	bl	80024b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <SysTick_Config+0x40>)
 800259e:	2200      	movs	r2, #0
 80025a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025a2:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <SysTick_Config+0x40>)
 80025a4:	2207      	movs	r2, #7
 80025a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	e000e010 	.word	0xe000e010

080025b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff ff29 	bl	8002418 <__NVIC_SetPriorityGrouping>
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b086      	sub	sp, #24
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	4603      	mov	r3, r0
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	607a      	str	r2, [r7, #4]
 80025da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025e0:	f7ff ff3e 	bl	8002460 <__NVIC_GetPriorityGrouping>
 80025e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	68b9      	ldr	r1, [r7, #8]
 80025ea:	6978      	ldr	r0, [r7, #20]
 80025ec:	f7ff ff8e 	bl	800250c <NVIC_EncodePriority>
 80025f0:	4602      	mov	r2, r0
 80025f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025f6:	4611      	mov	r1, r2
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff ff5d 	bl	80024b8 <__NVIC_SetPriority>
}
 80025fe:	bf00      	nop
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	4603      	mov	r3, r0
 800260e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff ff31 	bl	800247c <__NVIC_EnableIRQ>
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff ffa2 	bl	8002574 <SysTick_Config>
 8002630:	4603      	mov	r3, r0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800263c:	b480      	push	{r7}
 800263e:	b089      	sub	sp, #36	; 0x24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800264a:	2300      	movs	r3, #0
 800264c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
 8002656:	e159      	b.n	800290c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002658:	2201      	movs	r2, #1
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4013      	ands	r3, r2
 800266a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	429a      	cmp	r2, r3
 8002672:	f040 8148 	bne.w	8002906 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	2b01      	cmp	r3, #1
 8002680:	d005      	beq.n	800268e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800268a:	2b02      	cmp	r3, #2
 800268c:	d130      	bne.n	80026f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	2203      	movs	r2, #3
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4013      	ands	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026c4:	2201      	movs	r2, #1
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	091b      	lsrs	r3, r3, #4
 80026da:	f003 0201 	and.w	r2, r3, #1
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d017      	beq.n	800272c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	2203      	movs	r2, #3
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d123      	bne.n	8002780 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	08da      	lsrs	r2, r3, #3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3208      	adds	r2, #8
 8002740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002744:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	220f      	movs	r2, #15
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	08da      	lsrs	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3208      	adds	r2, #8
 800277a:	69b9      	ldr	r1, [r7, #24]
 800277c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	2203      	movs	r2, #3
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0203 	and.w	r2, r3, #3
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80a2 	beq.w	8002906 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	4b57      	ldr	r3, [pc, #348]	; (8002924 <HAL_GPIO_Init+0x2e8>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	4a56      	ldr	r2, [pc, #344]	; (8002924 <HAL_GPIO_Init+0x2e8>)
 80027cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027d0:	6453      	str	r3, [r2, #68]	; 0x44
 80027d2:	4b54      	ldr	r3, [pc, #336]	; (8002924 <HAL_GPIO_Init+0x2e8>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027de:	4a52      	ldr	r2, [pc, #328]	; (8002928 <HAL_GPIO_Init+0x2ec>)
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	089b      	lsrs	r3, r3, #2
 80027e4:	3302      	adds	r3, #2
 80027e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	220f      	movs	r2, #15
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a49      	ldr	r2, [pc, #292]	; (800292c <HAL_GPIO_Init+0x2f0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d019      	beq.n	800283e <HAL_GPIO_Init+0x202>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a48      	ldr	r2, [pc, #288]	; (8002930 <HAL_GPIO_Init+0x2f4>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d013      	beq.n	800283a <HAL_GPIO_Init+0x1fe>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a47      	ldr	r2, [pc, #284]	; (8002934 <HAL_GPIO_Init+0x2f8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d00d      	beq.n	8002836 <HAL_GPIO_Init+0x1fa>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a46      	ldr	r2, [pc, #280]	; (8002938 <HAL_GPIO_Init+0x2fc>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d007      	beq.n	8002832 <HAL_GPIO_Init+0x1f6>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a45      	ldr	r2, [pc, #276]	; (800293c <HAL_GPIO_Init+0x300>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d101      	bne.n	800282e <HAL_GPIO_Init+0x1f2>
 800282a:	2304      	movs	r3, #4
 800282c:	e008      	b.n	8002840 <HAL_GPIO_Init+0x204>
 800282e:	2307      	movs	r3, #7
 8002830:	e006      	b.n	8002840 <HAL_GPIO_Init+0x204>
 8002832:	2303      	movs	r3, #3
 8002834:	e004      	b.n	8002840 <HAL_GPIO_Init+0x204>
 8002836:	2302      	movs	r3, #2
 8002838:	e002      	b.n	8002840 <HAL_GPIO_Init+0x204>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <HAL_GPIO_Init+0x204>
 800283e:	2300      	movs	r3, #0
 8002840:	69fa      	ldr	r2, [r7, #28]
 8002842:	f002 0203 	and.w	r2, r2, #3
 8002846:	0092      	lsls	r2, r2, #2
 8002848:	4093      	lsls	r3, r2
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002850:	4935      	ldr	r1, [pc, #212]	; (8002928 <HAL_GPIO_Init+0x2ec>)
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	089b      	lsrs	r3, r3, #2
 8002856:	3302      	adds	r3, #2
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800285e:	4b38      	ldr	r3, [pc, #224]	; (8002940 <HAL_GPIO_Init+0x304>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002882:	4a2f      	ldr	r2, [pc, #188]	; (8002940 <HAL_GPIO_Init+0x304>)
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002888:	4b2d      	ldr	r3, [pc, #180]	; (8002940 <HAL_GPIO_Init+0x304>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028ac:	4a24      	ldr	r2, [pc, #144]	; (8002940 <HAL_GPIO_Init+0x304>)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028b2:	4b23      	ldr	r3, [pc, #140]	; (8002940 <HAL_GPIO_Init+0x304>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	43db      	mvns	r3, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4013      	ands	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028d6:	4a1a      	ldr	r2, [pc, #104]	; (8002940 <HAL_GPIO_Init+0x304>)
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028dc:	4b18      	ldr	r3, [pc, #96]	; (8002940 <HAL_GPIO_Init+0x304>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002900:	4a0f      	ldr	r2, [pc, #60]	; (8002940 <HAL_GPIO_Init+0x304>)
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3301      	adds	r3, #1
 800290a:	61fb      	str	r3, [r7, #28]
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	2b0f      	cmp	r3, #15
 8002910:	f67f aea2 	bls.w	8002658 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002914:	bf00      	nop
 8002916:	bf00      	nop
 8002918:	3724      	adds	r7, #36	; 0x24
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40023800 	.word	0x40023800
 8002928:	40013800 	.word	0x40013800
 800292c:	40020000 	.word	0x40020000
 8002930:	40020400 	.word	0x40020400
 8002934:	40020800 	.word	0x40020800
 8002938:	40020c00 	.word	0x40020c00
 800293c:	40021000 	.word	0x40021000
 8002940:	40013c00 	.word	0x40013c00

08002944 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	807b      	strh	r3, [r7, #2]
 8002950:	4613      	mov	r3, r2
 8002952:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002954:	787b      	ldrb	r3, [r7, #1]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800295a:	887a      	ldrh	r2, [r7, #2]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002960:	e003      	b.n	800296a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002962:	887b      	ldrh	r3, [r7, #2]
 8002964:	041a      	lsls	r2, r3, #16
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	619a      	str	r2, [r3, #24]
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002976:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002978:	b08f      	sub	sp, #60	; 0x3c
 800297a:	af0a      	add	r7, sp, #40	; 0x28
 800297c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e054      	b.n	8002a32 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f007 f80e 	bl	80099c4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2203      	movs	r2, #3
 80029ac:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d102      	bne.n	80029c2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f004 f83d 	bl	8006a46 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	603b      	str	r3, [r7, #0]
 80029d2:	687e      	ldr	r6, [r7, #4]
 80029d4:	466d      	mov	r5, sp
 80029d6:	f106 0410 	add.w	r4, r6, #16
 80029da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80029ea:	1d33      	adds	r3, r6, #4
 80029ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029ee:	6838      	ldr	r0, [r7, #0]
 80029f0:	f003 ffb7 	bl	8006962 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2101      	movs	r1, #1
 80029fa:	4618      	mov	r0, r3
 80029fc:	f004 f834 	bl	8006a68 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	603b      	str	r3, [r7, #0]
 8002a06:	687e      	ldr	r6, [r7, #4]
 8002a08:	466d      	mov	r5, sp
 8002a0a:	f106 0410 	add.w	r4, r6, #16
 8002a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a1e:	1d33      	adds	r3, r6, #4
 8002a20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a22:	6838      	ldr	r0, [r7, #0]
 8002a24:	f004 f9bc 	bl	8006da0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a3a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002a3a:	b590      	push	{r4, r7, lr}
 8002a3c:	b089      	sub	sp, #36	; 0x24
 8002a3e:	af04      	add	r7, sp, #16
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	4608      	mov	r0, r1
 8002a44:	4611      	mov	r1, r2
 8002a46:	461a      	mov	r2, r3
 8002a48:	4603      	mov	r3, r0
 8002a4a:	70fb      	strb	r3, [r7, #3]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	70bb      	strb	r3, [r7, #2]
 8002a50:	4613      	mov	r3, r2
 8002a52:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_HCD_HC_Init+0x28>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e076      	b.n	8002b50 <HAL_HCD_HC_Init+0x116>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002a6a:	78fb      	ldrb	r3, [r7, #3]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	212c      	movs	r1, #44	; 0x2c
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	333d      	adds	r3, #61	; 0x3d
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	212c      	movs	r1, #44	; 0x2c
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	4413      	add	r3, r2
 8002a88:	3338      	adds	r3, #56	; 0x38
 8002a8a:	787a      	ldrb	r2, [r7, #1]
 8002a8c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002a8e:	78fb      	ldrb	r3, [r7, #3]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	212c      	movs	r1, #44	; 0x2c
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	4413      	add	r3, r2
 8002a9a:	3340      	adds	r3, #64	; 0x40
 8002a9c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002a9e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	212c      	movs	r1, #44	; 0x2c
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	3339      	adds	r3, #57	; 0x39
 8002aae:	78fa      	ldrb	r2, [r7, #3]
 8002ab0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002ab2:	78fb      	ldrb	r3, [r7, #3]
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	212c      	movs	r1, #44	; 0x2c
 8002ab8:	fb01 f303 	mul.w	r3, r1, r3
 8002abc:	4413      	add	r3, r2
 8002abe:	333f      	adds	r3, #63	; 0x3f
 8002ac0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002ac4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002ac6:	78fb      	ldrb	r3, [r7, #3]
 8002ac8:	78ba      	ldrb	r2, [r7, #2]
 8002aca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ace:	b2d0      	uxtb	r0, r2
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	212c      	movs	r1, #44	; 0x2c
 8002ad4:	fb01 f303 	mul.w	r3, r1, r3
 8002ad8:	4413      	add	r3, r2
 8002ada:	333a      	adds	r3, #58	; 0x3a
 8002adc:	4602      	mov	r2, r0
 8002ade:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002ae0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	da09      	bge.n	8002afc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002ae8:	78fb      	ldrb	r3, [r7, #3]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	212c      	movs	r1, #44	; 0x2c
 8002aee:	fb01 f303 	mul.w	r3, r1, r3
 8002af2:	4413      	add	r3, r2
 8002af4:	333b      	adds	r3, #59	; 0x3b
 8002af6:	2201      	movs	r2, #1
 8002af8:	701a      	strb	r2, [r3, #0]
 8002afa:	e008      	b.n	8002b0e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	212c      	movs	r1, #44	; 0x2c
 8002b02:	fb01 f303 	mul.w	r3, r1, r3
 8002b06:	4413      	add	r3, r2
 8002b08:	333b      	adds	r3, #59	; 0x3b
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002b0e:	78fb      	ldrb	r3, [r7, #3]
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	212c      	movs	r1, #44	; 0x2c
 8002b14:	fb01 f303 	mul.w	r3, r1, r3
 8002b18:	4413      	add	r3, r2
 8002b1a:	333c      	adds	r3, #60	; 0x3c
 8002b1c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002b20:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	787c      	ldrb	r4, [r7, #1]
 8002b28:	78ba      	ldrb	r2, [r7, #2]
 8002b2a:	78f9      	ldrb	r1, [r7, #3]
 8002b2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002b2e:	9302      	str	r3, [sp, #8]
 8002b30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b34:	9301      	str	r3, [sp, #4]
 8002b36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	4623      	mov	r3, r4
 8002b3e:	f004 fab5 	bl	80070ac <USB_HC_Init>
 8002b42:	4603      	mov	r3, r0
 8002b44:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd90      	pop	{r4, r7, pc}

08002b58 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002b64:	2300      	movs	r3, #0
 8002b66:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_HCD_HC_Halt+0x1e>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e00f      	b.n	8002b96 <HAL_HCD_HC_Halt+0x3e>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	78fa      	ldrb	r2, [r7, #3]
 8002b84:	4611      	mov	r1, r2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f004 fd05 	bl	8007596 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	4608      	mov	r0, r1
 8002baa:	4611      	mov	r1, r2
 8002bac:	461a      	mov	r2, r3
 8002bae:	4603      	mov	r3, r0
 8002bb0:	70fb      	strb	r3, [r7, #3]
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	70bb      	strb	r3, [r7, #2]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002bba:	78fb      	ldrb	r3, [r7, #3]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	212c      	movs	r1, #44	; 0x2c
 8002bc0:	fb01 f303 	mul.w	r3, r1, r3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	333b      	adds	r3, #59	; 0x3b
 8002bc8:	78ba      	ldrb	r2, [r7, #2]
 8002bca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	212c      	movs	r1, #44	; 0x2c
 8002bd2:	fb01 f303 	mul.w	r3, r1, r3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	333f      	adds	r3, #63	; 0x3f
 8002bda:	787a      	ldrb	r2, [r7, #1]
 8002bdc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002bde:	7c3b      	ldrb	r3, [r7, #16]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d112      	bne.n	8002c0a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002be4:	78fb      	ldrb	r3, [r7, #3]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	212c      	movs	r1, #44	; 0x2c
 8002bea:	fb01 f303 	mul.w	r3, r1, r3
 8002bee:	4413      	add	r3, r2
 8002bf0:	3342      	adds	r3, #66	; 0x42
 8002bf2:	2203      	movs	r2, #3
 8002bf4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002bf6:	78fb      	ldrb	r3, [r7, #3]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	212c      	movs	r1, #44	; 0x2c
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	4413      	add	r3, r2
 8002c02:	333d      	adds	r3, #61	; 0x3d
 8002c04:	7f3a      	ldrb	r2, [r7, #28]
 8002c06:	701a      	strb	r2, [r3, #0]
 8002c08:	e008      	b.n	8002c1c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c0a:	78fb      	ldrb	r3, [r7, #3]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	212c      	movs	r1, #44	; 0x2c
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	3342      	adds	r3, #66	; 0x42
 8002c18:	2202      	movs	r2, #2
 8002c1a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002c1c:	787b      	ldrb	r3, [r7, #1]
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	f200 80c6 	bhi.w	8002db0 <HAL_HCD_HC_SubmitRequest+0x210>
 8002c24:	a201      	add	r2, pc, #4	; (adr r2, 8002c2c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2a:	bf00      	nop
 8002c2c:	08002c3d 	.word	0x08002c3d
 8002c30:	08002d9d 	.word	0x08002d9d
 8002c34:	08002ca1 	.word	0x08002ca1
 8002c38:	08002d1f 	.word	0x08002d1f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002c3c:	7c3b      	ldrb	r3, [r7, #16]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	f040 80b8 	bne.w	8002db4 <HAL_HCD_HC_SubmitRequest+0x214>
 8002c44:	78bb      	ldrb	r3, [r7, #2]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f040 80b4 	bne.w	8002db4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002c4c:	8b3b      	ldrh	r3, [r7, #24]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d108      	bne.n	8002c64 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	212c      	movs	r1, #44	; 0x2c
 8002c58:	fb01 f303 	mul.w	r3, r1, r3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3355      	adds	r3, #85	; 0x55
 8002c60:	2201      	movs	r2, #1
 8002c62:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	212c      	movs	r1, #44	; 0x2c
 8002c6a:	fb01 f303 	mul.w	r3, r1, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	3355      	adds	r3, #85	; 0x55
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d109      	bne.n	8002c8c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	212c      	movs	r1, #44	; 0x2c
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	3342      	adds	r3, #66	; 0x42
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002c8a:	e093      	b.n	8002db4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c8c:	78fb      	ldrb	r3, [r7, #3]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	212c      	movs	r1, #44	; 0x2c
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	3342      	adds	r3, #66	; 0x42
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	701a      	strb	r2, [r3, #0]
      break;
 8002c9e:	e089      	b.n	8002db4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002ca0:	78bb      	ldrb	r3, [r7, #2]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d11d      	bne.n	8002ce2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ca6:	78fb      	ldrb	r3, [r7, #3]
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	212c      	movs	r1, #44	; 0x2c
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3355      	adds	r3, #85	; 0x55
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d109      	bne.n	8002cce <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cba:	78fb      	ldrb	r3, [r7, #3]
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	212c      	movs	r1, #44	; 0x2c
 8002cc0:	fb01 f303 	mul.w	r3, r1, r3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3342      	adds	r3, #66	; 0x42
 8002cc8:	2200      	movs	r2, #0
 8002cca:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002ccc:	e073      	b.n	8002db6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cce:	78fb      	ldrb	r3, [r7, #3]
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	212c      	movs	r1, #44	; 0x2c
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	3342      	adds	r3, #66	; 0x42
 8002cdc:	2202      	movs	r2, #2
 8002cde:	701a      	strb	r2, [r3, #0]
      break;
 8002ce0:	e069      	b.n	8002db6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	212c      	movs	r1, #44	; 0x2c
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	3354      	adds	r3, #84	; 0x54
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d109      	bne.n	8002d0a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cf6:	78fb      	ldrb	r3, [r7, #3]
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	212c      	movs	r1, #44	; 0x2c
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	3342      	adds	r3, #66	; 0x42
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]
      break;
 8002d08:	e055      	b.n	8002db6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d0a:	78fb      	ldrb	r3, [r7, #3]
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	212c      	movs	r1, #44	; 0x2c
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	3342      	adds	r3, #66	; 0x42
 8002d18:	2202      	movs	r2, #2
 8002d1a:	701a      	strb	r2, [r3, #0]
      break;
 8002d1c:	e04b      	b.n	8002db6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002d1e:	78bb      	ldrb	r3, [r7, #2]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d11d      	bne.n	8002d60 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	212c      	movs	r1, #44	; 0x2c
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	3355      	adds	r3, #85	; 0x55
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d109      	bne.n	8002d4c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	212c      	movs	r1, #44	; 0x2c
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	3342      	adds	r3, #66	; 0x42
 8002d46:	2200      	movs	r2, #0
 8002d48:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002d4a:	e034      	b.n	8002db6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d4c:	78fb      	ldrb	r3, [r7, #3]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	212c      	movs	r1, #44	; 0x2c
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	3342      	adds	r3, #66	; 0x42
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	701a      	strb	r2, [r3, #0]
      break;
 8002d5e:	e02a      	b.n	8002db6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d60:	78fb      	ldrb	r3, [r7, #3]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	212c      	movs	r1, #44	; 0x2c
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3354      	adds	r3, #84	; 0x54
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d109      	bne.n	8002d88 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	3342      	adds	r3, #66	; 0x42
 8002d82:	2200      	movs	r2, #0
 8002d84:	701a      	strb	r2, [r3, #0]
      break;
 8002d86:	e016      	b.n	8002db6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	212c      	movs	r1, #44	; 0x2c
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	3342      	adds	r3, #66	; 0x42
 8002d96:	2202      	movs	r2, #2
 8002d98:	701a      	strb	r2, [r3, #0]
      break;
 8002d9a:	e00c      	b.n	8002db6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d9c:	78fb      	ldrb	r3, [r7, #3]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	212c      	movs	r1, #44	; 0x2c
 8002da2:	fb01 f303 	mul.w	r3, r1, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	3342      	adds	r3, #66	; 0x42
 8002daa:	2200      	movs	r2, #0
 8002dac:	701a      	strb	r2, [r3, #0]
      break;
 8002dae:	e002      	b.n	8002db6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002db0:	bf00      	nop
 8002db2:	e000      	b.n	8002db6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002db4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002db6:	78fb      	ldrb	r3, [r7, #3]
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	212c      	movs	r1, #44	; 0x2c
 8002dbc:	fb01 f303 	mul.w	r3, r1, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3344      	adds	r3, #68	; 0x44
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	8b3a      	ldrh	r2, [r7, #24]
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	202c      	movs	r0, #44	; 0x2c
 8002dd0:	fb00 f303 	mul.w	r3, r0, r3
 8002dd4:	440b      	add	r3, r1
 8002dd6:	334c      	adds	r3, #76	; 0x4c
 8002dd8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	212c      	movs	r1, #44	; 0x2c
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	4413      	add	r3, r2
 8002de6:	3360      	adds	r3, #96	; 0x60
 8002de8:	2200      	movs	r2, #0
 8002dea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	212c      	movs	r1, #44	; 0x2c
 8002df2:	fb01 f303 	mul.w	r3, r1, r3
 8002df6:	4413      	add	r3, r2
 8002df8:	3350      	adds	r3, #80	; 0x50
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002dfe:	78fb      	ldrb	r3, [r7, #3]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	212c      	movs	r1, #44	; 0x2c
 8002e04:	fb01 f303 	mul.w	r3, r1, r3
 8002e08:	4413      	add	r3, r2
 8002e0a:	3339      	adds	r3, #57	; 0x39
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	212c      	movs	r1, #44	; 0x2c
 8002e16:	fb01 f303 	mul.w	r3, r1, r3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3361      	adds	r3, #97	; 0x61
 8002e1e:	2200      	movs	r2, #0
 8002e20:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6818      	ldr	r0, [r3, #0]
 8002e26:	78fb      	ldrb	r3, [r7, #3]
 8002e28:	222c      	movs	r2, #44	; 0x2c
 8002e2a:	fb02 f303 	mul.w	r3, r2, r3
 8002e2e:	3338      	adds	r3, #56	; 0x38
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	18d1      	adds	r1, r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f004 fa58 	bl	80072f0 <USB_HC_StartXfer>
 8002e40:	4603      	mov	r3, r0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop

08002e4c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f003 ff59 	bl	8006d1a <USB_GetMode>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	f040 80f6 	bne.w	800305c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f003 ff3d 	bl	8006cf4 <USB_ReadInterrupts>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80ec 	beq.w	800305a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f003 ff34 	bl	8006cf4 <USB_ReadInterrupts>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e96:	d104      	bne.n	8002ea2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002ea0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f003 ff24 	bl	8006cf4 <USB_ReadInterrupts>
 8002eac:	4603      	mov	r3, r0
 8002eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eb6:	d104      	bne.n	8002ec2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ec0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f003 ff14 	bl	8006cf4 <USB_ReadInterrupts>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ed2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ed6:	d104      	bne.n	8002ee2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ee0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f003 ff04 	bl	8006cf4 <USB_ReadInterrupts>
 8002eec:	4603      	mov	r3, r0
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d103      	bne.n	8002efe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2202      	movs	r2, #2
 8002efc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f003 fef6 	bl	8006cf4 <USB_ReadInterrupts>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f12:	d11c      	bne.n	8002f4e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002f1c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10f      	bne.n	8002f4e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002f2e:	2110      	movs	r1, #16
 8002f30:	6938      	ldr	r0, [r7, #16]
 8002f32:	f003 fde5 	bl	8006b00 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002f36:	6938      	ldr	r0, [r7, #16]
 8002f38:	f003 fe16 	bl	8006b68 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2101      	movs	r1, #1
 8002f42:	4618      	mov	r0, r3
 8002f44:	f003 ffec 	bl	8006f20 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f006 fdb9 	bl	8009ac0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f003 fece 	bl	8006cf4 <USB_ReadInterrupts>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f62:	d102      	bne.n	8002f6a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f001 f89e 	bl	80040a6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f003 fec0 	bl	8006cf4 <USB_ReadInterrupts>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d106      	bne.n	8002f8c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f006 fd82 	bl	8009a88 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2208      	movs	r2, #8
 8002f8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f003 feaf 	bl	8006cf4 <USB_ReadInterrupts>
 8002f96:	4603      	mov	r3, r0
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	2b10      	cmp	r3, #16
 8002f9e:	d101      	bne.n	8002fa4 <HAL_HCD_IRQHandler+0x158>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <HAL_HCD_IRQHandler+0x15a>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d012      	beq.n	8002fd0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699a      	ldr	r2, [r3, #24]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0210 	bic.w	r2, r2, #16
 8002fb8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 ffa1 	bl	8003f02 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0210 	orr.w	r2, r2, #16
 8002fce:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f003 fe8d 	bl	8006cf4 <USB_ReadInterrupts>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fe4:	d13a      	bne.n	800305c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f004 fac2 	bl	8007574 <USB_HC_ReadInterrupt>
 8002ff0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	e025      	b.n	8003044 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	fa22 f303 	lsr.w	r3, r2, r3
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d018      	beq.n	800303e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4413      	add	r3, r2
 8003014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800301e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003022:	d106      	bne.n	8003032 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	b2db      	uxtb	r3, r3
 8003028:	4619      	mov	r1, r3
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f8ab 	bl	8003186 <HCD_HC_IN_IRQHandler>
 8003030:	e005      	b.n	800303e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	4619      	mov	r1, r3
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 fbf9 	bl	8003830 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	3301      	adds	r3, #1
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	429a      	cmp	r2, r3
 800304c:	d3d4      	bcc.n	8002ff8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003056:	615a      	str	r2, [r3, #20]
 8003058:	e000      	b.n	800305c <HAL_HCD_IRQHandler+0x210>
      return;
 800305a:	bf00      	nop
    }
  }
}
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_HCD_Start+0x16>
 8003074:	2302      	movs	r3, #2
 8003076:	e013      	b.n	80030a0 <HAL_HCD_Start+0x3e>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2101      	movs	r1, #1
 8003086:	4618      	mov	r0, r3
 8003088:	f003 ffae 	bl	8006fe8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f003 fcc7 	bl	8006a24 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_HCD_Stop+0x16>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e00d      	b.n	80030da <HAL_HCD_Stop+0x32>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f004 fb9c 	bl	8007808 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f003 ff50 	bl	8006f94 <USB_ResetPort>
 80030f4:	4603      	mov	r3, r0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
 8003106:	460b      	mov	r3, r1
 8003108:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	212c      	movs	r1, #44	; 0x2c
 8003110:	fb01 f303 	mul.w	r3, r1, r3
 8003114:	4413      	add	r3, r2
 8003116:	3360      	adds	r3, #96	; 0x60
 8003118:	781b      	ldrb	r3, [r3, #0]
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	460b      	mov	r3, r1
 8003130:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003132:	78fb      	ldrb	r3, [r7, #3]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	212c      	movs	r1, #44	; 0x2c
 8003138:	fb01 f303 	mul.w	r3, r1, r3
 800313c:	4413      	add	r3, r2
 800313e:	3350      	adds	r3, #80	; 0x50
 8003140:	681b      	ldr	r3, [r3, #0]
}
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f003 ff94 	bl	8007088 <USB_GetCurrentFrame>
 8003160:	4603      	mov	r3, r0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b082      	sub	sp, #8
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f003 ff6f 	bl	800705a <USB_GetHostSpeed>
 800317c:	4603      	mov	r3, r0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b086      	sub	sp, #24
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	460b      	mov	r3, r1
 8003190:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 0304 	and.w	r3, r3, #4
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d11a      	bne.n	80031ec <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	015a      	lsls	r2, r3, #5
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4413      	add	r3, r2
 80031be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c2:	461a      	mov	r2, r3
 80031c4:	2304      	movs	r3, #4
 80031c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	212c      	movs	r1, #44	; 0x2c
 80031ce:	fb01 f303 	mul.w	r3, r1, r3
 80031d2:	4413      	add	r3, r2
 80031d4:	3361      	adds	r3, #97	; 0x61
 80031d6:	2206      	movs	r2, #6
 80031d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	4611      	mov	r1, r2
 80031e4:	4618      	mov	r0, r3
 80031e6:	f004 f9d6 	bl	8007596 <USB_HC_Halt>
 80031ea:	e0af      	b.n	800334c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003202:	d11b      	bne.n	800323c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4413      	add	r3, r2
 800320c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003210:	461a      	mov	r2, r3
 8003212:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003216:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	212c      	movs	r1, #44	; 0x2c
 800321e:	fb01 f303 	mul.w	r3, r1, r3
 8003222:	4413      	add	r3, r2
 8003224:	3361      	adds	r3, #97	; 0x61
 8003226:	2207      	movs	r2, #7
 8003228:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	4611      	mov	r1, r2
 8003234:	4618      	mov	r0, r3
 8003236:	f004 f9ae 	bl	8007596 <USB_HC_Halt>
 800323a:	e087      	b.n	800334c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4413      	add	r3, r2
 8003244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b20      	cmp	r3, #32
 8003250:	d109      	bne.n	8003266 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4413      	add	r3, r2
 800325a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325e:	461a      	mov	r2, r3
 8003260:	2320      	movs	r3, #32
 8003262:	6093      	str	r3, [r2, #8]
 8003264:	e072      	b.n	800334c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4413      	add	r3, r2
 800326e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 0308 	and.w	r3, r3, #8
 8003278:	2b08      	cmp	r3, #8
 800327a:	d11a      	bne.n	80032b2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4413      	add	r3, r2
 8003284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003288:	461a      	mov	r2, r3
 800328a:	2308      	movs	r3, #8
 800328c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	212c      	movs	r1, #44	; 0x2c
 8003294:	fb01 f303 	mul.w	r3, r1, r3
 8003298:	4413      	add	r3, r2
 800329a:	3361      	adds	r3, #97	; 0x61
 800329c:	2205      	movs	r2, #5
 800329e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	4611      	mov	r1, r2
 80032aa:	4618      	mov	r0, r3
 80032ac:	f004 f973 	bl	8007596 <USB_HC_Halt>
 80032b0:	e04c      	b.n	800334c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c8:	d11b      	bne.n	8003302 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d6:	461a      	mov	r2, r3
 80032d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	212c      	movs	r1, #44	; 0x2c
 80032e4:	fb01 f303 	mul.w	r3, r1, r3
 80032e8:	4413      	add	r3, r2
 80032ea:	3361      	adds	r3, #97	; 0x61
 80032ec:	2208      	movs	r2, #8
 80032ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	4611      	mov	r1, r2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f004 f94b 	bl	8007596 <USB_HC_Halt>
 8003300:	e024      	b.n	800334c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4413      	add	r3, r2
 800330a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003314:	2b80      	cmp	r3, #128	; 0x80
 8003316:	d119      	bne.n	800334c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4413      	add	r3, r2
 8003320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003324:	461a      	mov	r2, r3
 8003326:	2380      	movs	r3, #128	; 0x80
 8003328:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	212c      	movs	r1, #44	; 0x2c
 8003330:	fb01 f303 	mul.w	r3, r1, r3
 8003334:	4413      	add	r3, r2
 8003336:	3361      	adds	r3, #97	; 0x61
 8003338:	2206      	movs	r2, #6
 800333a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	4611      	mov	r1, r2
 8003346:	4618      	mov	r0, r3
 8003348:	f004 f925 	bl	8007596 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4413      	add	r3, r2
 8003354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800335e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003362:	d112      	bne.n	800338a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	4611      	mov	r1, r2
 800336e:	4618      	mov	r0, r3
 8003370:	f004 f911 	bl	8007596 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4413      	add	r3, r2
 800337c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003380:	461a      	mov	r2, r3
 8003382:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003386:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003388:	e24e      	b.n	8003828 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4413      	add	r3, r2
 8003392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b01      	cmp	r3, #1
 800339e:	f040 80df 	bne.w	8003560 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d019      	beq.n	80033de <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	212c      	movs	r1, #44	; 0x2c
 80033b0:	fb01 f303 	mul.w	r3, r1, r3
 80033b4:	4413      	add	r3, r2
 80033b6:	3348      	adds	r3, #72	; 0x48
 80033b8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	0159      	lsls	r1, r3, #5
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	440b      	add	r3, r1
 80033c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80033cc:	1ad2      	subs	r2, r2, r3
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	202c      	movs	r0, #44	; 0x2c
 80033d4:	fb00 f303 	mul.w	r3, r0, r3
 80033d8:	440b      	add	r3, r1
 80033da:	3350      	adds	r3, #80	; 0x50
 80033dc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	212c      	movs	r1, #44	; 0x2c
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	4413      	add	r3, r2
 80033ea:	3361      	adds	r3, #97	; 0x61
 80033ec:	2201      	movs	r2, #1
 80033ee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	212c      	movs	r1, #44	; 0x2c
 80033f6:	fb01 f303 	mul.w	r3, r1, r3
 80033fa:	4413      	add	r3, r2
 80033fc:	335c      	adds	r3, #92	; 0x5c
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4413      	add	r3, r2
 800340a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340e:	461a      	mov	r2, r3
 8003410:	2301      	movs	r3, #1
 8003412:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	212c      	movs	r1, #44	; 0x2c
 800341a:	fb01 f303 	mul.w	r3, r1, r3
 800341e:	4413      	add	r3, r2
 8003420:	333f      	adds	r3, #63	; 0x3f
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d009      	beq.n	800343c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	212c      	movs	r1, #44	; 0x2c
 800342e:	fb01 f303 	mul.w	r3, r1, r3
 8003432:	4413      	add	r3, r2
 8003434:	333f      	adds	r3, #63	; 0x3f
 8003436:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003438:	2b02      	cmp	r3, #2
 800343a:	d111      	bne.n	8003460 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	4611      	mov	r1, r2
 8003446:	4618      	mov	r0, r3
 8003448:	f004 f8a5 	bl	8007596 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	015a      	lsls	r2, r3, #5
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4413      	add	r3, r2
 8003454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003458:	461a      	mov	r2, r3
 800345a:	2310      	movs	r3, #16
 800345c:	6093      	str	r3, [r2, #8]
 800345e:	e03a      	b.n	80034d6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	212c      	movs	r1, #44	; 0x2c
 8003466:	fb01 f303 	mul.w	r3, r1, r3
 800346a:	4413      	add	r3, r2
 800346c:	333f      	adds	r3, #63	; 0x3f
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b03      	cmp	r3, #3
 8003472:	d009      	beq.n	8003488 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	212c      	movs	r1, #44	; 0x2c
 800347a:	fb01 f303 	mul.w	r3, r1, r3
 800347e:	4413      	add	r3, r2
 8003480:	333f      	adds	r3, #63	; 0x3f
 8003482:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003484:	2b01      	cmp	r3, #1
 8003486:	d126      	bne.n	80034d6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	4413      	add	r3, r2
 8003490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	0151      	lsls	r1, r2, #5
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	440a      	add	r2, r1
 800349e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034a6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	212c      	movs	r1, #44	; 0x2c
 80034ae:	fb01 f303 	mul.w	r3, r1, r3
 80034b2:	4413      	add	r3, r2
 80034b4:	3360      	adds	r3, #96	; 0x60
 80034b6:	2201      	movs	r2, #1
 80034b8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	b2d9      	uxtb	r1, r3
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	202c      	movs	r0, #44	; 0x2c
 80034c4:	fb00 f303 	mul.w	r3, r0, r3
 80034c8:	4413      	add	r3, r2
 80034ca:	3360      	adds	r3, #96	; 0x60
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f006 fb03 	bl	8009adc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d12b      	bne.n	8003536 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	212c      	movs	r1, #44	; 0x2c
 80034e4:	fb01 f303 	mul.w	r3, r1, r3
 80034e8:	4413      	add	r3, r2
 80034ea:	3348      	adds	r3, #72	; 0x48
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	202c      	movs	r0, #44	; 0x2c
 80034f4:	fb00 f202 	mul.w	r2, r0, r2
 80034f8:	440a      	add	r2, r1
 80034fa:	3240      	adds	r2, #64	; 0x40
 80034fc:	8812      	ldrh	r2, [r2, #0]
 80034fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 818e 	beq.w	8003828 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	212c      	movs	r1, #44	; 0x2c
 8003512:	fb01 f303 	mul.w	r3, r1, r3
 8003516:	4413      	add	r3, r2
 8003518:	3354      	adds	r3, #84	; 0x54
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	f083 0301 	eor.w	r3, r3, #1
 8003520:	b2d8      	uxtb	r0, r3
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	212c      	movs	r1, #44	; 0x2c
 8003528:	fb01 f303 	mul.w	r3, r1, r3
 800352c:	4413      	add	r3, r2
 800352e:	3354      	adds	r3, #84	; 0x54
 8003530:	4602      	mov	r2, r0
 8003532:	701a      	strb	r2, [r3, #0]
}
 8003534:	e178      	b.n	8003828 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	212c      	movs	r1, #44	; 0x2c
 800353c:	fb01 f303 	mul.w	r3, r1, r3
 8003540:	4413      	add	r3, r2
 8003542:	3354      	adds	r3, #84	; 0x54
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	f083 0301 	eor.w	r3, r3, #1
 800354a:	b2d8      	uxtb	r0, r3
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	212c      	movs	r1, #44	; 0x2c
 8003552:	fb01 f303 	mul.w	r3, r1, r3
 8003556:	4413      	add	r3, r2
 8003558:	3354      	adds	r3, #84	; 0x54
 800355a:	4602      	mov	r2, r0
 800355c:	701a      	strb	r2, [r3, #0]
}
 800355e:	e163      	b.n	8003828 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4413      	add	r3, r2
 8003568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b02      	cmp	r3, #2
 8003574:	f040 80f6 	bne.w	8003764 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	212c      	movs	r1, #44	; 0x2c
 800357e:	fb01 f303 	mul.w	r3, r1, r3
 8003582:	4413      	add	r3, r2
 8003584:	3361      	adds	r3, #97	; 0x61
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d109      	bne.n	80035a0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	212c      	movs	r1, #44	; 0x2c
 8003592:	fb01 f303 	mul.w	r3, r1, r3
 8003596:	4413      	add	r3, r2
 8003598:	3360      	adds	r3, #96	; 0x60
 800359a:	2201      	movs	r2, #1
 800359c:	701a      	strb	r2, [r3, #0]
 800359e:	e0c9      	b.n	8003734 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	212c      	movs	r1, #44	; 0x2c
 80035a6:	fb01 f303 	mul.w	r3, r1, r3
 80035aa:	4413      	add	r3, r2
 80035ac:	3361      	adds	r3, #97	; 0x61
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b05      	cmp	r3, #5
 80035b2:	d109      	bne.n	80035c8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	212c      	movs	r1, #44	; 0x2c
 80035ba:	fb01 f303 	mul.w	r3, r1, r3
 80035be:	4413      	add	r3, r2
 80035c0:	3360      	adds	r3, #96	; 0x60
 80035c2:	2205      	movs	r2, #5
 80035c4:	701a      	strb	r2, [r3, #0]
 80035c6:	e0b5      	b.n	8003734 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	212c      	movs	r1, #44	; 0x2c
 80035ce:	fb01 f303 	mul.w	r3, r1, r3
 80035d2:	4413      	add	r3, r2
 80035d4:	3361      	adds	r3, #97	; 0x61
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b06      	cmp	r3, #6
 80035da:	d009      	beq.n	80035f0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	212c      	movs	r1, #44	; 0x2c
 80035e2:	fb01 f303 	mul.w	r3, r1, r3
 80035e6:	4413      	add	r3, r2
 80035e8:	3361      	adds	r3, #97	; 0x61
 80035ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d150      	bne.n	8003692 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	212c      	movs	r1, #44	; 0x2c
 80035f6:	fb01 f303 	mul.w	r3, r1, r3
 80035fa:	4413      	add	r3, r2
 80035fc:	335c      	adds	r3, #92	; 0x5c
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	202c      	movs	r0, #44	; 0x2c
 8003608:	fb00 f303 	mul.w	r3, r0, r3
 800360c:	440b      	add	r3, r1
 800360e:	335c      	adds	r3, #92	; 0x5c
 8003610:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	212c      	movs	r1, #44	; 0x2c
 8003618:	fb01 f303 	mul.w	r3, r1, r3
 800361c:	4413      	add	r3, r2
 800361e:	335c      	adds	r3, #92	; 0x5c
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d912      	bls.n	800364c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	212c      	movs	r1, #44	; 0x2c
 800362c:	fb01 f303 	mul.w	r3, r1, r3
 8003630:	4413      	add	r3, r2
 8003632:	335c      	adds	r3, #92	; 0x5c
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	212c      	movs	r1, #44	; 0x2c
 800363e:	fb01 f303 	mul.w	r3, r1, r3
 8003642:	4413      	add	r3, r2
 8003644:	3360      	adds	r3, #96	; 0x60
 8003646:	2204      	movs	r2, #4
 8003648:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800364a:	e073      	b.n	8003734 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	212c      	movs	r1, #44	; 0x2c
 8003652:	fb01 f303 	mul.w	r3, r1, r3
 8003656:	4413      	add	r3, r2
 8003658:	3360      	adds	r3, #96	; 0x60
 800365a:	2202      	movs	r2, #2
 800365c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	015a      	lsls	r2, r3, #5
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4413      	add	r3, r2
 8003666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003674:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800367c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	4413      	add	r3, r2
 8003686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800368a:	461a      	mov	r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003690:	e050      	b.n	8003734 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	212c      	movs	r1, #44	; 0x2c
 8003698:	fb01 f303 	mul.w	r3, r1, r3
 800369c:	4413      	add	r3, r2
 800369e:	3361      	adds	r3, #97	; 0x61
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d122      	bne.n	80036ec <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	212c      	movs	r1, #44	; 0x2c
 80036ac:	fb01 f303 	mul.w	r3, r1, r3
 80036b0:	4413      	add	r3, r2
 80036b2:	3360      	adds	r3, #96	; 0x60
 80036b4:	2202      	movs	r2, #2
 80036b6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036ce:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036d6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e4:	461a      	mov	r2, r3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	e023      	b.n	8003734 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	212c      	movs	r1, #44	; 0x2c
 80036f2:	fb01 f303 	mul.w	r3, r1, r3
 80036f6:	4413      	add	r3, r2
 80036f8:	3361      	adds	r3, #97	; 0x61
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b07      	cmp	r3, #7
 80036fe:	d119      	bne.n	8003734 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	212c      	movs	r1, #44	; 0x2c
 8003706:	fb01 f303 	mul.w	r3, r1, r3
 800370a:	4413      	add	r3, r2
 800370c:	335c      	adds	r3, #92	; 0x5c
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	202c      	movs	r0, #44	; 0x2c
 8003718:	fb00 f303 	mul.w	r3, r0, r3
 800371c:	440b      	add	r3, r1
 800371e:	335c      	adds	r3, #92	; 0x5c
 8003720:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	212c      	movs	r1, #44	; 0x2c
 8003728:	fb01 f303 	mul.w	r3, r1, r3
 800372c:	4413      	add	r3, r2
 800372e:	3360      	adds	r3, #96	; 0x60
 8003730:	2204      	movs	r2, #4
 8003732:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	4413      	add	r3, r2
 800373c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003740:	461a      	mov	r2, r3
 8003742:	2302      	movs	r3, #2
 8003744:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	b2d9      	uxtb	r1, r3
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	202c      	movs	r0, #44	; 0x2c
 8003750:	fb00 f303 	mul.w	r3, r0, r3
 8003754:	4413      	add	r3, r2
 8003756:	3360      	adds	r3, #96	; 0x60
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	461a      	mov	r2, r3
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f006 f9bd 	bl	8009adc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003762:	e061      	b.n	8003828 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	4413      	add	r3, r2
 800376c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 0310 	and.w	r3, r3, #16
 8003776:	2b10      	cmp	r3, #16
 8003778:	d156      	bne.n	8003828 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	212c      	movs	r1, #44	; 0x2c
 8003780:	fb01 f303 	mul.w	r3, r1, r3
 8003784:	4413      	add	r3, r2
 8003786:	333f      	adds	r3, #63	; 0x3f
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b03      	cmp	r3, #3
 800378c:	d111      	bne.n	80037b2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	212c      	movs	r1, #44	; 0x2c
 8003794:	fb01 f303 	mul.w	r3, r1, r3
 8003798:	4413      	add	r3, r2
 800379a:	335c      	adds	r3, #92	; 0x5c
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	4611      	mov	r1, r2
 80037aa:	4618      	mov	r0, r3
 80037ac:	f003 fef3 	bl	8007596 <USB_HC_Halt>
 80037b0:	e031      	b.n	8003816 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	212c      	movs	r1, #44	; 0x2c
 80037b8:	fb01 f303 	mul.w	r3, r1, r3
 80037bc:	4413      	add	r3, r2
 80037be:	333f      	adds	r3, #63	; 0x3f
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d009      	beq.n	80037da <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	212c      	movs	r1, #44	; 0x2c
 80037cc:	fb01 f303 	mul.w	r3, r1, r3
 80037d0:	4413      	add	r3, r2
 80037d2:	333f      	adds	r3, #63	; 0x3f
 80037d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d11d      	bne.n	8003816 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	212c      	movs	r1, #44	; 0x2c
 80037e0:	fb01 f303 	mul.w	r3, r1, r3
 80037e4:	4413      	add	r3, r2
 80037e6:	335c      	adds	r3, #92	; 0x5c
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d110      	bne.n	8003816 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	212c      	movs	r1, #44	; 0x2c
 80037fa:	fb01 f303 	mul.w	r3, r1, r3
 80037fe:	4413      	add	r3, r2
 8003800:	3361      	adds	r3, #97	; 0x61
 8003802:	2203      	movs	r2, #3
 8003804:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	4611      	mov	r1, r2
 8003810:	4618      	mov	r0, r3
 8003812:	f003 fec0 	bl	8007596 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4413      	add	r3, r2
 800381e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003822:	461a      	mov	r2, r3
 8003824:	2310      	movs	r3, #16
 8003826:	6093      	str	r3, [r2, #8]
}
 8003828:	bf00      	nop
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003846:	78fb      	ldrb	r3, [r7, #3]
 8003848:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	4413      	add	r3, r2
 8003852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b04      	cmp	r3, #4
 800385e:	d11a      	bne.n	8003896 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	015a      	lsls	r2, r3, #5
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	4413      	add	r3, r2
 8003868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800386c:	461a      	mov	r2, r3
 800386e:	2304      	movs	r3, #4
 8003870:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	212c      	movs	r1, #44	; 0x2c
 8003878:	fb01 f303 	mul.w	r3, r1, r3
 800387c:	4413      	add	r3, r2
 800387e:	3361      	adds	r3, #97	; 0x61
 8003880:	2206      	movs	r2, #6
 8003882:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	4611      	mov	r1, r2
 800388e:	4618      	mov	r0, r3
 8003890:	f003 fe81 	bl	8007596 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003894:	e331      	b.n	8003efa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	015a      	lsls	r2, r3, #5
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	4413      	add	r3, r2
 800389e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 0320 	and.w	r3, r3, #32
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d12e      	bne.n	800390a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b8:	461a      	mov	r2, r3
 80038ba:	2320      	movs	r3, #32
 80038bc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	212c      	movs	r1, #44	; 0x2c
 80038c4:	fb01 f303 	mul.w	r3, r1, r3
 80038c8:	4413      	add	r3, r2
 80038ca:	333d      	adds	r3, #61	; 0x3d
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	f040 8313 	bne.w	8003efa <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	212c      	movs	r1, #44	; 0x2c
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	4413      	add	r3, r2
 80038e0:	333d      	adds	r3, #61	; 0x3d
 80038e2:	2200      	movs	r2, #0
 80038e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	212c      	movs	r1, #44	; 0x2c
 80038ec:	fb01 f303 	mul.w	r3, r1, r3
 80038f0:	4413      	add	r3, r2
 80038f2:	3360      	adds	r3, #96	; 0x60
 80038f4:	2202      	movs	r2, #2
 80038f6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	4611      	mov	r1, r2
 8003902:	4618      	mov	r0, r3
 8003904:	f003 fe47 	bl	8007596 <USB_HC_Halt>
}
 8003908:	e2f7      	b.n	8003efa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	4413      	add	r3, r2
 8003912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800391c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003920:	d112      	bne.n	8003948 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	015a      	lsls	r2, r3, #5
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	4413      	add	r3, r2
 800392a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800392e:	461a      	mov	r2, r3
 8003930:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003934:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	4611      	mov	r1, r2
 8003940:	4618      	mov	r0, r3
 8003942:	f003 fe28 	bl	8007596 <USB_HC_Halt>
}
 8003946:	e2d8      	b.n	8003efa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	4413      	add	r3, r2
 8003950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b01      	cmp	r3, #1
 800395c:	d140      	bne.n	80039e0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	212c      	movs	r1, #44	; 0x2c
 8003964:	fb01 f303 	mul.w	r3, r1, r3
 8003968:	4413      	add	r3, r2
 800396a:	335c      	adds	r3, #92	; 0x5c
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	4413      	add	r3, r2
 8003978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003982:	2b40      	cmp	r3, #64	; 0x40
 8003984:	d111      	bne.n	80039aa <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	212c      	movs	r1, #44	; 0x2c
 800398c:	fb01 f303 	mul.w	r3, r1, r3
 8003990:	4413      	add	r3, r2
 8003992:	333d      	adds	r3, #61	; 0x3d
 8003994:	2201      	movs	r2, #1
 8003996:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a4:	461a      	mov	r2, r3
 80039a6:	2340      	movs	r3, #64	; 0x40
 80039a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	015a      	lsls	r2, r3, #5
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b6:	461a      	mov	r2, r3
 80039b8:	2301      	movs	r3, #1
 80039ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	212c      	movs	r1, #44	; 0x2c
 80039c2:	fb01 f303 	mul.w	r3, r1, r3
 80039c6:	4413      	add	r3, r2
 80039c8:	3361      	adds	r3, #97	; 0x61
 80039ca:	2201      	movs	r2, #1
 80039cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	b2d2      	uxtb	r2, r2
 80039d6:	4611      	mov	r1, r2
 80039d8:	4618      	mov	r0, r3
 80039da:	f003 fddc 	bl	8007596 <USB_HC_Halt>
}
 80039de:	e28c      	b.n	8003efa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f2:	2b40      	cmp	r3, #64	; 0x40
 80039f4:	d12c      	bne.n	8003a50 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	212c      	movs	r1, #44	; 0x2c
 80039fc:	fb01 f303 	mul.w	r3, r1, r3
 8003a00:	4413      	add	r3, r2
 8003a02:	3361      	adds	r3, #97	; 0x61
 8003a04:	2204      	movs	r2, #4
 8003a06:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	212c      	movs	r1, #44	; 0x2c
 8003a0e:	fb01 f303 	mul.w	r3, r1, r3
 8003a12:	4413      	add	r3, r2
 8003a14:	333d      	adds	r3, #61	; 0x3d
 8003a16:	2201      	movs	r2, #1
 8003a18:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	212c      	movs	r1, #44	; 0x2c
 8003a20:	fb01 f303 	mul.w	r3, r1, r3
 8003a24:	4413      	add	r3, r2
 8003a26:	335c      	adds	r3, #92	; 0x5c
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	4611      	mov	r1, r2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f003 fdad 	bl	8007596 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a48:	461a      	mov	r2, r3
 8003a4a:	2340      	movs	r3, #64	; 0x40
 8003a4c:	6093      	str	r3, [r2, #8]
}
 8003a4e:	e254      	b.n	8003efa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d11a      	bne.n	8003a9c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	015a      	lsls	r2, r3, #5
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a72:	461a      	mov	r2, r3
 8003a74:	2308      	movs	r3, #8
 8003a76:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	212c      	movs	r1, #44	; 0x2c
 8003a7e:	fb01 f303 	mul.w	r3, r1, r3
 8003a82:	4413      	add	r3, r2
 8003a84:	3361      	adds	r3, #97	; 0x61
 8003a86:	2205      	movs	r2, #5
 8003a88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	4611      	mov	r1, r2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f003 fd7e 	bl	8007596 <USB_HC_Halt>
}
 8003a9a:	e22e      	b.n	8003efa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 0310 	and.w	r3, r3, #16
 8003aae:	2b10      	cmp	r3, #16
 8003ab0:	d140      	bne.n	8003b34 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	212c      	movs	r1, #44	; 0x2c
 8003ab8:	fb01 f303 	mul.w	r3, r1, r3
 8003abc:	4413      	add	r3, r2
 8003abe:	335c      	adds	r3, #92	; 0x5c
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	212c      	movs	r1, #44	; 0x2c
 8003aca:	fb01 f303 	mul.w	r3, r1, r3
 8003ace:	4413      	add	r3, r2
 8003ad0:	3361      	adds	r3, #97	; 0x61
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	212c      	movs	r1, #44	; 0x2c
 8003adc:	fb01 f303 	mul.w	r3, r1, r3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	333d      	adds	r3, #61	; 0x3d
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d112      	bne.n	8003b10 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	212c      	movs	r1, #44	; 0x2c
 8003af0:	fb01 f303 	mul.w	r3, r1, r3
 8003af4:	4413      	add	r3, r2
 8003af6:	333c      	adds	r3, #60	; 0x3c
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d108      	bne.n	8003b10 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	212c      	movs	r1, #44	; 0x2c
 8003b04:	fb01 f303 	mul.w	r3, r1, r3
 8003b08:	4413      	add	r3, r2
 8003b0a:	333d      	adds	r3, #61	; 0x3d
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	4611      	mov	r1, r2
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f003 fd3b 	bl	8007596 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	2310      	movs	r3, #16
 8003b30:	6093      	str	r3, [r2, #8]
}
 8003b32:	e1e2      	b.n	8003efa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b46:	2b80      	cmp	r3, #128	; 0x80
 8003b48:	d164      	bne.n	8003c14 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d111      	bne.n	8003b76 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	212c      	movs	r1, #44	; 0x2c
 8003b58:	fb01 f303 	mul.w	r3, r1, r3
 8003b5c:	4413      	add	r3, r2
 8003b5e:	3361      	adds	r3, #97	; 0x61
 8003b60:	2206      	movs	r2, #6
 8003b62:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	4611      	mov	r1, r2
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f003 fd11 	bl	8007596 <USB_HC_Halt>
 8003b74:	e044      	b.n	8003c00 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	212c      	movs	r1, #44	; 0x2c
 8003b7c:	fb01 f303 	mul.w	r3, r1, r3
 8003b80:	4413      	add	r3, r2
 8003b82:	335c      	adds	r3, #92	; 0x5c
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	202c      	movs	r0, #44	; 0x2c
 8003b8e:	fb00 f303 	mul.w	r3, r0, r3
 8003b92:	440b      	add	r3, r1
 8003b94:	335c      	adds	r3, #92	; 0x5c
 8003b96:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	212c      	movs	r1, #44	; 0x2c
 8003b9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	335c      	adds	r3, #92	; 0x5c
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d920      	bls.n	8003bee <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	212c      	movs	r1, #44	; 0x2c
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	335c      	adds	r3, #92	; 0x5c
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	212c      	movs	r1, #44	; 0x2c
 8003bc4:	fb01 f303 	mul.w	r3, r1, r3
 8003bc8:	4413      	add	r3, r2
 8003bca:	3360      	adds	r3, #96	; 0x60
 8003bcc:	2204      	movs	r2, #4
 8003bce:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	b2d9      	uxtb	r1, r3
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	202c      	movs	r0, #44	; 0x2c
 8003bda:	fb00 f303 	mul.w	r3, r0, r3
 8003bde:	4413      	add	r3, r2
 8003be0:	3360      	adds	r3, #96	; 0x60
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f005 ff78 	bl	8009adc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003bec:	e008      	b.n	8003c00 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	212c      	movs	r1, #44	; 0x2c
 8003bf4:	fb01 f303 	mul.w	r3, r1, r3
 8003bf8:	4413      	add	r3, r2
 8003bfa:	3360      	adds	r3, #96	; 0x60
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	2380      	movs	r3, #128	; 0x80
 8003c10:	6093      	str	r3, [r2, #8]
}
 8003c12:	e172      	b.n	8003efa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c2a:	d11b      	bne.n	8003c64 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	212c      	movs	r1, #44	; 0x2c
 8003c32:	fb01 f303 	mul.w	r3, r1, r3
 8003c36:	4413      	add	r3, r2
 8003c38:	3361      	adds	r3, #97	; 0x61
 8003c3a:	2208      	movs	r2, #8
 8003c3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	4611      	mov	r1, r2
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f003 fca4 	bl	8007596 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c60:	6093      	str	r3, [r2, #8]
}
 8003c62:	e14a      	b.n	8003efa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	f040 813f 	bne.w	8003efa <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	212c      	movs	r1, #44	; 0x2c
 8003c82:	fb01 f303 	mul.w	r3, r1, r3
 8003c86:	4413      	add	r3, r2
 8003c88:	3361      	adds	r3, #97	; 0x61
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d17d      	bne.n	8003d8c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	212c      	movs	r1, #44	; 0x2c
 8003c96:	fb01 f303 	mul.w	r3, r1, r3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3360      	adds	r3, #96	; 0x60
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	212c      	movs	r1, #44	; 0x2c
 8003ca8:	fb01 f303 	mul.w	r3, r1, r3
 8003cac:	4413      	add	r3, r2
 8003cae:	333f      	adds	r3, #63	; 0x3f
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d00a      	beq.n	8003ccc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	212c      	movs	r1, #44	; 0x2c
 8003cbc:	fb01 f303 	mul.w	r3, r1, r3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	333f      	adds	r3, #63	; 0x3f
 8003cc4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003cc6:	2b03      	cmp	r3, #3
 8003cc8:	f040 8100 	bne.w	8003ecc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d113      	bne.n	8003cfc <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	212c      	movs	r1, #44	; 0x2c
 8003cda:	fb01 f303 	mul.w	r3, r1, r3
 8003cde:	4413      	add	r3, r2
 8003ce0:	3355      	adds	r3, #85	; 0x55
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	f083 0301 	eor.w	r3, r3, #1
 8003ce8:	b2d8      	uxtb	r0, r3
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	212c      	movs	r1, #44	; 0x2c
 8003cf0:	fb01 f303 	mul.w	r3, r1, r3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	3355      	adds	r3, #85	; 0x55
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	f040 80e3 	bne.w	8003ecc <HCD_HC_OUT_IRQHandler+0x69c>
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	212c      	movs	r1, #44	; 0x2c
 8003d0c:	fb01 f303 	mul.w	r3, r1, r3
 8003d10:	4413      	add	r3, r2
 8003d12:	334c      	adds	r3, #76	; 0x4c
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 80d8 	beq.w	8003ecc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	212c      	movs	r1, #44	; 0x2c
 8003d22:	fb01 f303 	mul.w	r3, r1, r3
 8003d26:	4413      	add	r3, r2
 8003d28:	334c      	adds	r3, #76	; 0x4c
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	202c      	movs	r0, #44	; 0x2c
 8003d32:	fb00 f202 	mul.w	r2, r0, r2
 8003d36:	440a      	add	r2, r1
 8003d38:	3240      	adds	r2, #64	; 0x40
 8003d3a:	8812      	ldrh	r2, [r2, #0]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	202c      	movs	r0, #44	; 0x2c
 8003d46:	fb00 f202 	mul.w	r2, r0, r2
 8003d4a:	440a      	add	r2, r1
 8003d4c:	3240      	adds	r2, #64	; 0x40
 8003d4e:	8812      	ldrh	r2, [r2, #0]
 8003d50:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 80b5 	beq.w	8003ecc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	212c      	movs	r1, #44	; 0x2c
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	3355      	adds	r3, #85	; 0x55
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	f083 0301 	eor.w	r3, r3, #1
 8003d76:	b2d8      	uxtb	r0, r3
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	212c      	movs	r1, #44	; 0x2c
 8003d7e:	fb01 f303 	mul.w	r3, r1, r3
 8003d82:	4413      	add	r3, r2
 8003d84:	3355      	adds	r3, #85	; 0x55
 8003d86:	4602      	mov	r2, r0
 8003d88:	701a      	strb	r2, [r3, #0]
 8003d8a:	e09f      	b.n	8003ecc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	212c      	movs	r1, #44	; 0x2c
 8003d92:	fb01 f303 	mul.w	r3, r1, r3
 8003d96:	4413      	add	r3, r2
 8003d98:	3361      	adds	r3, #97	; 0x61
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d109      	bne.n	8003db4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	212c      	movs	r1, #44	; 0x2c
 8003da6:	fb01 f303 	mul.w	r3, r1, r3
 8003daa:	4413      	add	r3, r2
 8003dac:	3360      	adds	r3, #96	; 0x60
 8003dae:	2202      	movs	r2, #2
 8003db0:	701a      	strb	r2, [r3, #0]
 8003db2:	e08b      	b.n	8003ecc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	212c      	movs	r1, #44	; 0x2c
 8003dba:	fb01 f303 	mul.w	r3, r1, r3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	3361      	adds	r3, #97	; 0x61
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d109      	bne.n	8003ddc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	212c      	movs	r1, #44	; 0x2c
 8003dce:	fb01 f303 	mul.w	r3, r1, r3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	3360      	adds	r3, #96	; 0x60
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	701a      	strb	r2, [r3, #0]
 8003dda:	e077      	b.n	8003ecc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	212c      	movs	r1, #44	; 0x2c
 8003de2:	fb01 f303 	mul.w	r3, r1, r3
 8003de6:	4413      	add	r3, r2
 8003de8:	3361      	adds	r3, #97	; 0x61
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b05      	cmp	r3, #5
 8003dee:	d109      	bne.n	8003e04 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	212c      	movs	r1, #44	; 0x2c
 8003df6:	fb01 f303 	mul.w	r3, r1, r3
 8003dfa:	4413      	add	r3, r2
 8003dfc:	3360      	adds	r3, #96	; 0x60
 8003dfe:	2205      	movs	r2, #5
 8003e00:	701a      	strb	r2, [r3, #0]
 8003e02:	e063      	b.n	8003ecc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	212c      	movs	r1, #44	; 0x2c
 8003e0a:	fb01 f303 	mul.w	r3, r1, r3
 8003e0e:	4413      	add	r3, r2
 8003e10:	3361      	adds	r3, #97	; 0x61
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	2b06      	cmp	r3, #6
 8003e16:	d009      	beq.n	8003e2c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	212c      	movs	r1, #44	; 0x2c
 8003e1e:	fb01 f303 	mul.w	r3, r1, r3
 8003e22:	4413      	add	r3, r2
 8003e24:	3361      	adds	r3, #97	; 0x61
 8003e26:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d14f      	bne.n	8003ecc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	212c      	movs	r1, #44	; 0x2c
 8003e32:	fb01 f303 	mul.w	r3, r1, r3
 8003e36:	4413      	add	r3, r2
 8003e38:	335c      	adds	r3, #92	; 0x5c
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	202c      	movs	r0, #44	; 0x2c
 8003e44:	fb00 f303 	mul.w	r3, r0, r3
 8003e48:	440b      	add	r3, r1
 8003e4a:	335c      	adds	r3, #92	; 0x5c
 8003e4c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	212c      	movs	r1, #44	; 0x2c
 8003e54:	fb01 f303 	mul.w	r3, r1, r3
 8003e58:	4413      	add	r3, r2
 8003e5a:	335c      	adds	r3, #92	; 0x5c
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d912      	bls.n	8003e88 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	212c      	movs	r1, #44	; 0x2c
 8003e68:	fb01 f303 	mul.w	r3, r1, r3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	335c      	adds	r3, #92	; 0x5c
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	212c      	movs	r1, #44	; 0x2c
 8003e7a:	fb01 f303 	mul.w	r3, r1, r3
 8003e7e:	4413      	add	r3, r2
 8003e80:	3360      	adds	r3, #96	; 0x60
 8003e82:	2204      	movs	r2, #4
 8003e84:	701a      	strb	r2, [r3, #0]
 8003e86:	e021      	b.n	8003ecc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	212c      	movs	r1, #44	; 0x2c
 8003e8e:	fb01 f303 	mul.w	r3, r1, r3
 8003e92:	4413      	add	r3, r2
 8003e94:	3360      	adds	r3, #96	; 0x60
 8003e96:	2202      	movs	r2, #2
 8003e98:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003eb0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003eb8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed8:	461a      	mov	r2, r3
 8003eda:	2302      	movs	r3, #2
 8003edc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	b2d9      	uxtb	r1, r3
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	202c      	movs	r0, #44	; 0x2c
 8003ee8:	fb00 f303 	mul.w	r3, r0, r3
 8003eec:	4413      	add	r3, r2
 8003eee:	3360      	adds	r3, #96	; 0x60
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f005 fdf1 	bl	8009adc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003efa:	bf00      	nop
 8003efc:	3720      	adds	r7, #32
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b08a      	sub	sp, #40	; 0x28
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	0c5b      	lsrs	r3, r3, #17
 8003f28:	f003 030f 	and.w	r3, r3, #15
 8003f2c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	091b      	lsrs	r3, r3, #4
 8003f32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f36:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d004      	beq.n	8003f48 <HCD_RXQLVL_IRQHandler+0x46>
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2b05      	cmp	r3, #5
 8003f42:	f000 80a9 	beq.w	8004098 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003f46:	e0aa      	b.n	800409e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 80a6 	beq.w	800409c <HCD_RXQLVL_IRQHandler+0x19a>
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	212c      	movs	r1, #44	; 0x2c
 8003f56:	fb01 f303 	mul.w	r3, r1, r3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	3344      	adds	r3, #68	; 0x44
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 809b 	beq.w	800409c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	212c      	movs	r1, #44	; 0x2c
 8003f6c:	fb01 f303 	mul.w	r3, r1, r3
 8003f70:	4413      	add	r3, r2
 8003f72:	3350      	adds	r3, #80	; 0x50
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	441a      	add	r2, r3
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	202c      	movs	r0, #44	; 0x2c
 8003f80:	fb00 f303 	mul.w	r3, r0, r3
 8003f84:	440b      	add	r3, r1
 8003f86:	334c      	adds	r3, #76	; 0x4c
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d87a      	bhi.n	8004084 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	212c      	movs	r1, #44	; 0x2c
 8003f98:	fb01 f303 	mul.w	r3, r1, r3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	3344      	adds	r3, #68	; 0x44
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	b292      	uxth	r2, r2
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	f002 fe4c 	bl	8006c44 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	212c      	movs	r1, #44	; 0x2c
 8003fb2:	fb01 f303 	mul.w	r3, r1, r3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	3344      	adds	r3, #68	; 0x44
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	441a      	add	r2, r3
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	202c      	movs	r0, #44	; 0x2c
 8003fc6:	fb00 f303 	mul.w	r3, r0, r3
 8003fca:	440b      	add	r3, r1
 8003fcc:	3344      	adds	r3, #68	; 0x44
 8003fce:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	212c      	movs	r1, #44	; 0x2c
 8003fd6:	fb01 f303 	mul.w	r3, r1, r3
 8003fda:	4413      	add	r3, r2
 8003fdc:	3350      	adds	r3, #80	; 0x50
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	441a      	add	r2, r3
 8003fe4:	6879      	ldr	r1, [r7, #4]
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	202c      	movs	r0, #44	; 0x2c
 8003fea:	fb00 f303 	mul.w	r3, r0, r3
 8003fee:	440b      	add	r3, r1
 8003ff0:	3350      	adds	r3, #80	; 0x50
 8003ff2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	0cdb      	lsrs	r3, r3, #19
 8004004:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004008:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	212c      	movs	r1, #44	; 0x2c
 8004010:	fb01 f303 	mul.w	r3, r1, r3
 8004014:	4413      	add	r3, r2
 8004016:	3340      	adds	r3, #64	; 0x40
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	4293      	cmp	r3, r2
 8004020:	d13c      	bne.n	800409c <HCD_RXQLVL_IRQHandler+0x19a>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d039      	beq.n	800409c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	4413      	add	r3, r2
 8004030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800403e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004046:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	4413      	add	r3, r2
 8004050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004054:	461a      	mov	r2, r3
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	212c      	movs	r1, #44	; 0x2c
 8004060:	fb01 f303 	mul.w	r3, r1, r3
 8004064:	4413      	add	r3, r2
 8004066:	3354      	adds	r3, #84	; 0x54
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	f083 0301 	eor.w	r3, r3, #1
 800406e:	b2d8      	uxtb	r0, r3
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	212c      	movs	r1, #44	; 0x2c
 8004076:	fb01 f303 	mul.w	r3, r1, r3
 800407a:	4413      	add	r3, r2
 800407c:	3354      	adds	r3, #84	; 0x54
 800407e:	4602      	mov	r2, r0
 8004080:	701a      	strb	r2, [r3, #0]
      break;
 8004082:	e00b      	b.n	800409c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	212c      	movs	r1, #44	; 0x2c
 800408a:	fb01 f303 	mul.w	r3, r1, r3
 800408e:	4413      	add	r3, r2
 8004090:	3360      	adds	r3, #96	; 0x60
 8004092:	2204      	movs	r2, #4
 8004094:	701a      	strb	r2, [r3, #0]
      break;
 8004096:	e001      	b.n	800409c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004098:	bf00      	nop
 800409a:	e000      	b.n	800409e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800409c:	bf00      	nop
  }
}
 800409e:	bf00      	nop
 80040a0:	3728      	adds	r7, #40	; 0x28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b086      	sub	sp, #24
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80040d2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d10b      	bne.n	80040f6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d102      	bne.n	80040ee <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f005 fcdb 	bl	8009aa4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f043 0302 	orr.w	r3, r3, #2
 80040f4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f003 0308 	and.w	r3, r3, #8
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d132      	bne.n	8004166 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f043 0308 	orr.w	r3, r3, #8
 8004106:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	2b04      	cmp	r3, #4
 8004110:	d126      	bne.n	8004160 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	2b02      	cmp	r3, #2
 8004118:	d113      	bne.n	8004142 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004120:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004124:	d106      	bne.n	8004134 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2102      	movs	r1, #2
 800412c:	4618      	mov	r0, r3
 800412e:	f002 fef7 	bl	8006f20 <USB_InitFSLSPClkSel>
 8004132:	e011      	b.n	8004158 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2101      	movs	r1, #1
 800413a:	4618      	mov	r0, r3
 800413c:	f002 fef0 	bl	8006f20 <USB_InitFSLSPClkSel>
 8004140:	e00a      	b.n	8004158 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d106      	bne.n	8004158 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004150:	461a      	mov	r2, r3
 8004152:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004156:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f005 fccd 	bl	8009af8 <HAL_HCD_PortEnabled_Callback>
 800415e:	e002      	b.n	8004166 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f005 fcd7 	bl	8009b14 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f003 0320 	and.w	r3, r3, #32
 800416c:	2b20      	cmp	r3, #32
 800416e:	d103      	bne.n	8004178 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f043 0320 	orr.w	r3, r3, #32
 8004176:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800417e:	461a      	mov	r2, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	6013      	str	r3, [r2, #0]
}
 8004184:	bf00      	nop
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e12b      	b.n	80043f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d106      	bne.n	80041b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fd fd10 	bl	8001bd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2224      	movs	r2, #36	; 0x24
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0201 	bic.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041f0:	f002 f9ca 	bl	8006588 <HAL_RCC_GetPCLK1Freq>
 80041f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	4a81      	ldr	r2, [pc, #516]	; (8004400 <HAL_I2C_Init+0x274>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d807      	bhi.n	8004210 <HAL_I2C_Init+0x84>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4a80      	ldr	r2, [pc, #512]	; (8004404 <HAL_I2C_Init+0x278>)
 8004204:	4293      	cmp	r3, r2
 8004206:	bf94      	ite	ls
 8004208:	2301      	movls	r3, #1
 800420a:	2300      	movhi	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	e006      	b.n	800421e <HAL_I2C_Init+0x92>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4a7d      	ldr	r2, [pc, #500]	; (8004408 <HAL_I2C_Init+0x27c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	bf94      	ite	ls
 8004218:	2301      	movls	r3, #1
 800421a:	2300      	movhi	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e0e7      	b.n	80043f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4a78      	ldr	r2, [pc, #480]	; (800440c <HAL_I2C_Init+0x280>)
 800422a:	fba2 2303 	umull	r2, r3, r2, r3
 800422e:	0c9b      	lsrs	r3, r3, #18
 8004230:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	430a      	orrs	r2, r1
 8004244:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	4a6a      	ldr	r2, [pc, #424]	; (8004400 <HAL_I2C_Init+0x274>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d802      	bhi.n	8004260 <HAL_I2C_Init+0xd4>
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	3301      	adds	r3, #1
 800425e:	e009      	b.n	8004274 <HAL_I2C_Init+0xe8>
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004266:	fb02 f303 	mul.w	r3, r2, r3
 800426a:	4a69      	ldr	r2, [pc, #420]	; (8004410 <HAL_I2C_Init+0x284>)
 800426c:	fba2 2303 	umull	r2, r3, r2, r3
 8004270:	099b      	lsrs	r3, r3, #6
 8004272:	3301      	adds	r3, #1
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6812      	ldr	r2, [r2, #0]
 8004278:	430b      	orrs	r3, r1
 800427a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004286:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	495c      	ldr	r1, [pc, #368]	; (8004400 <HAL_I2C_Init+0x274>)
 8004290:	428b      	cmp	r3, r1
 8004292:	d819      	bhi.n	80042c8 <HAL_I2C_Init+0x13c>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	1e59      	subs	r1, r3, #1
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	fbb1 f3f3 	udiv	r3, r1, r3
 80042a2:	1c59      	adds	r1, r3, #1
 80042a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80042a8:	400b      	ands	r3, r1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <HAL_I2C_Init+0x138>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	1e59      	subs	r1, r3, #1
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80042bc:	3301      	adds	r3, #1
 80042be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c2:	e051      	b.n	8004368 <HAL_I2C_Init+0x1dc>
 80042c4:	2304      	movs	r3, #4
 80042c6:	e04f      	b.n	8004368 <HAL_I2C_Init+0x1dc>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d111      	bne.n	80042f4 <HAL_I2C_Init+0x168>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	1e58      	subs	r0, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6859      	ldr	r1, [r3, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	440b      	add	r3, r1
 80042de:	fbb0 f3f3 	udiv	r3, r0, r3
 80042e2:	3301      	adds	r3, #1
 80042e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	bf0c      	ite	eq
 80042ec:	2301      	moveq	r3, #1
 80042ee:	2300      	movne	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	e012      	b.n	800431a <HAL_I2C_Init+0x18e>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	1e58      	subs	r0, r3, #1
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6859      	ldr	r1, [r3, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	0099      	lsls	r1, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	fbb0 f3f3 	udiv	r3, r0, r3
 800430a:	3301      	adds	r3, #1
 800430c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004310:	2b00      	cmp	r3, #0
 8004312:	bf0c      	ite	eq
 8004314:	2301      	moveq	r3, #1
 8004316:	2300      	movne	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <HAL_I2C_Init+0x196>
 800431e:	2301      	movs	r3, #1
 8004320:	e022      	b.n	8004368 <HAL_I2C_Init+0x1dc>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10e      	bne.n	8004348 <HAL_I2C_Init+0x1bc>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	1e58      	subs	r0, r3, #1
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6859      	ldr	r1, [r3, #4]
 8004332:	460b      	mov	r3, r1
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	440b      	add	r3, r1
 8004338:	fbb0 f3f3 	udiv	r3, r0, r3
 800433c:	3301      	adds	r3, #1
 800433e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004346:	e00f      	b.n	8004368 <HAL_I2C_Init+0x1dc>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	1e58      	subs	r0, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6859      	ldr	r1, [r3, #4]
 8004350:	460b      	mov	r3, r1
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	0099      	lsls	r1, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	fbb0 f3f3 	udiv	r3, r0, r3
 800435e:	3301      	adds	r3, #1
 8004360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004364:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	6809      	ldr	r1, [r1, #0]
 800436c:	4313      	orrs	r3, r2
 800436e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69da      	ldr	r2, [r3, #28]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004396:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6911      	ldr	r1, [r2, #16]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	68d2      	ldr	r2, [r2, #12]
 80043a2:	4311      	orrs	r1, r2
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6812      	ldr	r2, [r2, #0]
 80043a8:	430b      	orrs	r3, r1
 80043aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695a      	ldr	r2, [r3, #20]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0201 	orr.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	000186a0 	.word	0x000186a0
 8004404:	001e847f 	.word	0x001e847f
 8004408:	003d08ff 	.word	0x003d08ff
 800440c:	431bde83 	.word	0x431bde83
 8004410:	10624dd3 	.word	0x10624dd3

08004414 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b088      	sub	sp, #32
 8004418:	af02      	add	r7, sp, #8
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	4608      	mov	r0, r1
 800441e:	4611      	mov	r1, r2
 8004420:	461a      	mov	r2, r3
 8004422:	4603      	mov	r3, r0
 8004424:	817b      	strh	r3, [r7, #10]
 8004426:	460b      	mov	r3, r1
 8004428:	813b      	strh	r3, [r7, #8]
 800442a:	4613      	mov	r3, r2
 800442c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800442e:	f7fd ffc3 	bl	80023b8 <HAL_GetTick>
 8004432:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b20      	cmp	r3, #32
 800443e:	f040 80d9 	bne.w	80045f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	2319      	movs	r3, #25
 8004448:	2201      	movs	r2, #1
 800444a:	496d      	ldr	r1, [pc, #436]	; (8004600 <HAL_I2C_Mem_Write+0x1ec>)
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 fdad 	bl	8004fac <I2C_WaitOnFlagUntilTimeout>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004458:	2302      	movs	r3, #2
 800445a:	e0cc      	b.n	80045f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004462:	2b01      	cmp	r3, #1
 8004464:	d101      	bne.n	800446a <HAL_I2C_Mem_Write+0x56>
 8004466:	2302      	movs	r3, #2
 8004468:	e0c5      	b.n	80045f6 <HAL_I2C_Mem_Write+0x1e2>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b01      	cmp	r3, #1
 800447e:	d007      	beq.n	8004490 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0201 	orr.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800449e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2221      	movs	r2, #33	; 0x21
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2240      	movs	r2, #64	; 0x40
 80044ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a3a      	ldr	r2, [r7, #32]
 80044ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4a4d      	ldr	r2, [pc, #308]	; (8004604 <HAL_I2C_Mem_Write+0x1f0>)
 80044d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044d2:	88f8      	ldrh	r0, [r7, #6]
 80044d4:	893a      	ldrh	r2, [r7, #8]
 80044d6:	8979      	ldrh	r1, [r7, #10]
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	9301      	str	r3, [sp, #4]
 80044dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	4603      	mov	r3, r0
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 fbe4 	bl	8004cb0 <I2C_RequestMemoryWrite>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d052      	beq.n	8004594 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e081      	b.n	80045f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 fe2e 	bl	8005158 <I2C_WaitOnTXEFlagUntilTimeout>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00d      	beq.n	800451e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	2b04      	cmp	r3, #4
 8004508:	d107      	bne.n	800451a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004518:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e06b      	b.n	80045f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	781a      	ldrb	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	1c5a      	adds	r2, r3, #1
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004544:	b29b      	uxth	r3, r3
 8004546:	3b01      	subs	r3, #1
 8004548:	b29a      	uxth	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b04      	cmp	r3, #4
 800455a:	d11b      	bne.n	8004594 <HAL_I2C_Mem_Write+0x180>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004560:	2b00      	cmp	r3, #0
 8004562:	d017      	beq.n	8004594 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	781a      	ldrb	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800457e:	3b01      	subs	r3, #1
 8004580:	b29a      	uxth	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458a:	b29b      	uxth	r3, r3
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1aa      	bne.n	80044f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 fe1a 	bl	80051da <I2C_WaitOnBTFFlagUntilTimeout>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00d      	beq.n	80045c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d107      	bne.n	80045c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e016      	b.n	80045f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2220      	movs	r2, #32
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	e000      	b.n	80045f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80045f4:	2302      	movs	r3, #2
  }
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	00100002 	.word	0x00100002
 8004604:	ffff0000 	.word	0xffff0000

08004608 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08c      	sub	sp, #48	; 0x30
 800460c:	af02      	add	r7, sp, #8
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	4608      	mov	r0, r1
 8004612:	4611      	mov	r1, r2
 8004614:	461a      	mov	r2, r3
 8004616:	4603      	mov	r3, r0
 8004618:	817b      	strh	r3, [r7, #10]
 800461a:	460b      	mov	r3, r1
 800461c:	813b      	strh	r3, [r7, #8]
 800461e:	4613      	mov	r3, r2
 8004620:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004622:	f7fd fec9 	bl	80023b8 <HAL_GetTick>
 8004626:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b20      	cmp	r3, #32
 8004632:	f040 8208 	bne.w	8004a46 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	2319      	movs	r3, #25
 800463c:	2201      	movs	r2, #1
 800463e:	497b      	ldr	r1, [pc, #492]	; (800482c <HAL_I2C_Mem_Read+0x224>)
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 fcb3 	bl	8004fac <I2C_WaitOnFlagUntilTimeout>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800464c:	2302      	movs	r3, #2
 800464e:	e1fb      	b.n	8004a48 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004656:	2b01      	cmp	r3, #1
 8004658:	d101      	bne.n	800465e <HAL_I2C_Mem_Read+0x56>
 800465a:	2302      	movs	r3, #2
 800465c:	e1f4      	b.n	8004a48 <HAL_I2C_Mem_Read+0x440>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b01      	cmp	r3, #1
 8004672:	d007      	beq.n	8004684 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004692:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2222      	movs	r2, #34	; 0x22
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2240      	movs	r2, #64	; 0x40
 80046a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80046b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4a5b      	ldr	r2, [pc, #364]	; (8004830 <HAL_I2C_Mem_Read+0x228>)
 80046c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046c6:	88f8      	ldrh	r0, [r7, #6]
 80046c8:	893a      	ldrh	r2, [r7, #8]
 80046ca:	8979      	ldrh	r1, [r7, #10]
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	9301      	str	r3, [sp, #4]
 80046d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	4603      	mov	r3, r0
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 fb80 	bl	8004ddc <I2C_RequestMemoryRead>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e1b0      	b.n	8004a48 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d113      	bne.n	8004716 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ee:	2300      	movs	r3, #0
 80046f0:	623b      	str	r3, [r7, #32]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	623b      	str	r3, [r7, #32]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	623b      	str	r3, [r7, #32]
 8004702:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	e184      	b.n	8004a20 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471a:	2b01      	cmp	r3, #1
 800471c:	d11b      	bne.n	8004756 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800472c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	61fb      	str	r3, [r7, #28]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	61fb      	str	r3, [r7, #28]
 8004742:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	e164      	b.n	8004a20 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475a:	2b02      	cmp	r3, #2
 800475c:	d11b      	bne.n	8004796 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800476c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800477c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800477e:	2300      	movs	r3, #0
 8004780:	61bb      	str	r3, [r7, #24]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	61bb      	str	r3, [r7, #24]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	61bb      	str	r3, [r7, #24]
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	e144      	b.n	8004a20 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004796:	2300      	movs	r3, #0
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80047ac:	e138      	b.n	8004a20 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	f200 80f1 	bhi.w	800499a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d123      	bne.n	8004808 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 fd49 	bl	800525c <I2C_WaitOnRXNEFlagUntilTimeout>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e139      	b.n	8004a48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691a      	ldr	r2, [r3, #16]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29a      	uxth	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004806:	e10b      	b.n	8004a20 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800480c:	2b02      	cmp	r3, #2
 800480e:	d14e      	bne.n	80048ae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004816:	2200      	movs	r2, #0
 8004818:	4906      	ldr	r1, [pc, #24]	; (8004834 <HAL_I2C_Mem_Read+0x22c>)
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 fbc6 	bl	8004fac <I2C_WaitOnFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d008      	beq.n	8004838 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e10e      	b.n	8004a48 <HAL_I2C_Mem_Read+0x440>
 800482a:	bf00      	nop
 800482c:	00100002 	.word	0x00100002
 8004830:	ffff0000 	.word	0xffff0000
 8004834:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004846:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691a      	ldr	r2, [r3, #16]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	1c5a      	adds	r2, r3, #1
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004870:	b29b      	uxth	r3, r3
 8004872:	3b01      	subs	r3, #1
 8004874:	b29a      	uxth	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	691a      	ldr	r2, [r3, #16]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004896:	3b01      	subs	r3, #1
 8004898:	b29a      	uxth	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048ac:	e0b8      	b.n	8004a20 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b4:	2200      	movs	r2, #0
 80048b6:	4966      	ldr	r1, [pc, #408]	; (8004a50 <HAL_I2C_Mem_Read+0x448>)
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 fb77 	bl	8004fac <I2C_WaitOnFlagUntilTimeout>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0bf      	b.n	8004a48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	1c5a      	adds	r2, r3, #1
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004900:	b29b      	uxth	r3, r3
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004910:	2200      	movs	r2, #0
 8004912:	494f      	ldr	r1, [pc, #316]	; (8004a50 <HAL_I2C_Mem_Read+0x448>)
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 fb49 	bl	8004fac <I2C_WaitOnFlagUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e091      	b.n	8004a48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004932:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691a      	ldr	r2, [r3, #16]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004950:	3b01      	subs	r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495c:	b29b      	uxth	r3, r3
 800495e:	3b01      	subs	r3, #1
 8004960:	b29a      	uxth	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	b2d2      	uxtb	r2, r2
 8004972:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004982:	3b01      	subs	r3, #1
 8004984:	b29a      	uxth	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498e:	b29b      	uxth	r3, r3
 8004990:	3b01      	subs	r3, #1
 8004992:	b29a      	uxth	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004998:	e042      	b.n	8004a20 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800499a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800499c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 fc5c 	bl	800525c <I2C_WaitOnRXNEFlagUntilTimeout>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e04c      	b.n	8004a48 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	b2d2      	uxtb	r2, r2
 80049ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ca:	3b01      	subs	r3, #1
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	3b01      	subs	r3, #1
 80049da:	b29a      	uxth	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	f003 0304 	and.w	r3, r3, #4
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d118      	bne.n	8004a20 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	b2d2      	uxtb	r2, r2
 80049fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f47f aec2 	bne.w	80047ae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	e000      	b.n	8004a48 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004a46:	2302      	movs	r3, #2
  }
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3728      	adds	r7, #40	; 0x28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	00010004 	.word	0x00010004

08004a54 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08a      	sub	sp, #40	; 0x28
 8004a58:	af02      	add	r7, sp, #8
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	607a      	str	r2, [r7, #4]
 8004a5e:	603b      	str	r3, [r7, #0]
 8004a60:	460b      	mov	r3, r1
 8004a62:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004a64:	f7fd fca8 	bl	80023b8 <HAL_GetTick>
 8004a68:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b20      	cmp	r3, #32
 8004a78:	f040 8111 	bne.w	8004c9e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	2319      	movs	r3, #25
 8004a82:	2201      	movs	r2, #1
 8004a84:	4988      	ldr	r1, [pc, #544]	; (8004ca8 <HAL_I2C_IsDeviceReady+0x254>)
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 fa90 	bl	8004fac <I2C_WaitOnFlagUntilTimeout>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004a92:	2302      	movs	r3, #2
 8004a94:	e104      	b.n	8004ca0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_I2C_IsDeviceReady+0x50>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e0fd      	b.n	8004ca0 <HAL_I2C_IsDeviceReady+0x24c>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d007      	beq.n	8004aca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f042 0201 	orr.w	r2, r2, #1
 8004ac8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ad8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2224      	movs	r2, #36	; 0x24
 8004ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4a70      	ldr	r2, [pc, #448]	; (8004cac <HAL_I2C_IsDeviceReady+0x258>)
 8004aec:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004afc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 fa4e 	bl	8004fac <I2C_WaitOnFlagUntilTimeout>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00d      	beq.n	8004b32 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b24:	d103      	bne.n	8004b2e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b2c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e0b6      	b.n	8004ca0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b32:	897b      	ldrh	r3, [r7, #10]
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	461a      	mov	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b40:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004b42:	f7fd fc39 	bl	80023b8 <HAL_GetTick>
 8004b46:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	bf0c      	ite	eq
 8004b56:	2301      	moveq	r3, #1
 8004b58:	2300      	movne	r3, #0
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b6c:	bf0c      	ite	eq
 8004b6e:	2301      	moveq	r3, #1
 8004b70:	2300      	movne	r3, #0
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004b76:	e025      	b.n	8004bc4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b78:	f7fd fc1e 	bl	80023b8 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d302      	bcc.n	8004b8e <HAL_I2C_IsDeviceReady+0x13a>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d103      	bne.n	8004b96 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	22a0      	movs	r2, #160	; 0xa0
 8004b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	bf0c      	ite	eq
 8004ba4:	2301      	moveq	r3, #1
 8004ba6:	2300      	movne	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bba:	bf0c      	ite	eq
 8004bbc:	2301      	moveq	r3, #1
 8004bbe:	2300      	movne	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2ba0      	cmp	r3, #160	; 0xa0
 8004bce:	d005      	beq.n	8004bdc <HAL_I2C_IsDeviceReady+0x188>
 8004bd0:	7dfb      	ldrb	r3, [r7, #23]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d102      	bne.n	8004bdc <HAL_I2C_IsDeviceReady+0x188>
 8004bd6:	7dbb      	ldrb	r3, [r7, #22]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0cd      	beq.n	8004b78 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2220      	movs	r2, #32
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d129      	bne.n	8004c46 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c00:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c02:	2300      	movs	r3, #0
 8004c04:	613b      	str	r3, [r7, #16]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	613b      	str	r3, [r7, #16]
 8004c16:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	2319      	movs	r3, #25
 8004c1e:	2201      	movs	r2, #1
 8004c20:	4921      	ldr	r1, [pc, #132]	; (8004ca8 <HAL_I2C_IsDeviceReady+0x254>)
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 f9c2 	bl	8004fac <I2C_WaitOnFlagUntilTimeout>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e036      	b.n	8004ca0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2220      	movs	r2, #32
 8004c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	e02c      	b.n	8004ca0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c54:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c5e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	2319      	movs	r3, #25
 8004c66:	2201      	movs	r2, #1
 8004c68:	490f      	ldr	r1, [pc, #60]	; (8004ca8 <HAL_I2C_IsDeviceReady+0x254>)
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 f99e 	bl	8004fac <I2C_WaitOnFlagUntilTimeout>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e012      	b.n	8004ca0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	f4ff af32 	bcc.w	8004aee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e000      	b.n	8004ca0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004c9e:	2302      	movs	r3, #2
  }
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3720      	adds	r7, #32
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	00100002 	.word	0x00100002
 8004cac:	ffff0000 	.word	0xffff0000

08004cb0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b088      	sub	sp, #32
 8004cb4:	af02      	add	r7, sp, #8
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	4608      	mov	r0, r1
 8004cba:	4611      	mov	r1, r2
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	817b      	strh	r3, [r7, #10]
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	813b      	strh	r3, [r7, #8]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 f960 	bl	8004fac <I2C_WaitOnFlagUntilTimeout>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00d      	beq.n	8004d0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d00:	d103      	bne.n	8004d0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e05f      	b.n	8004dce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d0e:	897b      	ldrh	r3, [r7, #10]
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	461a      	mov	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	6a3a      	ldr	r2, [r7, #32]
 8004d22:	492d      	ldr	r1, [pc, #180]	; (8004dd8 <I2C_RequestMemoryWrite+0x128>)
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 f998 	bl	800505a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e04c      	b.n	8004dce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d34:	2300      	movs	r3, #0
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d4c:	6a39      	ldr	r1, [r7, #32]
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 fa02 	bl	8005158 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00d      	beq.n	8004d76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	d107      	bne.n	8004d72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e02b      	b.n	8004dce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d76:	88fb      	ldrh	r3, [r7, #6]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d105      	bne.n	8004d88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d7c:	893b      	ldrh	r3, [r7, #8]
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	611a      	str	r2, [r3, #16]
 8004d86:	e021      	b.n	8004dcc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d88:	893b      	ldrh	r3, [r7, #8]
 8004d8a:	0a1b      	lsrs	r3, r3, #8
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d98:	6a39      	ldr	r1, [r7, #32]
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 f9dc 	bl	8005158 <I2C_WaitOnTXEFlagUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00d      	beq.n	8004dc2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d107      	bne.n	8004dbe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e005      	b.n	8004dce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dc2:	893b      	ldrh	r3, [r7, #8]
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	00010002 	.word	0x00010002

08004ddc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b088      	sub	sp, #32
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	4608      	mov	r0, r1
 8004de6:	4611      	mov	r1, r2
 8004de8:	461a      	mov	r2, r3
 8004dea:	4603      	mov	r3, r0
 8004dec:	817b      	strh	r3, [r7, #10]
 8004dee:	460b      	mov	r3, r1
 8004df0:	813b      	strh	r3, [r7, #8]
 8004df2:	4613      	mov	r3, r2
 8004df4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 f8c2 	bl	8004fac <I2C_WaitOnFlagUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00d      	beq.n	8004e4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e3c:	d103      	bne.n	8004e46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e0aa      	b.n	8004fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e4a:	897b      	ldrh	r3, [r7, #10]
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	461a      	mov	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	6a3a      	ldr	r2, [r7, #32]
 8004e5e:	4952      	ldr	r1, [pc, #328]	; (8004fa8 <I2C_RequestMemoryRead+0x1cc>)
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 f8fa 	bl	800505a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e097      	b.n	8004fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e70:	2300      	movs	r3, #0
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e88:	6a39      	ldr	r1, [r7, #32]
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 f964 	bl	8005158 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00d      	beq.n	8004eb2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d107      	bne.n	8004eae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e076      	b.n	8004fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004eb2:	88fb      	ldrh	r3, [r7, #6]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d105      	bne.n	8004ec4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004eb8:	893b      	ldrh	r3, [r7, #8]
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	611a      	str	r2, [r3, #16]
 8004ec2:	e021      	b.n	8004f08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ec4:	893b      	ldrh	r3, [r7, #8]
 8004ec6:	0a1b      	lsrs	r3, r3, #8
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed4:	6a39      	ldr	r1, [r7, #32]
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 f93e 	bl	8005158 <I2C_WaitOnTXEFlagUntilTimeout>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00d      	beq.n	8004efe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d107      	bne.n	8004efa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ef8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e050      	b.n	8004fa0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004efe:	893b      	ldrh	r3, [r7, #8]
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0a:	6a39      	ldr	r1, [r7, #32]
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 f923 	bl	8005158 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00d      	beq.n	8004f34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d107      	bne.n	8004f30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e035      	b.n	8004fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 f82b 	bl	8004fac <I2C_WaitOnFlagUntilTimeout>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00d      	beq.n	8004f78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f6a:	d103      	bne.n	8004f74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e013      	b.n	8004fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004f78:	897b      	ldrh	r3, [r7, #10]
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	f043 0301 	orr.w	r3, r3, #1
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	6a3a      	ldr	r2, [r7, #32]
 8004f8c:	4906      	ldr	r1, [pc, #24]	; (8004fa8 <I2C_RequestMemoryRead+0x1cc>)
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 f863 	bl	800505a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e000      	b.n	8004fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	00010002 	.word	0x00010002

08004fac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	603b      	str	r3, [r7, #0]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fbc:	e025      	b.n	800500a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fc4:	d021      	beq.n	800500a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc6:	f7fd f9f7 	bl	80023b8 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d302      	bcc.n	8004fdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d116      	bne.n	800500a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	f043 0220 	orr.w	r2, r3, #32
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e023      	b.n	8005052 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	0c1b      	lsrs	r3, r3, #16
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b01      	cmp	r3, #1
 8005012:	d10d      	bne.n	8005030 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	43da      	mvns	r2, r3
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	4013      	ands	r3, r2
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	bf0c      	ite	eq
 8005026:	2301      	moveq	r3, #1
 8005028:	2300      	movne	r3, #0
 800502a:	b2db      	uxtb	r3, r3
 800502c:	461a      	mov	r2, r3
 800502e:	e00c      	b.n	800504a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	43da      	mvns	r2, r3
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	4013      	ands	r3, r2
 800503c:	b29b      	uxth	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	bf0c      	ite	eq
 8005042:	2301      	moveq	r3, #1
 8005044:	2300      	movne	r3, #0
 8005046:	b2db      	uxtb	r3, r3
 8005048:	461a      	mov	r2, r3
 800504a:	79fb      	ldrb	r3, [r7, #7]
 800504c:	429a      	cmp	r2, r3
 800504e:	d0b6      	beq.n	8004fbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	60f8      	str	r0, [r7, #12]
 8005062:	60b9      	str	r1, [r7, #8]
 8005064:	607a      	str	r2, [r7, #4]
 8005066:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005068:	e051      	b.n	800510e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005078:	d123      	bne.n	80050c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005088:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005092:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2220      	movs	r2, #32
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	f043 0204 	orr.w	r2, r3, #4
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e046      	b.n	8005150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050c8:	d021      	beq.n	800510e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ca:	f7fd f975 	bl	80023b8 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d302      	bcc.n	80050e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d116      	bne.n	800510e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2220      	movs	r2, #32
 80050ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	f043 0220 	orr.w	r2, r3, #32
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e020      	b.n	8005150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	0c1b      	lsrs	r3, r3, #16
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b01      	cmp	r3, #1
 8005116:	d10c      	bne.n	8005132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	43da      	mvns	r2, r3
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4013      	ands	r3, r2
 8005124:	b29b      	uxth	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	bf14      	ite	ne
 800512a:	2301      	movne	r3, #1
 800512c:	2300      	moveq	r3, #0
 800512e:	b2db      	uxtb	r3, r3
 8005130:	e00b      	b.n	800514a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	43da      	mvns	r2, r3
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	4013      	ands	r3, r2
 800513e:	b29b      	uxth	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	bf14      	ite	ne
 8005144:	2301      	movne	r3, #1
 8005146:	2300      	moveq	r3, #0
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d18d      	bne.n	800506a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005164:	e02d      	b.n	80051c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 f8ce 	bl	8005308 <I2C_IsAcknowledgeFailed>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e02d      	b.n	80051d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800517c:	d021      	beq.n	80051c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800517e:	f7fd f91b 	bl	80023b8 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	429a      	cmp	r2, r3
 800518c:	d302      	bcc.n	8005194 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d116      	bne.n	80051c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2220      	movs	r2, #32
 800519e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	f043 0220 	orr.w	r2, r3, #32
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e007      	b.n	80051d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051cc:	2b80      	cmp	r3, #128	; 0x80
 80051ce:	d1ca      	bne.n	8005166 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b084      	sub	sp, #16
 80051de:	af00      	add	r7, sp, #0
 80051e0:	60f8      	str	r0, [r7, #12]
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051e6:	e02d      	b.n	8005244 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 f88d 	bl	8005308 <I2C_IsAcknowledgeFailed>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e02d      	b.n	8005254 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051fe:	d021      	beq.n	8005244 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005200:	f7fd f8da 	bl	80023b8 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	429a      	cmp	r2, r3
 800520e:	d302      	bcc.n	8005216 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d116      	bne.n	8005244 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2220      	movs	r2, #32
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	f043 0220 	orr.w	r2, r3, #32
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e007      	b.n	8005254 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	f003 0304 	and.w	r3, r3, #4
 800524e:	2b04      	cmp	r3, #4
 8005250:	d1ca      	bne.n	80051e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005268:	e042      	b.n	80052f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	f003 0310 	and.w	r3, r3, #16
 8005274:	2b10      	cmp	r3, #16
 8005276:	d119      	bne.n	80052ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f06f 0210 	mvn.w	r2, #16
 8005280:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2220      	movs	r2, #32
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e029      	b.n	8005300 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ac:	f7fd f884 	bl	80023b8 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d302      	bcc.n	80052c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d116      	bne.n	80052f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052dc:	f043 0220 	orr.w	r2, r3, #32
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e007      	b.n	8005300 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fa:	2b40      	cmp	r3, #64	; 0x40
 80052fc:	d1b5      	bne.n	800526a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800531a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800531e:	d11b      	bne.n	8005358 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005328:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2220      	movs	r2, #32
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005344:	f043 0204 	orr.w	r2, r3, #4
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e000      	b.n	800535a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
	...

08005368 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b088      	sub	sp, #32
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e128      	b.n	80055cc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d109      	bne.n	800539a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a90      	ldr	r2, [pc, #576]	; (80055d4 <HAL_I2S_Init+0x26c>)
 8005392:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7fc fcc5 	bl	8001d24 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2202      	movs	r2, #2
 800539e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	6812      	ldr	r2, [r2, #0]
 80053ac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80053b0:	f023 030f 	bic.w	r3, r3, #15
 80053b4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2202      	movs	r2, #2
 80053bc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d060      	beq.n	8005488 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d102      	bne.n	80053d4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80053ce:	2310      	movs	r3, #16
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	e001      	b.n	80053d8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80053d4:	2320      	movs	r3, #32
 80053d6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	2b20      	cmp	r3, #32
 80053de:	d802      	bhi.n	80053e6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	005b      	lsls	r3, r3, #1
 80053e4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80053e6:	2001      	movs	r0, #1
 80053e8:	f001 f9d2 	bl	8006790 <HAL_RCCEx_GetPeriphCLKFreq>
 80053ec:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053f6:	d125      	bne.n	8005444 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d010      	beq.n	8005422 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	fbb2 f2f3 	udiv	r2, r2, r3
 800540a:	4613      	mov	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	461a      	mov	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	fbb2 f3f3 	udiv	r3, r2, r3
 800541c:	3305      	adds	r3, #5
 800541e:	613b      	str	r3, [r7, #16]
 8005420:	e01f      	b.n	8005462 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	00db      	lsls	r3, r3, #3
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	fbb2 f2f3 	udiv	r2, r2, r3
 800542c:	4613      	mov	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	461a      	mov	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	fbb2 f3f3 	udiv	r3, r2, r3
 800543e:	3305      	adds	r3, #5
 8005440:	613b      	str	r3, [r7, #16]
 8005442:	e00e      	b.n	8005462 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	fbb2 f2f3 	udiv	r2, r2, r3
 800544c:	4613      	mov	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	461a      	mov	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	fbb2 f3f3 	udiv	r3, r2, r3
 800545e:	3305      	adds	r3, #5
 8005460:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	4a5c      	ldr	r2, [pc, #368]	; (80055d8 <HAL_I2S_Init+0x270>)
 8005466:	fba2 2303 	umull	r2, r3, r2, r3
 800546a:	08db      	lsrs	r3, r3, #3
 800546c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	085b      	lsrs	r3, r3, #1
 800547e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	021b      	lsls	r3, r3, #8
 8005484:	61bb      	str	r3, [r7, #24]
 8005486:	e003      	b.n	8005490 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005488:	2302      	movs	r3, #2
 800548a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800548c:	2300      	movs	r3, #0
 800548e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d902      	bls.n	800549c <HAL_I2S_Init+0x134>
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	2bff      	cmp	r3, #255	; 0xff
 800549a:	d907      	bls.n	80054ac <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a0:	f043 0210 	orr.w	r2, r3, #16
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e08f      	b.n	80055cc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691a      	ldr	r2, [r3, #16]
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	ea42 0103 	orr.w	r1, r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69fa      	ldr	r2, [r7, #28]
 80054bc:	430a      	orrs	r2, r1
 80054be:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80054ca:	f023 030f 	bic.w	r3, r3, #15
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	6851      	ldr	r1, [r2, #4]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6892      	ldr	r2, [r2, #8]
 80054d6:	4311      	orrs	r1, r2
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	68d2      	ldr	r2, [r2, #12]
 80054dc:	4311      	orrs	r1, r2
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6992      	ldr	r2, [r2, #24]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	431a      	orrs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054ee:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d161      	bne.n	80055bc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a38      	ldr	r2, [pc, #224]	; (80055dc <HAL_I2S_Init+0x274>)
 80054fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a37      	ldr	r2, [pc, #220]	; (80055e0 <HAL_I2S_Init+0x278>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d101      	bne.n	800550c <HAL_I2S_Init+0x1a4>
 8005508:	4b36      	ldr	r3, [pc, #216]	; (80055e4 <HAL_I2S_Init+0x27c>)
 800550a:	e001      	b.n	8005510 <HAL_I2S_Init+0x1a8>
 800550c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6812      	ldr	r2, [r2, #0]
 8005516:	4932      	ldr	r1, [pc, #200]	; (80055e0 <HAL_I2S_Init+0x278>)
 8005518:	428a      	cmp	r2, r1
 800551a:	d101      	bne.n	8005520 <HAL_I2S_Init+0x1b8>
 800551c:	4a31      	ldr	r2, [pc, #196]	; (80055e4 <HAL_I2S_Init+0x27c>)
 800551e:	e001      	b.n	8005524 <HAL_I2S_Init+0x1bc>
 8005520:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005524:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005528:	f023 030f 	bic.w	r3, r3, #15
 800552c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a2b      	ldr	r2, [pc, #172]	; (80055e0 <HAL_I2S_Init+0x278>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d101      	bne.n	800553c <HAL_I2S_Init+0x1d4>
 8005538:	4b2a      	ldr	r3, [pc, #168]	; (80055e4 <HAL_I2S_Init+0x27c>)
 800553a:	e001      	b.n	8005540 <HAL_I2S_Init+0x1d8>
 800553c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005540:	2202      	movs	r2, #2
 8005542:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a25      	ldr	r2, [pc, #148]	; (80055e0 <HAL_I2S_Init+0x278>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d101      	bne.n	8005552 <HAL_I2S_Init+0x1ea>
 800554e:	4b25      	ldr	r3, [pc, #148]	; (80055e4 <HAL_I2S_Init+0x27c>)
 8005550:	e001      	b.n	8005556 <HAL_I2S_Init+0x1ee>
 8005552:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005562:	d003      	beq.n	800556c <HAL_I2S_Init+0x204>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d103      	bne.n	8005574 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800556c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005570:	613b      	str	r3, [r7, #16]
 8005572:	e001      	b.n	8005578 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005574:	2300      	movs	r3, #0
 8005576:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005582:	4313      	orrs	r3, r2
 8005584:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800558c:	4313      	orrs	r3, r2
 800558e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005596:	4313      	orrs	r3, r2
 8005598:	b29a      	uxth	r2, r3
 800559a:	897b      	ldrh	r3, [r7, #10]
 800559c:	4313      	orrs	r3, r2
 800559e:	b29b      	uxth	r3, r3
 80055a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80055a4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a0d      	ldr	r2, [pc, #52]	; (80055e0 <HAL_I2S_Init+0x278>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d101      	bne.n	80055b4 <HAL_I2S_Init+0x24c>
 80055b0:	4b0c      	ldr	r3, [pc, #48]	; (80055e4 <HAL_I2S_Init+0x27c>)
 80055b2:	e001      	b.n	80055b8 <HAL_I2S_Init+0x250>
 80055b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055b8:	897a      	ldrh	r2, [r7, #10]
 80055ba:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3720      	adds	r7, #32
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	080056df 	.word	0x080056df
 80055d8:	cccccccd 	.word	0xcccccccd
 80055dc:	080057f5 	.word	0x080057f5
 80055e0:	40003800 	.word	0x40003800
 80055e4:	40003400 	.word	0x40003400

080055e8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	881a      	ldrh	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	1c9a      	adds	r2, r3, #2
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005646:	b29b      	uxth	r3, r3
 8005648:	3b01      	subs	r3, #1
 800564a:	b29a      	uxth	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10e      	bne.n	8005678 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005668:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7ff ffb8 	bl	80055e8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005678:	bf00      	nop
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005692:	b292      	uxth	r2, r2
 8005694:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569a:	1c9a      	adds	r2, r3, #2
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	3b01      	subs	r3, #1
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10e      	bne.n	80056d6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80056c6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f7ff ff93 	bl	80055fc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80056d6:	bf00      	nop
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80056de:	b580      	push	{r7, lr}
 80056e0:	b086      	sub	sp, #24
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b04      	cmp	r3, #4
 80056f8:	d13a      	bne.n	8005770 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b01      	cmp	r3, #1
 8005702:	d109      	bne.n	8005718 <I2S_IRQHandler+0x3a>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570e:	2b40      	cmp	r3, #64	; 0x40
 8005710:	d102      	bne.n	8005718 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7ff ffb4 	bl	8005680 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571e:	2b40      	cmp	r3, #64	; 0x40
 8005720:	d126      	bne.n	8005770 <I2S_IRQHandler+0x92>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f003 0320 	and.w	r3, r3, #32
 800572c:	2b20      	cmp	r3, #32
 800572e:	d11f      	bne.n	8005770 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800573e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005740:	2300      	movs	r3, #0
 8005742:	613b      	str	r3, [r7, #16]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	613b      	str	r3, [r7, #16]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	613b      	str	r3, [r7, #16]
 8005754:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005762:	f043 0202 	orr.w	r2, r3, #2
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7ff ff50 	bl	8005610 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b03      	cmp	r3, #3
 800577a:	d136      	bne.n	80057ea <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b02      	cmp	r3, #2
 8005784:	d109      	bne.n	800579a <I2S_IRQHandler+0xbc>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005790:	2b80      	cmp	r3, #128	; 0x80
 8005792:	d102      	bne.n	800579a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7ff ff45 	bl	8005624 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f003 0308 	and.w	r3, r3, #8
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d122      	bne.n	80057ea <I2S_IRQHandler+0x10c>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f003 0320 	and.w	r3, r3, #32
 80057ae:	2b20      	cmp	r3, #32
 80057b0:	d11b      	bne.n	80057ea <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80057c0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80057c2:	2300      	movs	r3, #0
 80057c4:	60fb      	str	r3, [r7, #12]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057dc:	f043 0204 	orr.w	r2, r3, #4
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7ff ff13 	bl	8005610 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80057ea:	bf00      	nop
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
	...

080057f4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a92      	ldr	r2, [pc, #584]	; (8005a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d101      	bne.n	8005812 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800580e:	4b92      	ldr	r3, [pc, #584]	; (8005a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005810:	e001      	b.n	8005816 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005812:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a8b      	ldr	r2, [pc, #556]	; (8005a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d101      	bne.n	8005830 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800582c:	4b8a      	ldr	r3, [pc, #552]	; (8005a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800582e:	e001      	b.n	8005834 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005830:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005840:	d004      	beq.n	800584c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	f040 8099 	bne.w	800597e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b02      	cmp	r3, #2
 8005854:	d107      	bne.n	8005866 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 f925 	bl	8005ab0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	2b01      	cmp	r3, #1
 800586e:	d107      	bne.n	8005880 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f9c8 	bl	8005c10 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005886:	2b40      	cmp	r3, #64	; 0x40
 8005888:	d13a      	bne.n	8005900 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f003 0320 	and.w	r3, r3, #32
 8005890:	2b00      	cmp	r3, #0
 8005892:	d035      	beq.n	8005900 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a6e      	ldr	r2, [pc, #440]	; (8005a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d101      	bne.n	80058a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800589e:	4b6e      	ldr	r3, [pc, #440]	; (8005a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058a0:	e001      	b.n	80058a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80058a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4969      	ldr	r1, [pc, #420]	; (8005a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058ae:	428b      	cmp	r3, r1
 80058b0:	d101      	bne.n	80058b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80058b2:	4b69      	ldr	r3, [pc, #420]	; (8005a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058b4:	e001      	b.n	80058ba <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80058b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80058be:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80058ce:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80058d0:	2300      	movs	r3, #0
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f2:	f043 0202 	orr.w	r2, r3, #2
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7ff fe88 	bl	8005610 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	f003 0308 	and.w	r3, r3, #8
 8005906:	2b08      	cmp	r3, #8
 8005908:	f040 80c3 	bne.w	8005a92 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f003 0320 	and.w	r3, r3, #32
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 80bd 	beq.w	8005a92 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005926:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a49      	ldr	r2, [pc, #292]	; (8005a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d101      	bne.n	8005936 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005932:	4b49      	ldr	r3, [pc, #292]	; (8005a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005934:	e001      	b.n	800593a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005936:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4944      	ldr	r1, [pc, #272]	; (8005a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005942:	428b      	cmp	r3, r1
 8005944:	d101      	bne.n	800594a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005946:	4b44      	ldr	r3, [pc, #272]	; (8005a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005948:	e001      	b.n	800594e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800594a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800594e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005952:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005954:	2300      	movs	r3, #0
 8005956:	60bb      	str	r3, [r7, #8]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	60bb      	str	r3, [r7, #8]
 8005960:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596e:	f043 0204 	orr.w	r2, r3, #4
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7ff fe4a 	bl	8005610 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800597c:	e089      	b.n	8005a92 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b02      	cmp	r3, #2
 8005986:	d107      	bne.n	8005998 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598e:	2b00      	cmp	r3, #0
 8005990:	d002      	beq.n	8005998 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f8be 	bl	8005b14 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d107      	bne.n	80059b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d002      	beq.n	80059b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f8fd 	bl	8005bac <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b8:	2b40      	cmp	r3, #64	; 0x40
 80059ba:	d12f      	bne.n	8005a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f003 0320 	and.w	r3, r3, #32
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d02a      	beq.n	8005a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80059d4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a1e      	ldr	r2, [pc, #120]	; (8005a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d101      	bne.n	80059e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80059e0:	4b1d      	ldr	r3, [pc, #116]	; (8005a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059e2:	e001      	b.n	80059e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80059e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4919      	ldr	r1, [pc, #100]	; (8005a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059f0:	428b      	cmp	r3, r1
 80059f2:	d101      	bne.n	80059f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80059f4:	4b18      	ldr	r3, [pc, #96]	; (8005a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059f6:	e001      	b.n	80059fc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80059f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a00:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0e:	f043 0202 	orr.w	r2, r3, #2
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7ff fdfa 	bl	8005610 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	f003 0308 	and.w	r3, r3, #8
 8005a22:	2b08      	cmp	r3, #8
 8005a24:	d136      	bne.n	8005a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f003 0320 	and.w	r3, r3, #32
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d031      	beq.n	8005a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a07      	ldr	r2, [pc, #28]	; (8005a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d101      	bne.n	8005a3e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005a3a:	4b07      	ldr	r3, [pc, #28]	; (8005a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a3c:	e001      	b.n	8005a42 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005a3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4902      	ldr	r1, [pc, #8]	; (8005a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a4a:	428b      	cmp	r3, r1
 8005a4c:	d106      	bne.n	8005a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005a4e:	4b02      	ldr	r3, [pc, #8]	; (8005a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a50:	e006      	b.n	8005a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005a52:	bf00      	nop
 8005a54:	40003800 	.word	0x40003800
 8005a58:	40003400 	.word	0x40003400
 8005a5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a64:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a74:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a82:	f043 0204 	orr.w	r2, r3, #4
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7ff fdc0 	bl	8005610 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a90:	e000      	b.n	8005a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005a92:	bf00      	nop
}
 8005a94:	bf00      	nop
 8005a96:	3720      	adds	r7, #32
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	1c99      	adds	r1, r3, #2
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6251      	str	r1, [r2, #36]	; 0x24
 8005ac2:	881a      	ldrh	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d113      	bne.n	8005b0a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005af0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d106      	bne.n	8005b0a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f7ff ffc9 	bl	8005a9c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b0a:	bf00      	nop
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
	...

08005b14 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b20:	1c99      	adds	r1, r3, #2
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	6251      	str	r1, [r2, #36]	; 0x24
 8005b26:	8819      	ldrh	r1, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a1d      	ldr	r2, [pc, #116]	; (8005ba4 <I2SEx_TxISR_I2SExt+0x90>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d101      	bne.n	8005b36 <I2SEx_TxISR_I2SExt+0x22>
 8005b32:	4b1d      	ldr	r3, [pc, #116]	; (8005ba8 <I2SEx_TxISR_I2SExt+0x94>)
 8005b34:	e001      	b.n	8005b3a <I2SEx_TxISR_I2SExt+0x26>
 8005b36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b3a:	460a      	mov	r2, r1
 8005b3c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	3b01      	subs	r3, #1
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d121      	bne.n	8005b9a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a12      	ldr	r2, [pc, #72]	; (8005ba4 <I2SEx_TxISR_I2SExt+0x90>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d101      	bne.n	8005b64 <I2SEx_TxISR_I2SExt+0x50>
 8005b60:	4b11      	ldr	r3, [pc, #68]	; (8005ba8 <I2SEx_TxISR_I2SExt+0x94>)
 8005b62:	e001      	b.n	8005b68 <I2SEx_TxISR_I2SExt+0x54>
 8005b64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	490d      	ldr	r1, [pc, #52]	; (8005ba4 <I2SEx_TxISR_I2SExt+0x90>)
 8005b70:	428b      	cmp	r3, r1
 8005b72:	d101      	bne.n	8005b78 <I2SEx_TxISR_I2SExt+0x64>
 8005b74:	4b0c      	ldr	r3, [pc, #48]	; (8005ba8 <I2SEx_TxISR_I2SExt+0x94>)
 8005b76:	e001      	b.n	8005b7c <I2SEx_TxISR_I2SExt+0x68>
 8005b78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b80:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d106      	bne.n	8005b9a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7ff ff81 	bl	8005a9c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b9a:	bf00      	nop
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	40003800 	.word	0x40003800
 8005ba8:	40003400 	.word	0x40003400

08005bac <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68d8      	ldr	r0, [r3, #12]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbe:	1c99      	adds	r1, r3, #2
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005bc4:	b282      	uxth	r2, r0
 8005bc6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d113      	bne.n	8005c08 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005bee:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d106      	bne.n	8005c08 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7ff ff4a 	bl	8005a9c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c08:	bf00      	nop
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a20      	ldr	r2, [pc, #128]	; (8005ca0 <I2SEx_RxISR_I2SExt+0x90>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d101      	bne.n	8005c26 <I2SEx_RxISR_I2SExt+0x16>
 8005c22:	4b20      	ldr	r3, [pc, #128]	; (8005ca4 <I2SEx_RxISR_I2SExt+0x94>)
 8005c24:	e001      	b.n	8005c2a <I2SEx_RxISR_I2SExt+0x1a>
 8005c26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c2a:	68d8      	ldr	r0, [r3, #12]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c30:	1c99      	adds	r1, r3, #2
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005c36:	b282      	uxth	r2, r0
 8005c38:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	3b01      	subs	r3, #1
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d121      	bne.n	8005c96 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a12      	ldr	r2, [pc, #72]	; (8005ca0 <I2SEx_RxISR_I2SExt+0x90>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d101      	bne.n	8005c60 <I2SEx_RxISR_I2SExt+0x50>
 8005c5c:	4b11      	ldr	r3, [pc, #68]	; (8005ca4 <I2SEx_RxISR_I2SExt+0x94>)
 8005c5e:	e001      	b.n	8005c64 <I2SEx_RxISR_I2SExt+0x54>
 8005c60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	490d      	ldr	r1, [pc, #52]	; (8005ca0 <I2SEx_RxISR_I2SExt+0x90>)
 8005c6c:	428b      	cmp	r3, r1
 8005c6e:	d101      	bne.n	8005c74 <I2SEx_RxISR_I2SExt+0x64>
 8005c70:	4b0c      	ldr	r3, [pc, #48]	; (8005ca4 <I2SEx_RxISR_I2SExt+0x94>)
 8005c72:	e001      	b.n	8005c78 <I2SEx_RxISR_I2SExt+0x68>
 8005c74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c78:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c7c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d106      	bne.n	8005c96 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7ff ff03 	bl	8005a9c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c96:	bf00      	nop
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	40003800 	.word	0x40003800
 8005ca4:	40003400 	.word	0x40003400

08005ca8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e267      	b.n	800618a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d075      	beq.n	8005db2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cc6:	4b88      	ldr	r3, [pc, #544]	; (8005ee8 <HAL_RCC_OscConfig+0x240>)
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f003 030c 	and.w	r3, r3, #12
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d00c      	beq.n	8005cec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cd2:	4b85      	ldr	r3, [pc, #532]	; (8005ee8 <HAL_RCC_OscConfig+0x240>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cda:	2b08      	cmp	r3, #8
 8005cdc:	d112      	bne.n	8005d04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cde:	4b82      	ldr	r3, [pc, #520]	; (8005ee8 <HAL_RCC_OscConfig+0x240>)
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ce6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cea:	d10b      	bne.n	8005d04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cec:	4b7e      	ldr	r3, [pc, #504]	; (8005ee8 <HAL_RCC_OscConfig+0x240>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d05b      	beq.n	8005db0 <HAL_RCC_OscConfig+0x108>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d157      	bne.n	8005db0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e242      	b.n	800618a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d0c:	d106      	bne.n	8005d1c <HAL_RCC_OscConfig+0x74>
 8005d0e:	4b76      	ldr	r3, [pc, #472]	; (8005ee8 <HAL_RCC_OscConfig+0x240>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a75      	ldr	r2, [pc, #468]	; (8005ee8 <HAL_RCC_OscConfig+0x240>)
 8005d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d18:	6013      	str	r3, [r2, #0]
 8005d1a:	e01d      	b.n	8005d58 <HAL_RCC_OscConfig+0xb0>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d24:	d10c      	bne.n	8005d40 <HAL_RCC_OscConfig+0x98>
 8005d26:	4b70      	ldr	r3, [pc, #448]	; (8005ee8 <HAL_RCC_OscConfig+0x240>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a6f      	ldr	r2, [pc, #444]	; (8005ee8 <HAL_RCC_OscConfig+0x240>)
 8005d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d30:	6013      	str	r3, [r2, #0]
 8005d32:	4b6d      	ldr	r3, [pc, #436]	; (8005ee8 <HAL_RCC_OscConfig+0x240>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a6c      	ldr	r2, [pc, #432]	; (8005ee8 <HAL_RCC_OscConfig+0x240>)
 8005d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d3c:	6013      	str	r3, [r2, #0]
 8005d3e:	e00b      	b.n	8005d58 <HAL_RCC_OscConfig+0xb0>
 8005d40:	4b69      	ldr	r3, [pc, #420]	; (8005ee8 <HAL_RCC_OscConfig+0x240>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a68      	ldr	r2, [pc, #416]	; (8005ee8 <HAL_RCC_OscConfig+0x240>)
 8005d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d4a:	6013      	str	r3, [r2, #0]
 8005d4c:	4b66      	ldr	r3, [pc, #408]	; (8005ee8 <HAL_RCC_OscConfig+0x240>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a65      	ldr	r2, [pc, #404]	; (8005ee8 <HAL_RCC_OscConfig+0x240>)
 8005d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d013      	beq.n	8005d88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d60:	f7fc fb2a 	bl	80023b8 <HAL_GetTick>
 8005d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d66:	e008      	b.n	8005d7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d68:	f7fc fb26 	bl	80023b8 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b64      	cmp	r3, #100	; 0x64
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e207      	b.n	800618a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d7a:	4b5b      	ldr	r3, [pc, #364]	; (8005ee8 <HAL_RCC_OscConfig+0x240>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d0f0      	beq.n	8005d68 <HAL_RCC_OscConfig+0xc0>
 8005d86:	e014      	b.n	8005db2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d88:	f7fc fb16 	bl	80023b8 <HAL_GetTick>
 8005d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d8e:	e008      	b.n	8005da2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d90:	f7fc fb12 	bl	80023b8 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b64      	cmp	r3, #100	; 0x64
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e1f3      	b.n	800618a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005da2:	4b51      	ldr	r3, [pc, #324]	; (8005ee8 <HAL_RCC_OscConfig+0x240>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1f0      	bne.n	8005d90 <HAL_RCC_OscConfig+0xe8>
 8005dae:	e000      	b.n	8005db2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d063      	beq.n	8005e86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dbe:	4b4a      	ldr	r3, [pc, #296]	; (8005ee8 <HAL_RCC_OscConfig+0x240>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 030c 	and.w	r3, r3, #12
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00b      	beq.n	8005de2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dca:	4b47      	ldr	r3, [pc, #284]	; (8005ee8 <HAL_RCC_OscConfig+0x240>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dd2:	2b08      	cmp	r3, #8
 8005dd4:	d11c      	bne.n	8005e10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dd6:	4b44      	ldr	r3, [pc, #272]	; (8005ee8 <HAL_RCC_OscConfig+0x240>)
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d116      	bne.n	8005e10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005de2:	4b41      	ldr	r3, [pc, #260]	; (8005ee8 <HAL_RCC_OscConfig+0x240>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d005      	beq.n	8005dfa <HAL_RCC_OscConfig+0x152>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d001      	beq.n	8005dfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e1c7      	b.n	800618a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dfa:	4b3b      	ldr	r3, [pc, #236]	; (8005ee8 <HAL_RCC_OscConfig+0x240>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	4937      	ldr	r1, [pc, #220]	; (8005ee8 <HAL_RCC_OscConfig+0x240>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e0e:	e03a      	b.n	8005e86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d020      	beq.n	8005e5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e18:	4b34      	ldr	r3, [pc, #208]	; (8005eec <HAL_RCC_OscConfig+0x244>)
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e1e:	f7fc facb 	bl	80023b8 <HAL_GetTick>
 8005e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e24:	e008      	b.n	8005e38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e26:	f7fc fac7 	bl	80023b8 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d901      	bls.n	8005e38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e1a8      	b.n	800618a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e38:	4b2b      	ldr	r3, [pc, #172]	; (8005ee8 <HAL_RCC_OscConfig+0x240>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d0f0      	beq.n	8005e26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e44:	4b28      	ldr	r3, [pc, #160]	; (8005ee8 <HAL_RCC_OscConfig+0x240>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	00db      	lsls	r3, r3, #3
 8005e52:	4925      	ldr	r1, [pc, #148]	; (8005ee8 <HAL_RCC_OscConfig+0x240>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	600b      	str	r3, [r1, #0]
 8005e58:	e015      	b.n	8005e86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e5a:	4b24      	ldr	r3, [pc, #144]	; (8005eec <HAL_RCC_OscConfig+0x244>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e60:	f7fc faaa 	bl	80023b8 <HAL_GetTick>
 8005e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e66:	e008      	b.n	8005e7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e68:	f7fc faa6 	bl	80023b8 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e187      	b.n	800618a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e7a:	4b1b      	ldr	r3, [pc, #108]	; (8005ee8 <HAL_RCC_OscConfig+0x240>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1f0      	bne.n	8005e68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0308 	and.w	r3, r3, #8
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d036      	beq.n	8005f00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d016      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e9a:	4b15      	ldr	r3, [pc, #84]	; (8005ef0 <HAL_RCC_OscConfig+0x248>)
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea0:	f7fc fa8a 	bl	80023b8 <HAL_GetTick>
 8005ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ea6:	e008      	b.n	8005eba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ea8:	f7fc fa86 	bl	80023b8 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e167      	b.n	800618a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eba:	4b0b      	ldr	r3, [pc, #44]	; (8005ee8 <HAL_RCC_OscConfig+0x240>)
 8005ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0f0      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x200>
 8005ec6:	e01b      	b.n	8005f00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ec8:	4b09      	ldr	r3, [pc, #36]	; (8005ef0 <HAL_RCC_OscConfig+0x248>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ece:	f7fc fa73 	bl	80023b8 <HAL_GetTick>
 8005ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ed4:	e00e      	b.n	8005ef4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ed6:	f7fc fa6f 	bl	80023b8 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d907      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e150      	b.n	800618a <HAL_RCC_OscConfig+0x4e2>
 8005ee8:	40023800 	.word	0x40023800
 8005eec:	42470000 	.word	0x42470000
 8005ef0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ef4:	4b88      	ldr	r3, [pc, #544]	; (8006118 <HAL_RCC_OscConfig+0x470>)
 8005ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1ea      	bne.n	8005ed6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0304 	and.w	r3, r3, #4
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 8097 	beq.w	800603c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f12:	4b81      	ldr	r3, [pc, #516]	; (8006118 <HAL_RCC_OscConfig+0x470>)
 8005f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10f      	bne.n	8005f3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f1e:	2300      	movs	r3, #0
 8005f20:	60bb      	str	r3, [r7, #8]
 8005f22:	4b7d      	ldr	r3, [pc, #500]	; (8006118 <HAL_RCC_OscConfig+0x470>)
 8005f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f26:	4a7c      	ldr	r2, [pc, #496]	; (8006118 <HAL_RCC_OscConfig+0x470>)
 8005f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8005f2e:	4b7a      	ldr	r3, [pc, #488]	; (8006118 <HAL_RCC_OscConfig+0x470>)
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f36:	60bb      	str	r3, [r7, #8]
 8005f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f3e:	4b77      	ldr	r3, [pc, #476]	; (800611c <HAL_RCC_OscConfig+0x474>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d118      	bne.n	8005f7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f4a:	4b74      	ldr	r3, [pc, #464]	; (800611c <HAL_RCC_OscConfig+0x474>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a73      	ldr	r2, [pc, #460]	; (800611c <HAL_RCC_OscConfig+0x474>)
 8005f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f56:	f7fc fa2f 	bl	80023b8 <HAL_GetTick>
 8005f5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f5c:	e008      	b.n	8005f70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f5e:	f7fc fa2b 	bl	80023b8 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d901      	bls.n	8005f70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e10c      	b.n	800618a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f70:	4b6a      	ldr	r3, [pc, #424]	; (800611c <HAL_RCC_OscConfig+0x474>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d0f0      	beq.n	8005f5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d106      	bne.n	8005f92 <HAL_RCC_OscConfig+0x2ea>
 8005f84:	4b64      	ldr	r3, [pc, #400]	; (8006118 <HAL_RCC_OscConfig+0x470>)
 8005f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f88:	4a63      	ldr	r2, [pc, #396]	; (8006118 <HAL_RCC_OscConfig+0x470>)
 8005f8a:	f043 0301 	orr.w	r3, r3, #1
 8005f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f90:	e01c      	b.n	8005fcc <HAL_RCC_OscConfig+0x324>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	2b05      	cmp	r3, #5
 8005f98:	d10c      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x30c>
 8005f9a:	4b5f      	ldr	r3, [pc, #380]	; (8006118 <HAL_RCC_OscConfig+0x470>)
 8005f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9e:	4a5e      	ldr	r2, [pc, #376]	; (8006118 <HAL_RCC_OscConfig+0x470>)
 8005fa0:	f043 0304 	orr.w	r3, r3, #4
 8005fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8005fa6:	4b5c      	ldr	r3, [pc, #368]	; (8006118 <HAL_RCC_OscConfig+0x470>)
 8005fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005faa:	4a5b      	ldr	r2, [pc, #364]	; (8006118 <HAL_RCC_OscConfig+0x470>)
 8005fac:	f043 0301 	orr.w	r3, r3, #1
 8005fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8005fb2:	e00b      	b.n	8005fcc <HAL_RCC_OscConfig+0x324>
 8005fb4:	4b58      	ldr	r3, [pc, #352]	; (8006118 <HAL_RCC_OscConfig+0x470>)
 8005fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb8:	4a57      	ldr	r2, [pc, #348]	; (8006118 <HAL_RCC_OscConfig+0x470>)
 8005fba:	f023 0301 	bic.w	r3, r3, #1
 8005fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8005fc0:	4b55      	ldr	r3, [pc, #340]	; (8006118 <HAL_RCC_OscConfig+0x470>)
 8005fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc4:	4a54      	ldr	r2, [pc, #336]	; (8006118 <HAL_RCC_OscConfig+0x470>)
 8005fc6:	f023 0304 	bic.w	r3, r3, #4
 8005fca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d015      	beq.n	8006000 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fd4:	f7fc f9f0 	bl	80023b8 <HAL_GetTick>
 8005fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fda:	e00a      	b.n	8005ff2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fdc:	f7fc f9ec 	bl	80023b8 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e0cb      	b.n	800618a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ff2:	4b49      	ldr	r3, [pc, #292]	; (8006118 <HAL_RCC_OscConfig+0x470>)
 8005ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0ee      	beq.n	8005fdc <HAL_RCC_OscConfig+0x334>
 8005ffe:	e014      	b.n	800602a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006000:	f7fc f9da 	bl	80023b8 <HAL_GetTick>
 8006004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006006:	e00a      	b.n	800601e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006008:	f7fc f9d6 	bl	80023b8 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	f241 3288 	movw	r2, #5000	; 0x1388
 8006016:	4293      	cmp	r3, r2
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e0b5      	b.n	800618a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800601e:	4b3e      	ldr	r3, [pc, #248]	; (8006118 <HAL_RCC_OscConfig+0x470>)
 8006020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1ee      	bne.n	8006008 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800602a:	7dfb      	ldrb	r3, [r7, #23]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d105      	bne.n	800603c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006030:	4b39      	ldr	r3, [pc, #228]	; (8006118 <HAL_RCC_OscConfig+0x470>)
 8006032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006034:	4a38      	ldr	r2, [pc, #224]	; (8006118 <HAL_RCC_OscConfig+0x470>)
 8006036:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800603a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 80a1 	beq.w	8006188 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006046:	4b34      	ldr	r3, [pc, #208]	; (8006118 <HAL_RCC_OscConfig+0x470>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f003 030c 	and.w	r3, r3, #12
 800604e:	2b08      	cmp	r3, #8
 8006050:	d05c      	beq.n	800610c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	2b02      	cmp	r3, #2
 8006058:	d141      	bne.n	80060de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800605a:	4b31      	ldr	r3, [pc, #196]	; (8006120 <HAL_RCC_OscConfig+0x478>)
 800605c:	2200      	movs	r2, #0
 800605e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006060:	f7fc f9aa 	bl	80023b8 <HAL_GetTick>
 8006064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006066:	e008      	b.n	800607a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006068:	f7fc f9a6 	bl	80023b8 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	2b02      	cmp	r3, #2
 8006074:	d901      	bls.n	800607a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e087      	b.n	800618a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800607a:	4b27      	ldr	r3, [pc, #156]	; (8006118 <HAL_RCC_OscConfig+0x470>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1f0      	bne.n	8006068 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	69da      	ldr	r2, [r3, #28]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	431a      	orrs	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006094:	019b      	lsls	r3, r3, #6
 8006096:	431a      	orrs	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609c:	085b      	lsrs	r3, r3, #1
 800609e:	3b01      	subs	r3, #1
 80060a0:	041b      	lsls	r3, r3, #16
 80060a2:	431a      	orrs	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a8:	061b      	lsls	r3, r3, #24
 80060aa:	491b      	ldr	r1, [pc, #108]	; (8006118 <HAL_RCC_OscConfig+0x470>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060b0:	4b1b      	ldr	r3, [pc, #108]	; (8006120 <HAL_RCC_OscConfig+0x478>)
 80060b2:	2201      	movs	r2, #1
 80060b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b6:	f7fc f97f 	bl	80023b8 <HAL_GetTick>
 80060ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060bc:	e008      	b.n	80060d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060be:	f7fc f97b 	bl	80023b8 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d901      	bls.n	80060d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e05c      	b.n	800618a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060d0:	4b11      	ldr	r3, [pc, #68]	; (8006118 <HAL_RCC_OscConfig+0x470>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d0f0      	beq.n	80060be <HAL_RCC_OscConfig+0x416>
 80060dc:	e054      	b.n	8006188 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060de:	4b10      	ldr	r3, [pc, #64]	; (8006120 <HAL_RCC_OscConfig+0x478>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060e4:	f7fc f968 	bl	80023b8 <HAL_GetTick>
 80060e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ea:	e008      	b.n	80060fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060ec:	f7fc f964 	bl	80023b8 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d901      	bls.n	80060fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e045      	b.n	800618a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060fe:	4b06      	ldr	r3, [pc, #24]	; (8006118 <HAL_RCC_OscConfig+0x470>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1f0      	bne.n	80060ec <HAL_RCC_OscConfig+0x444>
 800610a:	e03d      	b.n	8006188 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d107      	bne.n	8006124 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e038      	b.n	800618a <HAL_RCC_OscConfig+0x4e2>
 8006118:	40023800 	.word	0x40023800
 800611c:	40007000 	.word	0x40007000
 8006120:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006124:	4b1b      	ldr	r3, [pc, #108]	; (8006194 <HAL_RCC_OscConfig+0x4ec>)
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d028      	beq.n	8006184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800613c:	429a      	cmp	r2, r3
 800613e:	d121      	bne.n	8006184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800614a:	429a      	cmp	r2, r3
 800614c:	d11a      	bne.n	8006184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006154:	4013      	ands	r3, r2
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800615a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800615c:	4293      	cmp	r3, r2
 800615e:	d111      	bne.n	8006184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616a:	085b      	lsrs	r3, r3, #1
 800616c:	3b01      	subs	r3, #1
 800616e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006170:	429a      	cmp	r2, r3
 8006172:	d107      	bne.n	8006184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006180:	429a      	cmp	r2, r3
 8006182:	d001      	beq.n	8006188 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e000      	b.n	800618a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3718      	adds	r7, #24
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	40023800 	.word	0x40023800

08006198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e0cc      	b.n	8006346 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061ac:	4b68      	ldr	r3, [pc, #416]	; (8006350 <HAL_RCC_ClockConfig+0x1b8>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0307 	and.w	r3, r3, #7
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d90c      	bls.n	80061d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ba:	4b65      	ldr	r3, [pc, #404]	; (8006350 <HAL_RCC_ClockConfig+0x1b8>)
 80061bc:	683a      	ldr	r2, [r7, #0]
 80061be:	b2d2      	uxtb	r2, r2
 80061c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061c2:	4b63      	ldr	r3, [pc, #396]	; (8006350 <HAL_RCC_ClockConfig+0x1b8>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0307 	and.w	r3, r3, #7
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d001      	beq.n	80061d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e0b8      	b.n	8006346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0302 	and.w	r3, r3, #2
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d020      	beq.n	8006222 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d005      	beq.n	80061f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061ec:	4b59      	ldr	r3, [pc, #356]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	4a58      	ldr	r2, [pc, #352]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 80061f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0308 	and.w	r3, r3, #8
 8006200:	2b00      	cmp	r3, #0
 8006202:	d005      	beq.n	8006210 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006204:	4b53      	ldr	r3, [pc, #332]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	4a52      	ldr	r2, [pc, #328]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 800620a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800620e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006210:	4b50      	ldr	r3, [pc, #320]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	494d      	ldr	r1, [pc, #308]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 800621e:	4313      	orrs	r3, r2
 8006220:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b00      	cmp	r3, #0
 800622c:	d044      	beq.n	80062b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d107      	bne.n	8006246 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006236:	4b47      	ldr	r3, [pc, #284]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d119      	bne.n	8006276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e07f      	b.n	8006346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2b02      	cmp	r3, #2
 800624c:	d003      	beq.n	8006256 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006252:	2b03      	cmp	r3, #3
 8006254:	d107      	bne.n	8006266 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006256:	4b3f      	ldr	r3, [pc, #252]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d109      	bne.n	8006276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e06f      	b.n	8006346 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006266:	4b3b      	ldr	r3, [pc, #236]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e067      	b.n	8006346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006276:	4b37      	ldr	r3, [pc, #220]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f023 0203 	bic.w	r2, r3, #3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	4934      	ldr	r1, [pc, #208]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 8006284:	4313      	orrs	r3, r2
 8006286:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006288:	f7fc f896 	bl	80023b8 <HAL_GetTick>
 800628c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800628e:	e00a      	b.n	80062a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006290:	f7fc f892 	bl	80023b8 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	f241 3288 	movw	r2, #5000	; 0x1388
 800629e:	4293      	cmp	r3, r2
 80062a0:	d901      	bls.n	80062a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e04f      	b.n	8006346 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062a6:	4b2b      	ldr	r3, [pc, #172]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f003 020c 	and.w	r2, r3, #12
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d1eb      	bne.n	8006290 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062b8:	4b25      	ldr	r3, [pc, #148]	; (8006350 <HAL_RCC_ClockConfig+0x1b8>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0307 	and.w	r3, r3, #7
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d20c      	bcs.n	80062e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062c6:	4b22      	ldr	r3, [pc, #136]	; (8006350 <HAL_RCC_ClockConfig+0x1b8>)
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ce:	4b20      	ldr	r3, [pc, #128]	; (8006350 <HAL_RCC_ClockConfig+0x1b8>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0307 	and.w	r3, r3, #7
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d001      	beq.n	80062e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e032      	b.n	8006346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0304 	and.w	r3, r3, #4
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d008      	beq.n	80062fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062ec:	4b19      	ldr	r3, [pc, #100]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	4916      	ldr	r1, [pc, #88]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0308 	and.w	r3, r3, #8
 8006306:	2b00      	cmp	r3, #0
 8006308:	d009      	beq.n	800631e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800630a:	4b12      	ldr	r3, [pc, #72]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	490e      	ldr	r1, [pc, #56]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 800631a:	4313      	orrs	r3, r2
 800631c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800631e:	f000 f821 	bl	8006364 <HAL_RCC_GetSysClockFreq>
 8006322:	4602      	mov	r2, r0
 8006324:	4b0b      	ldr	r3, [pc, #44]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	091b      	lsrs	r3, r3, #4
 800632a:	f003 030f 	and.w	r3, r3, #15
 800632e:	490a      	ldr	r1, [pc, #40]	; (8006358 <HAL_RCC_ClockConfig+0x1c0>)
 8006330:	5ccb      	ldrb	r3, [r1, r3]
 8006332:	fa22 f303 	lsr.w	r3, r2, r3
 8006336:	4a09      	ldr	r2, [pc, #36]	; (800635c <HAL_RCC_ClockConfig+0x1c4>)
 8006338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800633a:	4b09      	ldr	r3, [pc, #36]	; (8006360 <HAL_RCC_ClockConfig+0x1c8>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4618      	mov	r0, r3
 8006340:	f7fb fff6 	bl	8002330 <HAL_InitTick>

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	40023c00 	.word	0x40023c00
 8006354:	40023800 	.word	0x40023800
 8006358:	0800a1b4 	.word	0x0800a1b4
 800635c:	20000000 	.word	0x20000000
 8006360:	20000004 	.word	0x20000004

08006364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006368:	b094      	sub	sp, #80	; 0x50
 800636a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800636c:	2300      	movs	r3, #0
 800636e:	647b      	str	r3, [r7, #68]	; 0x44
 8006370:	2300      	movs	r3, #0
 8006372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006374:	2300      	movs	r3, #0
 8006376:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006378:	2300      	movs	r3, #0
 800637a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800637c:	4b79      	ldr	r3, [pc, #484]	; (8006564 <HAL_RCC_GetSysClockFreq+0x200>)
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f003 030c 	and.w	r3, r3, #12
 8006384:	2b08      	cmp	r3, #8
 8006386:	d00d      	beq.n	80063a4 <HAL_RCC_GetSysClockFreq+0x40>
 8006388:	2b08      	cmp	r3, #8
 800638a:	f200 80e1 	bhi.w	8006550 <HAL_RCC_GetSysClockFreq+0x1ec>
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <HAL_RCC_GetSysClockFreq+0x34>
 8006392:	2b04      	cmp	r3, #4
 8006394:	d003      	beq.n	800639e <HAL_RCC_GetSysClockFreq+0x3a>
 8006396:	e0db      	b.n	8006550 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006398:	4b73      	ldr	r3, [pc, #460]	; (8006568 <HAL_RCC_GetSysClockFreq+0x204>)
 800639a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800639c:	e0db      	b.n	8006556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800639e:	4b73      	ldr	r3, [pc, #460]	; (800656c <HAL_RCC_GetSysClockFreq+0x208>)
 80063a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063a2:	e0d8      	b.n	8006556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063a4:	4b6f      	ldr	r3, [pc, #444]	; (8006564 <HAL_RCC_GetSysClockFreq+0x200>)
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063ae:	4b6d      	ldr	r3, [pc, #436]	; (8006564 <HAL_RCC_GetSysClockFreq+0x200>)
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d063      	beq.n	8006482 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063ba:	4b6a      	ldr	r3, [pc, #424]	; (8006564 <HAL_RCC_GetSysClockFreq+0x200>)
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	099b      	lsrs	r3, r3, #6
 80063c0:	2200      	movs	r2, #0
 80063c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80063c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80063c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063cc:	633b      	str	r3, [r7, #48]	; 0x30
 80063ce:	2300      	movs	r3, #0
 80063d0:	637b      	str	r3, [r7, #52]	; 0x34
 80063d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80063d6:	4622      	mov	r2, r4
 80063d8:	462b      	mov	r3, r5
 80063da:	f04f 0000 	mov.w	r0, #0
 80063de:	f04f 0100 	mov.w	r1, #0
 80063e2:	0159      	lsls	r1, r3, #5
 80063e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063e8:	0150      	lsls	r0, r2, #5
 80063ea:	4602      	mov	r2, r0
 80063ec:	460b      	mov	r3, r1
 80063ee:	4621      	mov	r1, r4
 80063f0:	1a51      	subs	r1, r2, r1
 80063f2:	6139      	str	r1, [r7, #16]
 80063f4:	4629      	mov	r1, r5
 80063f6:	eb63 0301 	sbc.w	r3, r3, r1
 80063fa:	617b      	str	r3, [r7, #20]
 80063fc:	f04f 0200 	mov.w	r2, #0
 8006400:	f04f 0300 	mov.w	r3, #0
 8006404:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006408:	4659      	mov	r1, fp
 800640a:	018b      	lsls	r3, r1, #6
 800640c:	4651      	mov	r1, sl
 800640e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006412:	4651      	mov	r1, sl
 8006414:	018a      	lsls	r2, r1, #6
 8006416:	4651      	mov	r1, sl
 8006418:	ebb2 0801 	subs.w	r8, r2, r1
 800641c:	4659      	mov	r1, fp
 800641e:	eb63 0901 	sbc.w	r9, r3, r1
 8006422:	f04f 0200 	mov.w	r2, #0
 8006426:	f04f 0300 	mov.w	r3, #0
 800642a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800642e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006432:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006436:	4690      	mov	r8, r2
 8006438:	4699      	mov	r9, r3
 800643a:	4623      	mov	r3, r4
 800643c:	eb18 0303 	adds.w	r3, r8, r3
 8006440:	60bb      	str	r3, [r7, #8]
 8006442:	462b      	mov	r3, r5
 8006444:	eb49 0303 	adc.w	r3, r9, r3
 8006448:	60fb      	str	r3, [r7, #12]
 800644a:	f04f 0200 	mov.w	r2, #0
 800644e:	f04f 0300 	mov.w	r3, #0
 8006452:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006456:	4629      	mov	r1, r5
 8006458:	024b      	lsls	r3, r1, #9
 800645a:	4621      	mov	r1, r4
 800645c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006460:	4621      	mov	r1, r4
 8006462:	024a      	lsls	r2, r1, #9
 8006464:	4610      	mov	r0, r2
 8006466:	4619      	mov	r1, r3
 8006468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800646a:	2200      	movs	r2, #0
 800646c:	62bb      	str	r3, [r7, #40]	; 0x28
 800646e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006470:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006474:	f7fa fb1e 	bl	8000ab4 <__aeabi_uldivmod>
 8006478:	4602      	mov	r2, r0
 800647a:	460b      	mov	r3, r1
 800647c:	4613      	mov	r3, r2
 800647e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006480:	e058      	b.n	8006534 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006482:	4b38      	ldr	r3, [pc, #224]	; (8006564 <HAL_RCC_GetSysClockFreq+0x200>)
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	099b      	lsrs	r3, r3, #6
 8006488:	2200      	movs	r2, #0
 800648a:	4618      	mov	r0, r3
 800648c:	4611      	mov	r1, r2
 800648e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006492:	623b      	str	r3, [r7, #32]
 8006494:	2300      	movs	r3, #0
 8006496:	627b      	str	r3, [r7, #36]	; 0x24
 8006498:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800649c:	4642      	mov	r2, r8
 800649e:	464b      	mov	r3, r9
 80064a0:	f04f 0000 	mov.w	r0, #0
 80064a4:	f04f 0100 	mov.w	r1, #0
 80064a8:	0159      	lsls	r1, r3, #5
 80064aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064ae:	0150      	lsls	r0, r2, #5
 80064b0:	4602      	mov	r2, r0
 80064b2:	460b      	mov	r3, r1
 80064b4:	4641      	mov	r1, r8
 80064b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80064ba:	4649      	mov	r1, r9
 80064bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80064c0:	f04f 0200 	mov.w	r2, #0
 80064c4:	f04f 0300 	mov.w	r3, #0
 80064c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80064cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80064d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80064d4:	ebb2 040a 	subs.w	r4, r2, sl
 80064d8:	eb63 050b 	sbc.w	r5, r3, fp
 80064dc:	f04f 0200 	mov.w	r2, #0
 80064e0:	f04f 0300 	mov.w	r3, #0
 80064e4:	00eb      	lsls	r3, r5, #3
 80064e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064ea:	00e2      	lsls	r2, r4, #3
 80064ec:	4614      	mov	r4, r2
 80064ee:	461d      	mov	r5, r3
 80064f0:	4643      	mov	r3, r8
 80064f2:	18e3      	adds	r3, r4, r3
 80064f4:	603b      	str	r3, [r7, #0]
 80064f6:	464b      	mov	r3, r9
 80064f8:	eb45 0303 	adc.w	r3, r5, r3
 80064fc:	607b      	str	r3, [r7, #4]
 80064fe:	f04f 0200 	mov.w	r2, #0
 8006502:	f04f 0300 	mov.w	r3, #0
 8006506:	e9d7 4500 	ldrd	r4, r5, [r7]
 800650a:	4629      	mov	r1, r5
 800650c:	028b      	lsls	r3, r1, #10
 800650e:	4621      	mov	r1, r4
 8006510:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006514:	4621      	mov	r1, r4
 8006516:	028a      	lsls	r2, r1, #10
 8006518:	4610      	mov	r0, r2
 800651a:	4619      	mov	r1, r3
 800651c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800651e:	2200      	movs	r2, #0
 8006520:	61bb      	str	r3, [r7, #24]
 8006522:	61fa      	str	r2, [r7, #28]
 8006524:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006528:	f7fa fac4 	bl	8000ab4 <__aeabi_uldivmod>
 800652c:	4602      	mov	r2, r0
 800652e:	460b      	mov	r3, r1
 8006530:	4613      	mov	r3, r2
 8006532:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006534:	4b0b      	ldr	r3, [pc, #44]	; (8006564 <HAL_RCC_GetSysClockFreq+0x200>)
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	0c1b      	lsrs	r3, r3, #16
 800653a:	f003 0303 	and.w	r3, r3, #3
 800653e:	3301      	adds	r3, #1
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006544:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006548:	fbb2 f3f3 	udiv	r3, r2, r3
 800654c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800654e:	e002      	b.n	8006556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006550:	4b05      	ldr	r3, [pc, #20]	; (8006568 <HAL_RCC_GetSysClockFreq+0x204>)
 8006552:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006558:	4618      	mov	r0, r3
 800655a:	3750      	adds	r7, #80	; 0x50
 800655c:	46bd      	mov	sp, r7
 800655e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006562:	bf00      	nop
 8006564:	40023800 	.word	0x40023800
 8006568:	00f42400 	.word	0x00f42400
 800656c:	007a1200 	.word	0x007a1200

08006570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006570:	b480      	push	{r7}
 8006572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006574:	4b03      	ldr	r3, [pc, #12]	; (8006584 <HAL_RCC_GetHCLKFreq+0x14>)
 8006576:	681b      	ldr	r3, [r3, #0]
}
 8006578:	4618      	mov	r0, r3
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	20000000 	.word	0x20000000

08006588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800658c:	f7ff fff0 	bl	8006570 <HAL_RCC_GetHCLKFreq>
 8006590:	4602      	mov	r2, r0
 8006592:	4b05      	ldr	r3, [pc, #20]	; (80065a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	0a9b      	lsrs	r3, r3, #10
 8006598:	f003 0307 	and.w	r3, r3, #7
 800659c:	4903      	ldr	r1, [pc, #12]	; (80065ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800659e:	5ccb      	ldrb	r3, [r1, r3]
 80065a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	40023800 	.word	0x40023800
 80065ac:	0800a1c4 	.word	0x0800a1c4

080065b0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065b8:	2300      	movs	r3, #0
 80065ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d105      	bne.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d038      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80065d8:	4b68      	ldr	r3, [pc, #416]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80065da:	2200      	movs	r2, #0
 80065dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065de:	f7fb feeb 	bl	80023b8 <HAL_GetTick>
 80065e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065e4:	e008      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80065e6:	f7fb fee7 	bl	80023b8 <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d901      	bls.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e0bd      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065f8:	4b61      	ldr	r3, [pc, #388]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1f0      	bne.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	019b      	lsls	r3, r3, #6
 800660e:	431a      	orrs	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	071b      	lsls	r3, r3, #28
 8006616:	495a      	ldr	r1, [pc, #360]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006618:	4313      	orrs	r3, r2
 800661a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800661e:	4b57      	ldr	r3, [pc, #348]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006620:	2201      	movs	r2, #1
 8006622:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006624:	f7fb fec8 	bl	80023b8 <HAL_GetTick>
 8006628:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800662a:	e008      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800662c:	f7fb fec4 	bl	80023b8 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b02      	cmp	r3, #2
 8006638:	d901      	bls.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e09a      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800663e:	4b50      	ldr	r3, [pc, #320]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0f0      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0302 	and.w	r3, r3, #2
 8006652:	2b00      	cmp	r3, #0
 8006654:	f000 8083 	beq.w	800675e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006658:	2300      	movs	r3, #0
 800665a:	60fb      	str	r3, [r7, #12]
 800665c:	4b48      	ldr	r3, [pc, #288]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800665e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006660:	4a47      	ldr	r2, [pc, #284]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006666:	6413      	str	r3, [r2, #64]	; 0x40
 8006668:	4b45      	ldr	r3, [pc, #276]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800666a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006670:	60fb      	str	r3, [r7, #12]
 8006672:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006674:	4b43      	ldr	r3, [pc, #268]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a42      	ldr	r2, [pc, #264]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800667a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800667e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006680:	f7fb fe9a 	bl	80023b8 <HAL_GetTick>
 8006684:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006686:	e008      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006688:	f7fb fe96 	bl	80023b8 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	2b02      	cmp	r3, #2
 8006694:	d901      	bls.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e06c      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800669a:	4b3a      	ldr	r3, [pc, #232]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d0f0      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80066a6:	4b36      	ldr	r3, [pc, #216]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ae:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d02f      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d028      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066c4:	4b2e      	ldr	r3, [pc, #184]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066cc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80066ce:	4b2e      	ldr	r3, [pc, #184]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80066d0:	2201      	movs	r2, #1
 80066d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80066d4:	4b2c      	ldr	r3, [pc, #176]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80066d6:	2200      	movs	r2, #0
 80066d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80066da:	4a29      	ldr	r2, [pc, #164]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80066e0:	4b27      	ldr	r3, [pc, #156]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e4:	f003 0301 	and.w	r3, r3, #1
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d114      	bne.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80066ec:	f7fb fe64 	bl	80023b8 <HAL_GetTick>
 80066f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066f2:	e00a      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066f4:	f7fb fe60 	bl	80023b8 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006702:	4293      	cmp	r3, r2
 8006704:	d901      	bls.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e034      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800670a:	4b1d      	ldr	r3, [pc, #116]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800670c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d0ee      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800671e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006722:	d10d      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006724:	4b16      	ldr	r3, [pc, #88]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006738:	4911      	ldr	r1, [pc, #68]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800673a:	4313      	orrs	r3, r2
 800673c:	608b      	str	r3, [r1, #8]
 800673e:	e005      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006740:	4b0f      	ldr	r3, [pc, #60]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	4a0e      	ldr	r2, [pc, #56]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006746:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800674a:	6093      	str	r3, [r2, #8]
 800674c:	4b0c      	ldr	r3, [pc, #48]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800674e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006758:	4909      	ldr	r1, [pc, #36]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800675a:	4313      	orrs	r3, r2
 800675c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0308 	and.w	r3, r3, #8
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	7d1a      	ldrb	r2, [r3, #20]
 800676e:	4b07      	ldr	r3, [pc, #28]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006770:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3718      	adds	r7, #24
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	42470068 	.word	0x42470068
 8006780:	40023800 	.word	0x40023800
 8006784:	40007000 	.word	0x40007000
 8006788:	42470e40 	.word	0x42470e40
 800678c:	424711e0 	.word	0x424711e0

08006790 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006798:	2300      	movs	r3, #0
 800679a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800679c:	2300      	movs	r3, #0
 800679e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d140      	bne.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80067ae:	4b24      	ldr	r3, [pc, #144]	; (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067b6:	60fb      	str	r3, [r7, #12]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d005      	beq.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d131      	bne.n	8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80067c4:	4b1f      	ldr	r3, [pc, #124]	; (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80067c6:	617b      	str	r3, [r7, #20]
          break;
 80067c8:	e031      	b.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80067ca:	4b1d      	ldr	r3, [pc, #116]	; (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067d6:	d109      	bne.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80067d8:	4b19      	ldr	r3, [pc, #100]	; (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80067da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067e2:	4a19      	ldr	r2, [pc, #100]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80067e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e8:	613b      	str	r3, [r7, #16]
 80067ea:	e008      	b.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80067ec:	4b14      	ldr	r3, [pc, #80]	; (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80067ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067f6:	4a15      	ldr	r2, [pc, #84]	; (800684c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80067f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067fc:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80067fe:	4b10      	ldr	r3, [pc, #64]	; (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006804:	099b      	lsrs	r3, r3, #6
 8006806:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	fb02 f303 	mul.w	r3, r2, r3
 8006810:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006812:	4b0b      	ldr	r3, [pc, #44]	; (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006818:	0f1b      	lsrs	r3, r3, #28
 800681a:	f003 0307 	and.w	r3, r3, #7
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	fbb2 f3f3 	udiv	r3, r2, r3
 8006824:	617b      	str	r3, [r7, #20]
          break;
 8006826:	e002      	b.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006828:	2300      	movs	r3, #0
 800682a:	617b      	str	r3, [r7, #20]
          break;
 800682c:	bf00      	nop
        }
      }
      break;
 800682e:	bf00      	nop
    }
  }
  return frequency;
 8006830:	697b      	ldr	r3, [r7, #20]
}
 8006832:	4618      	mov	r0, r3
 8006834:	371c      	adds	r7, #28
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	40023800 	.word	0x40023800
 8006844:	00bb8000 	.word	0x00bb8000
 8006848:	007a1200 	.word	0x007a1200
 800684c:	00f42400 	.word	0x00f42400

08006850 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d101      	bne.n	8006862 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e07b      	b.n	800695a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006866:	2b00      	cmp	r3, #0
 8006868:	d108      	bne.n	800687c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006872:	d009      	beq.n	8006888 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	61da      	str	r2, [r3, #28]
 800687a:	e005      	b.n	8006888 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d106      	bne.n	80068a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7fb fc0c 	bl	80020c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80068d0:	431a      	orrs	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068da:	431a      	orrs	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	f003 0302 	and.w	r3, r3, #2
 80068e4:	431a      	orrs	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	431a      	orrs	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068f8:	431a      	orrs	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	69db      	ldr	r3, [r3, #28]
 80068fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006902:	431a      	orrs	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800690c:	ea42 0103 	orr.w	r1, r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006914:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	430a      	orrs	r2, r1
 800691e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	0c1b      	lsrs	r3, r3, #16
 8006926:	f003 0104 	and.w	r1, r3, #4
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692e:	f003 0210 	and.w	r2, r3, #16
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	69da      	ldr	r2, [r3, #28]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006948:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006962:	b084      	sub	sp, #16
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	f107 001c 	add.w	r0, r7, #28
 8006970:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006976:	2b01      	cmp	r3, #1
 8006978:	d122      	bne.n	80069c0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800698e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80069a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d105      	bne.n	80069b4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 f9bf 	bl	8006d38 <USB_CoreReset>
 80069ba:	4603      	mov	r3, r0
 80069bc:	73fb      	strb	r3, [r7, #15]
 80069be:	e01a      	b.n	80069f6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f9b3 	bl	8006d38 <USB_CoreReset>
 80069d2:	4603      	mov	r3, r0
 80069d4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80069d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d106      	bne.n	80069ea <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	639a      	str	r2, [r3, #56]	; 0x38
 80069e8:	e005      	b.n	80069f6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80069f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d10b      	bne.n	8006a14 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f043 0206 	orr.w	r2, r3, #6
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f043 0220 	orr.w	r2, r3, #32
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a20:	b004      	add	sp, #16
 8006a22:	4770      	bx	lr

08006a24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f043 0201 	orr.w	r2, r3, #1
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b083      	sub	sp, #12
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f023 0201 	bic.w	r2, r3, #1
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	460b      	mov	r3, r1
 8006a72:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a84:	78fb      	ldrb	r3, [r7, #3]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d115      	bne.n	8006ab6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a96:	2001      	movs	r0, #1
 8006a98:	f7fb fc9a 	bl	80023d0 <HAL_Delay>
      ms++;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f939 	bl	8006d1a <USB_GetMode>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d01e      	beq.n	8006aec <USB_SetCurrentMode+0x84>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2b31      	cmp	r3, #49	; 0x31
 8006ab2:	d9f0      	bls.n	8006a96 <USB_SetCurrentMode+0x2e>
 8006ab4:	e01a      	b.n	8006aec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ab6:	78fb      	ldrb	r3, [r7, #3]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d115      	bne.n	8006ae8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ac8:	2001      	movs	r0, #1
 8006aca:	f7fb fc81 	bl	80023d0 <HAL_Delay>
      ms++;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f920 	bl	8006d1a <USB_GetMode>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d005      	beq.n	8006aec <USB_SetCurrentMode+0x84>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2b31      	cmp	r3, #49	; 0x31
 8006ae4:	d9f0      	bls.n	8006ac8 <USB_SetCurrentMode+0x60>
 8006ae6:	e001      	b.n	8006aec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e005      	b.n	8006af8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2b32      	cmp	r3, #50	; 0x32
 8006af0:	d101      	bne.n	8006af6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e000      	b.n	8006af8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	3301      	adds	r3, #1
 8006b12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	4a13      	ldr	r2, [pc, #76]	; (8006b64 <USB_FlushTxFifo+0x64>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d901      	bls.n	8006b20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e01b      	b.n	8006b58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	daf2      	bge.n	8006b0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	019b      	lsls	r3, r3, #6
 8006b30:	f043 0220 	orr.w	r2, r3, #32
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	4a08      	ldr	r2, [pc, #32]	; (8006b64 <USB_FlushTxFifo+0x64>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d901      	bls.n	8006b4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e006      	b.n	8006b58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	f003 0320 	and.w	r3, r3, #32
 8006b52:	2b20      	cmp	r3, #32
 8006b54:	d0f0      	beq.n	8006b38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3714      	adds	r7, #20
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	00030d40 	.word	0x00030d40

08006b68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	3301      	adds	r3, #1
 8006b78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	4a11      	ldr	r2, [pc, #68]	; (8006bc4 <USB_FlushRxFifo+0x5c>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d901      	bls.n	8006b86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e018      	b.n	8006bb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	daf2      	bge.n	8006b74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2210      	movs	r2, #16
 8006b96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	4a08      	ldr	r2, [pc, #32]	; (8006bc4 <USB_FlushRxFifo+0x5c>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d901      	bls.n	8006baa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e006      	b.n	8006bb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	f003 0310 	and.w	r3, r3, #16
 8006bb2:	2b10      	cmp	r3, #16
 8006bb4:	d0f0      	beq.n	8006b98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3714      	adds	r7, #20
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr
 8006bc4:	00030d40 	.word	0x00030d40

08006bc8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b089      	sub	sp, #36	; 0x24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	71fb      	strb	r3, [r7, #7]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006be6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d123      	bne.n	8006c36 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006bee:	88bb      	ldrh	r3, [r7, #4]
 8006bf0:	3303      	adds	r3, #3
 8006bf2:	089b      	lsrs	r3, r3, #2
 8006bf4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	61bb      	str	r3, [r7, #24]
 8006bfa:	e018      	b.n	8006c2e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006bfc:	79fb      	ldrb	r3, [r7, #7]
 8006bfe:	031a      	lsls	r2, r3, #12
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c08:	461a      	mov	r2, r3
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	3301      	adds	r3, #1
 8006c14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	3301      	adds	r3, #1
 8006c26:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	61bb      	str	r3, [r7, #24]
 8006c2e:	69ba      	ldr	r2, [r7, #24]
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d3e2      	bcc.n	8006bfc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3724      	adds	r7, #36	; 0x24
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b08b      	sub	sp, #44	; 0x2c
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006c5a:	88fb      	ldrh	r3, [r7, #6]
 8006c5c:	089b      	lsrs	r3, r3, #2
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006c62:	88fb      	ldrh	r3, [r7, #6]
 8006c64:	f003 0303 	and.w	r3, r3, #3
 8006c68:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	623b      	str	r3, [r7, #32]
 8006c6e:	e014      	b.n	8006c9a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7e:	3301      	adds	r3, #1
 8006c80:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	3301      	adds	r3, #1
 8006c86:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	3301      	adds	r3, #1
 8006c92:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	3301      	adds	r3, #1
 8006c98:	623b      	str	r3, [r7, #32]
 8006c9a:	6a3a      	ldr	r2, [r7, #32]
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d3e6      	bcc.n	8006c70 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006ca2:	8bfb      	ldrh	r3, [r7, #30]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d01e      	beq.n	8006ce6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	f107 0310 	add.w	r3, r7, #16
 8006cb8:	6812      	ldr	r2, [r2, #0]
 8006cba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	00db      	lsls	r3, r3, #3
 8006cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	701a      	strb	r2, [r3, #0]
      i++;
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	623b      	str	r3, [r7, #32]
      pDest++;
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006cda:	8bfb      	ldrh	r3, [r7, #30]
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006ce0:	8bfb      	ldrh	r3, [r7, #30]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1ea      	bne.n	8006cbc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	372c      	adds	r7, #44	; 0x2c
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	695b      	ldr	r3, [r3, #20]
 8006d00:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	4013      	ands	r3, r2
 8006d0a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	f003 0301 	and.w	r3, r3, #1
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
	...

08006d38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d40:	2300      	movs	r3, #0
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	3301      	adds	r3, #1
 8006d48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	4a13      	ldr	r2, [pc, #76]	; (8006d9c <USB_CoreReset+0x64>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d901      	bls.n	8006d56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e01b      	b.n	8006d8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	daf2      	bge.n	8006d44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	f043 0201 	orr.w	r2, r3, #1
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	3301      	adds	r3, #1
 8006d72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	4a09      	ldr	r2, [pc, #36]	; (8006d9c <USB_CoreReset+0x64>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d901      	bls.n	8006d80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e006      	b.n	8006d8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d0f0      	beq.n	8006d6e <USB_CoreReset+0x36>

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	00030d40 	.word	0x00030d40

08006da0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006da0:	b084      	sub	sp, #16
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b086      	sub	sp, #24
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006dae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d018      	beq.n	8006e28 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d10a      	bne.n	8006e12 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e0a:	f043 0304 	orr.w	r3, r3, #4
 8006e0e:	6013      	str	r3, [r2, #0]
 8006e10:	e014      	b.n	8006e3c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e20:	f023 0304 	bic.w	r3, r3, #4
 8006e24:	6013      	str	r3, [r2, #0]
 8006e26:	e009      	b.n	8006e3c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e36:	f023 0304 	bic.w	r3, r3, #4
 8006e3a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e3c:	2110      	movs	r1, #16
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7ff fe5e 	bl	8006b00 <USB_FlushTxFifo>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7ff fe8a 	bl	8006b68 <USB_FlushRxFifo>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006e5e:	2300      	movs	r3, #0
 8006e60:	613b      	str	r3, [r7, #16]
 8006e62:	e015      	b.n	8006e90 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e70:	461a      	mov	r2, r3
 8006e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e76:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e84:	461a      	mov	r2, r3
 8006e86:	2300      	movs	r3, #0
 8006e88:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	613b      	str	r3, [r7, #16]
 8006e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d3e5      	bcc.n	8006e64 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ea4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00b      	beq.n	8006eca <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006eb8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a13      	ldr	r2, [pc, #76]	; (8006f0c <USB_HostInit+0x16c>)
 8006ebe:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a13      	ldr	r2, [pc, #76]	; (8006f10 <USB_HostInit+0x170>)
 8006ec4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006ec8:	e009      	b.n	8006ede <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2280      	movs	r2, #128	; 0x80
 8006ece:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a10      	ldr	r2, [pc, #64]	; (8006f14 <USB_HostInit+0x174>)
 8006ed4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a0f      	ldr	r2, [pc, #60]	; (8006f18 <USB_HostInit+0x178>)
 8006eda:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d105      	bne.n	8006ef0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	f043 0210 	orr.w	r2, r3, #16
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	699a      	ldr	r2, [r3, #24]
 8006ef4:	4b09      	ldr	r3, [pc, #36]	; (8006f1c <USB_HostInit+0x17c>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3718      	adds	r7, #24
 8006f02:	46bd      	mov	sp, r7
 8006f04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f08:	b004      	add	sp, #16
 8006f0a:	4770      	bx	lr
 8006f0c:	01000200 	.word	0x01000200
 8006f10:	00e00300 	.word	0x00e00300
 8006f14:	00600080 	.word	0x00600080
 8006f18:	004000e0 	.word	0x004000e0
 8006f1c:	a3200008 	.word	0xa3200008

08006f20 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	460b      	mov	r3, r1
 8006f2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f3e:	f023 0303 	bic.w	r3, r3, #3
 8006f42:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	78fb      	ldrb	r3, [r7, #3]
 8006f4e:	f003 0303 	and.w	r3, r3, #3
 8006f52:	68f9      	ldr	r1, [r7, #12]
 8006f54:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006f5c:	78fb      	ldrb	r3, [r7, #3]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d107      	bne.n	8006f72 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f68:	461a      	mov	r2, r3
 8006f6a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006f6e:	6053      	str	r3, [r2, #4]
 8006f70:	e009      	b.n	8006f86 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006f72:	78fb      	ldrb	r3, [r7, #3]
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d106      	bne.n	8006f86 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f241 7370 	movw	r3, #6000	; 0x1770
 8006f84:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006fb4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fc2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006fc4:	2064      	movs	r0, #100	; 0x64
 8006fc6:	f7fb fa03 	bl	80023d0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006fd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fd6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006fd8:	200a      	movs	r0, #10
 8006fda:	f7fb f9f9 	bl	80023d0 <HAL_Delay>

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800700c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d109      	bne.n	800702c <USB_DriveVbus+0x44>
 8007018:	78fb      	ldrb	r3, [r7, #3]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d106      	bne.n	800702c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007026:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800702a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007036:	d109      	bne.n	800704c <USB_DriveVbus+0x64>
 8007038:	78fb      	ldrb	r3, [r7, #3]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d106      	bne.n	800704c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007046:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800704a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr

0800705a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800705a:	b480      	push	{r7}
 800705c:	b085      	sub	sp, #20
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007066:	2300      	movs	r3, #0
 8007068:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	0c5b      	lsrs	r3, r3, #17
 8007078:	f003 0303 	and.w	r3, r3, #3
}
 800707c:	4618      	mov	r0, r3
 800707e:	3714      	adds	r7, #20
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	b29b      	uxth	r3, r3
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
	...

080070ac <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b088      	sub	sp, #32
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	4608      	mov	r0, r1
 80070b6:	4611      	mov	r1, r2
 80070b8:	461a      	mov	r2, r3
 80070ba:	4603      	mov	r3, r0
 80070bc:	70fb      	strb	r3, [r7, #3]
 80070be:	460b      	mov	r3, r1
 80070c0:	70bb      	strb	r3, [r7, #2]
 80070c2:	4613      	mov	r3, r2
 80070c4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80070ce:	78fb      	ldrb	r3, [r7, #3]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070da:	461a      	mov	r2, r3
 80070dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070e0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80070e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d87e      	bhi.n	80071e8 <USB_HC_Init+0x13c>
 80070ea:	a201      	add	r2, pc, #4	; (adr r2, 80070f0 <USB_HC_Init+0x44>)
 80070ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f0:	08007101 	.word	0x08007101
 80070f4:	080071ab 	.word	0x080071ab
 80070f8:	08007101 	.word	0x08007101
 80070fc:	0800716d 	.word	0x0800716d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007100:	78fb      	ldrb	r3, [r7, #3]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	4413      	add	r3, r2
 8007108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800710c:	461a      	mov	r2, r3
 800710e:	f240 439d 	movw	r3, #1181	; 0x49d
 8007112:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007114:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007118:	2b00      	cmp	r3, #0
 800711a:	da10      	bge.n	800713e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800711c:	78fb      	ldrb	r3, [r7, #3]
 800711e:	015a      	lsls	r2, r3, #5
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	4413      	add	r3, r2
 8007124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	78fa      	ldrb	r2, [r7, #3]
 800712c:	0151      	lsls	r1, r2, #5
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	440a      	add	r2, r1
 8007132:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800713a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800713c:	e057      	b.n	80071ee <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007146:	2b00      	cmp	r3, #0
 8007148:	d051      	beq.n	80071ee <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800714a:	78fb      	ldrb	r3, [r7, #3]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	4413      	add	r3, r2
 8007152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	78fa      	ldrb	r2, [r7, #3]
 800715a:	0151      	lsls	r1, r2, #5
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	440a      	add	r2, r1
 8007160:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007164:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007168:	60d3      	str	r3, [r2, #12]
      break;
 800716a:	e040      	b.n	80071ee <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800716c:	78fb      	ldrb	r3, [r7, #3]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	4413      	add	r3, r2
 8007174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007178:	461a      	mov	r2, r3
 800717a:	f240 639d 	movw	r3, #1693	; 0x69d
 800717e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007180:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007184:	2b00      	cmp	r3, #0
 8007186:	da34      	bge.n	80071f2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007188:	78fb      	ldrb	r3, [r7, #3]
 800718a:	015a      	lsls	r2, r3, #5
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	4413      	add	r3, r2
 8007190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	78fa      	ldrb	r2, [r7, #3]
 8007198:	0151      	lsls	r1, r2, #5
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	440a      	add	r2, r1
 800719e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071a6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80071a8:	e023      	b.n	80071f2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80071aa:	78fb      	ldrb	r3, [r7, #3]
 80071ac:	015a      	lsls	r2, r3, #5
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071b6:	461a      	mov	r2, r3
 80071b8:	f240 2325 	movw	r3, #549	; 0x225
 80071bc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80071be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	da17      	bge.n	80071f6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80071c6:	78fb      	ldrb	r3, [r7, #3]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	78fa      	ldrb	r2, [r7, #3]
 80071d6:	0151      	lsls	r1, r2, #5
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	440a      	add	r2, r1
 80071dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071e0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80071e4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80071e6:	e006      	b.n	80071f6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	77fb      	strb	r3, [r7, #31]
      break;
 80071ec:	e004      	b.n	80071f8 <USB_HC_Init+0x14c>
      break;
 80071ee:	bf00      	nop
 80071f0:	e002      	b.n	80071f8 <USB_HC_Init+0x14c>
      break;
 80071f2:	bf00      	nop
 80071f4:	e000      	b.n	80071f8 <USB_HC_Init+0x14c>
      break;
 80071f6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80071f8:	78fb      	ldrb	r3, [r7, #3]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	78fa      	ldrb	r2, [r7, #3]
 8007208:	0151      	lsls	r1, r2, #5
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	440a      	add	r2, r1
 800720e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007212:	f043 0302 	orr.w	r3, r3, #2
 8007216:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800721e:	699a      	ldr	r2, [r3, #24]
 8007220:	78fb      	ldrb	r3, [r7, #3]
 8007222:	f003 030f 	and.w	r3, r3, #15
 8007226:	2101      	movs	r1, #1
 8007228:	fa01 f303 	lsl.w	r3, r1, r3
 800722c:	6939      	ldr	r1, [r7, #16]
 800722e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007232:	4313      	orrs	r3, r2
 8007234:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007242:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007246:	2b00      	cmp	r3, #0
 8007248:	da03      	bge.n	8007252 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800724a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800724e:	61bb      	str	r3, [r7, #24]
 8007250:	e001      	b.n	8007256 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007252:	2300      	movs	r3, #0
 8007254:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7ff feff 	bl	800705a <USB_GetHostSpeed>
 800725c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800725e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007262:	2b02      	cmp	r3, #2
 8007264:	d106      	bne.n	8007274 <USB_HC_Init+0x1c8>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2b02      	cmp	r3, #2
 800726a:	d003      	beq.n	8007274 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800726c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007270:	617b      	str	r3, [r7, #20]
 8007272:	e001      	b.n	8007278 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007274:	2300      	movs	r3, #0
 8007276:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007278:	787b      	ldrb	r3, [r7, #1]
 800727a:	059b      	lsls	r3, r3, #22
 800727c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007280:	78bb      	ldrb	r3, [r7, #2]
 8007282:	02db      	lsls	r3, r3, #11
 8007284:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007288:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800728a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800728e:	049b      	lsls	r3, r3, #18
 8007290:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007294:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007296:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007298:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800729c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80072a2:	78fb      	ldrb	r3, [r7, #3]
 80072a4:	0159      	lsls	r1, r3, #5
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	440b      	add	r3, r1
 80072aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ae:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80072b4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80072b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80072ba:	2b03      	cmp	r3, #3
 80072bc:	d003      	beq.n	80072c6 <USB_HC_Init+0x21a>
 80072be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d10f      	bne.n	80072e6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80072c6:	78fb      	ldrb	r3, [r7, #3]
 80072c8:	015a      	lsls	r2, r3, #5
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	4413      	add	r3, r2
 80072ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	78fa      	ldrb	r2, [r7, #3]
 80072d6:	0151      	lsls	r1, r2, #5
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	440a      	add	r2, r1
 80072dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072e4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80072e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3720      	adds	r7, #32
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b08c      	sub	sp, #48	; 0x30
 80072f4:	af02      	add	r7, sp, #8
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	4613      	mov	r3, r2
 80072fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	785b      	ldrb	r3, [r3, #1]
 8007306:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800730c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007316:	2b00      	cmp	r3, #0
 8007318:	d02d      	beq.n	8007376 <USB_HC_StartXfer+0x86>
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	791b      	ldrb	r3, [r3, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d129      	bne.n	8007376 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007322:	79fb      	ldrb	r3, [r7, #7]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d117      	bne.n	8007358 <USB_HC_StartXfer+0x68>
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	79db      	ldrb	r3, [r3, #7]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d003      	beq.n	8007338 <USB_HC_StartXfer+0x48>
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	79db      	ldrb	r3, [r3, #7]
 8007334:	2b02      	cmp	r3, #2
 8007336:	d10f      	bne.n	8007358 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	6a3b      	ldr	r3, [r7, #32]
 800733e:	4413      	add	r3, r2
 8007340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	69fa      	ldr	r2, [r7, #28]
 8007348:	0151      	lsls	r1, r2, #5
 800734a:	6a3a      	ldr	r2, [r7, #32]
 800734c:	440a      	add	r2, r1
 800734e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007356:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007358:	79fb      	ldrb	r3, [r7, #7]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10b      	bne.n	8007376 <USB_HC_StartXfer+0x86>
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	795b      	ldrb	r3, [r3, #5]
 8007362:	2b01      	cmp	r3, #1
 8007364:	d107      	bne.n	8007376 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	785b      	ldrb	r3, [r3, #1]
 800736a:	4619      	mov	r1, r3
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f000 fa0f 	bl	8007790 <USB_DoPing>
      return HAL_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	e0f8      	b.n	8007568 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d018      	beq.n	80073b0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	8912      	ldrh	r2, [r2, #8]
 8007386:	4413      	add	r3, r2
 8007388:	3b01      	subs	r3, #1
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	8912      	ldrh	r2, [r2, #8]
 800738e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007392:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007394:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007396:	8b7b      	ldrh	r3, [r7, #26]
 8007398:	429a      	cmp	r2, r3
 800739a:	d90b      	bls.n	80073b4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800739c:	8b7b      	ldrh	r3, [r7, #26]
 800739e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80073a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	8912      	ldrh	r2, [r2, #8]
 80073a6:	fb03 f202 	mul.w	r2, r3, r2
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	611a      	str	r2, [r3, #16]
 80073ae:	e001      	b.n	80073b4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80073b0:	2301      	movs	r3, #1
 80073b2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	78db      	ldrb	r3, [r3, #3]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d007      	beq.n	80073cc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80073bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	8912      	ldrh	r2, [r2, #8]
 80073c2:	fb03 f202 	mul.w	r2, r3, r2
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	611a      	str	r2, [r3, #16]
 80073ca:	e003      	b.n	80073d4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	695a      	ldr	r2, [r3, #20]
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80073dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80073de:	04d9      	lsls	r1, r3, #19
 80073e0:	4b63      	ldr	r3, [pc, #396]	; (8007570 <USB_HC_StartXfer+0x280>)
 80073e2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80073e4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	7a9b      	ldrb	r3, [r3, #10]
 80073ea:	075b      	lsls	r3, r3, #29
 80073ec:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80073f0:	69f9      	ldr	r1, [r7, #28]
 80073f2:	0148      	lsls	r0, r1, #5
 80073f4:	6a39      	ldr	r1, [r7, #32]
 80073f6:	4401      	add	r1, r0
 80073f8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80073fc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80073fe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007400:	79fb      	ldrb	r3, [r7, #7]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d009      	beq.n	800741a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	68d9      	ldr	r1, [r3, #12]
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	015a      	lsls	r2, r3, #5
 800740e:	6a3b      	ldr	r3, [r7, #32]
 8007410:	4413      	add	r3, r2
 8007412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007416:	460a      	mov	r2, r1
 8007418:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	2b00      	cmp	r3, #0
 8007428:	bf0c      	ite	eq
 800742a:	2301      	moveq	r3, #1
 800742c:	2300      	movne	r3, #0
 800742e:	b2db      	uxtb	r3, r3
 8007430:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	015a      	lsls	r2, r3, #5
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	4413      	add	r3, r2
 800743a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	69fa      	ldr	r2, [r7, #28]
 8007442:	0151      	lsls	r1, r2, #5
 8007444:	6a3a      	ldr	r2, [r7, #32]
 8007446:	440a      	add	r2, r1
 8007448:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800744c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007450:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	015a      	lsls	r2, r3, #5
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	4413      	add	r3, r2
 800745a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	7e7b      	ldrb	r3, [r7, #25]
 8007462:	075b      	lsls	r3, r3, #29
 8007464:	69f9      	ldr	r1, [r7, #28]
 8007466:	0148      	lsls	r0, r1, #5
 8007468:	6a39      	ldr	r1, [r7, #32]
 800746a:	4401      	add	r1, r0
 800746c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007470:	4313      	orrs	r3, r2
 8007472:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	6a3b      	ldr	r3, [r7, #32]
 800747a:	4413      	add	r3, r2
 800747c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800748a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	78db      	ldrb	r3, [r3, #3]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d004      	beq.n	800749e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800749a:	613b      	str	r3, [r7, #16]
 800749c:	e003      	b.n	80074a6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074a4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074ac:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	6a3b      	ldr	r3, [r7, #32]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ba:	461a      	mov	r2, r3
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80074c0:	79fb      	ldrb	r3, [r7, #7]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80074c6:	2300      	movs	r3, #0
 80074c8:	e04e      	b.n	8007568 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	78db      	ldrb	r3, [r3, #3]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d149      	bne.n	8007566 <USB_HC_StartXfer+0x276>
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d045      	beq.n	8007566 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	79db      	ldrb	r3, [r3, #7]
 80074de:	2b03      	cmp	r3, #3
 80074e0:	d830      	bhi.n	8007544 <USB_HC_StartXfer+0x254>
 80074e2:	a201      	add	r2, pc, #4	; (adr r2, 80074e8 <USB_HC_StartXfer+0x1f8>)
 80074e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e8:	080074f9 	.word	0x080074f9
 80074ec:	0800751d 	.word	0x0800751d
 80074f0:	080074f9 	.word	0x080074f9
 80074f4:	0800751d 	.word	0x0800751d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	695b      	ldr	r3, [r3, #20]
 80074fc:	3303      	adds	r3, #3
 80074fe:	089b      	lsrs	r3, r3, #2
 8007500:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007502:	8afa      	ldrh	r2, [r7, #22]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007508:	b29b      	uxth	r3, r3
 800750a:	429a      	cmp	r2, r3
 800750c:	d91c      	bls.n	8007548 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	f043 0220 	orr.w	r2, r3, #32
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	619a      	str	r2, [r3, #24]
        }
        break;
 800751a:	e015      	b.n	8007548 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	3303      	adds	r3, #3
 8007522:	089b      	lsrs	r3, r3, #2
 8007524:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007526:	8afa      	ldrh	r2, [r7, #22]
 8007528:	6a3b      	ldr	r3, [r7, #32]
 800752a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	b29b      	uxth	r3, r3
 8007532:	429a      	cmp	r2, r3
 8007534:	d90a      	bls.n	800754c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	619a      	str	r2, [r3, #24]
        }
        break;
 8007542:	e003      	b.n	800754c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007544:	bf00      	nop
 8007546:	e002      	b.n	800754e <USB_HC_StartXfer+0x25e>
        break;
 8007548:	bf00      	nop
 800754a:	e000      	b.n	800754e <USB_HC_StartXfer+0x25e>
        break;
 800754c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	68d9      	ldr	r1, [r3, #12]
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	785a      	ldrb	r2, [r3, #1]
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	b29b      	uxth	r3, r3
 800755c:	2000      	movs	r0, #0
 800755e:	9000      	str	r0, [sp, #0]
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f7ff fb31 	bl	8006bc8 <USB_WritePacket>
  }

  return HAL_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3728      	adds	r7, #40	; 0x28
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	1ff80000 	.word	0x1ff80000

08007574 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	b29b      	uxth	r3, r3
}
 800758a:	4618      	mov	r0, r3
 800758c:	3714      	adds	r7, #20
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007596:	b480      	push	{r7}
 8007598:	b089      	sub	sp, #36	; 0x24
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	460b      	mov	r3, r1
 80075a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80075a6:	78fb      	ldrb	r3, [r7, #3]
 80075a8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80075aa:	2300      	movs	r3, #0
 80075ac:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	015a      	lsls	r2, r3, #5
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	4413      	add	r3, r2
 80075b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	0c9b      	lsrs	r3, r3, #18
 80075be:	f003 0303 	and.w	r3, r3, #3
 80075c2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	015a      	lsls	r2, r3, #5
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	4413      	add	r3, r2
 80075cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	0fdb      	lsrs	r3, r3, #31
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f003 0320 	and.w	r3, r3, #32
 80075e2:	2b20      	cmp	r3, #32
 80075e4:	d104      	bne.n	80075f0 <USB_HC_Halt+0x5a>
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d101      	bne.n	80075f0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80075ec:	2300      	movs	r3, #0
 80075ee:	e0c8      	b.n	8007782 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <USB_HC_Halt+0x66>
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d163      	bne.n	80076c4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	015a      	lsls	r2, r3, #5
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	4413      	add	r3, r2
 8007604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	69ba      	ldr	r2, [r7, #24]
 800760c:	0151      	lsls	r1, r2, #5
 800760e:	69fa      	ldr	r2, [r7, #28]
 8007610:	440a      	add	r2, r1
 8007612:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007616:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800761a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f003 0320 	and.w	r3, r3, #32
 8007624:	2b00      	cmp	r3, #0
 8007626:	f040 80ab 	bne.w	8007780 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d133      	bne.n	800769e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	015a      	lsls	r2, r3, #5
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	4413      	add	r3, r2
 800763e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	69ba      	ldr	r2, [r7, #24]
 8007646:	0151      	lsls	r1, r2, #5
 8007648:	69fa      	ldr	r2, [r7, #28]
 800764a:	440a      	add	r2, r1
 800764c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007650:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007654:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	4413      	add	r3, r2
 800765e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	69ba      	ldr	r2, [r7, #24]
 8007666:	0151      	lsls	r1, r2, #5
 8007668:	69fa      	ldr	r2, [r7, #28]
 800766a:	440a      	add	r2, r1
 800766c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007670:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007674:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	3301      	adds	r3, #1
 800767a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007682:	d81d      	bhi.n	80076c0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	4413      	add	r3, r2
 800768c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007696:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800769a:	d0ec      	beq.n	8007676 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800769c:	e070      	b.n	8007780 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	015a      	lsls	r2, r3, #5
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	69ba      	ldr	r2, [r7, #24]
 80076ae:	0151      	lsls	r1, r2, #5
 80076b0:	69fa      	ldr	r2, [r7, #28]
 80076b2:	440a      	add	r2, r1
 80076b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076bc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80076be:	e05f      	b.n	8007780 <USB_HC_Halt+0x1ea>
            break;
 80076c0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80076c2:	e05d      	b.n	8007780 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	015a      	lsls	r2, r3, #5
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	4413      	add	r3, r2
 80076cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	69ba      	ldr	r2, [r7, #24]
 80076d4:	0151      	lsls	r1, r2, #5
 80076d6:	69fa      	ldr	r2, [r7, #28]
 80076d8:	440a      	add	r2, r1
 80076da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076e2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d133      	bne.n	800775c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	69ba      	ldr	r2, [r7, #24]
 8007704:	0151      	lsls	r1, r2, #5
 8007706:	69fa      	ldr	r2, [r7, #28]
 8007708:	440a      	add	r2, r1
 800770a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800770e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007712:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	4413      	add	r3, r2
 800771c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	69ba      	ldr	r2, [r7, #24]
 8007724:	0151      	lsls	r1, r2, #5
 8007726:	69fa      	ldr	r2, [r7, #28]
 8007728:	440a      	add	r2, r1
 800772a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800772e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007732:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	3301      	adds	r3, #1
 8007738:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007740:	d81d      	bhi.n	800777e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	015a      	lsls	r2, r3, #5
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	4413      	add	r3, r2
 800774a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007754:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007758:	d0ec      	beq.n	8007734 <USB_HC_Halt+0x19e>
 800775a:	e011      	b.n	8007780 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	015a      	lsls	r2, r3, #5
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	4413      	add	r3, r2
 8007764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	0151      	lsls	r1, r2, #5
 800776e:	69fa      	ldr	r2, [r7, #28]
 8007770:	440a      	add	r2, r1
 8007772:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007776:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800777a:	6013      	str	r3, [r2, #0]
 800777c:	e000      	b.n	8007780 <USB_HC_Halt+0x1ea>
          break;
 800777e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3724      	adds	r7, #36	; 0x24
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
	...

08007790 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007790:	b480      	push	{r7}
 8007792:	b087      	sub	sp, #28
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	460b      	mov	r3, r1
 800779a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80077a0:	78fb      	ldrb	r3, [r7, #3]
 80077a2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80077a4:	2301      	movs	r3, #1
 80077a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	04da      	lsls	r2, r3, #19
 80077ac:	4b15      	ldr	r3, [pc, #84]	; (8007804 <USB_DoPing+0x74>)
 80077ae:	4013      	ands	r3, r2
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	0151      	lsls	r1, r2, #5
 80077b4:	697a      	ldr	r2, [r7, #20]
 80077b6:	440a      	add	r2, r1
 80077b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077c0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	015a      	lsls	r2, r3, #5
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	4413      	add	r3, r2
 80077ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80077d8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077e0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	015a      	lsls	r2, r3, #5
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	4413      	add	r3, r2
 80077ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ee:	461a      	mov	r2, r3
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	371c      	adds	r7, #28
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	1ff80000 	.word	0x1ff80000

08007808 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b088      	sub	sp, #32
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007810:	2300      	movs	r3, #0
 8007812:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007818:	2300      	movs	r3, #0
 800781a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f7ff f912 	bl	8006a46 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007822:	2110      	movs	r1, #16
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7ff f96b 	bl	8006b00 <USB_FlushTxFifo>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f7ff f997 	bl	8006b68 <USB_FlushRxFifo>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d001      	beq.n	8007844 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007844:	2300      	movs	r3, #0
 8007846:	61bb      	str	r3, [r7, #24]
 8007848:	e01f      	b.n	800788a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	015a      	lsls	r2, r3, #5
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	4413      	add	r3, r2
 8007852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007860:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007868:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007870:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	4413      	add	r3, r2
 800787a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800787e:	461a      	mov	r2, r3
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	3301      	adds	r3, #1
 8007888:	61bb      	str	r3, [r7, #24]
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	2b0f      	cmp	r3, #15
 800788e:	d9dc      	bls.n	800784a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007890:	2300      	movs	r3, #0
 8007892:	61bb      	str	r3, [r7, #24]
 8007894:	e034      	b.n	8007900 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	015a      	lsls	r2, r3, #5
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	4413      	add	r3, r2
 800789e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078ac:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80078bc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	015a      	lsls	r2, r3, #5
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	4413      	add	r3, r2
 80078c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ca:	461a      	mov	r2, r3
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	3301      	adds	r3, #1
 80078d4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078dc:	d80c      	bhi.n	80078f8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	015a      	lsls	r2, r3, #5
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	4413      	add	r3, r2
 80078e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078f4:	d0ec      	beq.n	80078d0 <USB_StopHost+0xc8>
 80078f6:	e000      	b.n	80078fa <USB_StopHost+0xf2>
        break;
 80078f8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	3301      	adds	r3, #1
 80078fe:	61bb      	str	r3, [r7, #24]
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	2b0f      	cmp	r3, #15
 8007904:	d9c7      	bls.n	8007896 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800790c:	461a      	mov	r2, r3
 800790e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007912:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800791a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7ff f881 	bl	8006a24 <USB_EnableGlobalInt>

  return ret;
 8007922:	7ffb      	ldrb	r3, [r7, #31]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3720      	adds	r7, #32
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800792c:	b590      	push	{r4, r7, lr}
 800792e:	b089      	sub	sp, #36	; 0x24
 8007930:	af04      	add	r7, sp, #16
 8007932:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007934:	2301      	movs	r3, #1
 8007936:	2202      	movs	r2, #2
 8007938:	2102      	movs	r1, #2
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fc66 	bl	800820c <USBH_FindInterface>
 8007940:	4603      	mov	r3, r0
 8007942:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007944:	7bfb      	ldrb	r3, [r7, #15]
 8007946:	2bff      	cmp	r3, #255	; 0xff
 8007948:	d002      	beq.n	8007950 <USBH_CDC_InterfaceInit+0x24>
 800794a:	7bfb      	ldrb	r3, [r7, #15]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d901      	bls.n	8007954 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007950:	2302      	movs	r3, #2
 8007952:	e13d      	b.n	8007bd0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007954:	7bfb      	ldrb	r3, [r7, #15]
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fc3b 	bl	80081d4 <USBH_SelectInterface>
 800795e:	4603      	mov	r3, r0
 8007960:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007962:	7bbb      	ldrb	r3, [r7, #14]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d001      	beq.n	800796c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007968:	2302      	movs	r3, #2
 800796a:	e131      	b.n	8007bd0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007972:	2050      	movs	r0, #80	; 0x50
 8007974:	f002 fafa 	bl	8009f6c <malloc>
 8007978:	4603      	mov	r3, r0
 800797a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007982:	69db      	ldr	r3, [r3, #28]
 8007984:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d101      	bne.n	8007990 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800798c:	2302      	movs	r3, #2
 800798e:	e11f      	b.n	8007bd0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007990:	2250      	movs	r2, #80	; 0x50
 8007992:	2100      	movs	r1, #0
 8007994:	68b8      	ldr	r0, [r7, #8]
 8007996:	f002 faf9 	bl	8009f8c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800799a:	7bfb      	ldrb	r3, [r7, #15]
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	211a      	movs	r1, #26
 80079a0:	fb01 f303 	mul.w	r3, r1, r3
 80079a4:	4413      	add	r3, r2
 80079a6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	b25b      	sxtb	r3, r3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	da15      	bge.n	80079de <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80079b2:	7bfb      	ldrb	r3, [r7, #15]
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	211a      	movs	r1, #26
 80079b8:	fb01 f303 	mul.w	r3, r1, r3
 80079bc:	4413      	add	r3, r2
 80079be:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80079c2:	781a      	ldrb	r2, [r3, #0]
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	211a      	movs	r1, #26
 80079ce:	fb01 f303 	mul.w	r3, r1, r3
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80079d8:	881a      	ldrh	r2, [r3, #0]
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	785b      	ldrb	r3, [r3, #1]
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f001 ff2c 	bl	8009842 <USBH_AllocPipe>
 80079ea:	4603      	mov	r3, r0
 80079ec:	461a      	mov	r2, r3
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	7819      	ldrb	r1, [r3, #0]
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	7858      	ldrb	r0, [r3, #1]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a06:	68ba      	ldr	r2, [r7, #8]
 8007a08:	8952      	ldrh	r2, [r2, #10]
 8007a0a:	9202      	str	r2, [sp, #8]
 8007a0c:	2203      	movs	r2, #3
 8007a0e:	9201      	str	r2, [sp, #4]
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	4623      	mov	r3, r4
 8007a14:	4602      	mov	r2, r0
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f001 fee4 	bl	80097e4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	2200      	movs	r2, #0
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f002 f9f3 	bl	8009e10 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	210a      	movs	r1, #10
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fbeb 	bl	800820c <USBH_FindInterface>
 8007a36:	4603      	mov	r3, r0
 8007a38:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
 8007a3c:	2bff      	cmp	r3, #255	; 0xff
 8007a3e:	d002      	beq.n	8007a46 <USBH_CDC_InterfaceInit+0x11a>
 8007a40:	7bfb      	ldrb	r3, [r7, #15]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d901      	bls.n	8007a4a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007a46:	2302      	movs	r3, #2
 8007a48:	e0c2      	b.n	8007bd0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007a4a:	7bfb      	ldrb	r3, [r7, #15]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	211a      	movs	r1, #26
 8007a50:	fb01 f303 	mul.w	r3, r1, r3
 8007a54:	4413      	add	r3, r2
 8007a56:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	b25b      	sxtb	r3, r3
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	da16      	bge.n	8007a90 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	211a      	movs	r1, #26
 8007a68:	fb01 f303 	mul.w	r3, r1, r3
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007a72:	781a      	ldrb	r2, [r3, #0]
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007a78:	7bfb      	ldrb	r3, [r7, #15]
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	211a      	movs	r1, #26
 8007a7e:	fb01 f303 	mul.w	r3, r1, r3
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007a88:	881a      	ldrh	r2, [r3, #0]
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	835a      	strh	r2, [r3, #26]
 8007a8e:	e015      	b.n	8007abc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	211a      	movs	r1, #26
 8007a96:	fb01 f303 	mul.w	r3, r1, r3
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007aa0:	781a      	ldrb	r2, [r3, #0]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	211a      	movs	r1, #26
 8007aac:	fb01 f303 	mul.w	r3, r1, r3
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007ab6:	881a      	ldrh	r2, [r3, #0]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	211a      	movs	r1, #26
 8007ac2:	fb01 f303 	mul.w	r3, r1, r3
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	b25b      	sxtb	r3, r3
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	da16      	bge.n	8007b02 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	211a      	movs	r1, #26
 8007ada:	fb01 f303 	mul.w	r3, r1, r3
 8007ade:	4413      	add	r3, r2
 8007ae0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007ae4:	781a      	ldrb	r2, [r3, #0]
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	211a      	movs	r1, #26
 8007af0:	fb01 f303 	mul.w	r3, r1, r3
 8007af4:	4413      	add	r3, r2
 8007af6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007afa:	881a      	ldrh	r2, [r3, #0]
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	835a      	strh	r2, [r3, #26]
 8007b00:	e015      	b.n	8007b2e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007b02:	7bfb      	ldrb	r3, [r7, #15]
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	211a      	movs	r1, #26
 8007b08:	fb01 f303 	mul.w	r3, r1, r3
 8007b0c:	4413      	add	r3, r2
 8007b0e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007b12:	781a      	ldrb	r2, [r3, #0]
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	211a      	movs	r1, #26
 8007b1e:	fb01 f303 	mul.w	r3, r1, r3
 8007b22:	4413      	add	r3, r2
 8007b24:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007b28:	881a      	ldrh	r2, [r3, #0]
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	7b9b      	ldrb	r3, [r3, #14]
 8007b32:	4619      	mov	r1, r3
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f001 fe84 	bl	8009842 <USBH_AllocPipe>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	7bdb      	ldrb	r3, [r3, #15]
 8007b46:	4619      	mov	r1, r3
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f001 fe7a 	bl	8009842 <USBH_AllocPipe>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	461a      	mov	r2, r3
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	7b59      	ldrb	r1, [r3, #13]
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	7b98      	ldrb	r0, [r3, #14]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	8b12      	ldrh	r2, [r2, #24]
 8007b6e:	9202      	str	r2, [sp, #8]
 8007b70:	2202      	movs	r2, #2
 8007b72:	9201      	str	r2, [sp, #4]
 8007b74:	9300      	str	r3, [sp, #0]
 8007b76:	4623      	mov	r3, r4
 8007b78:	4602      	mov	r2, r0
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f001 fe32 	bl	80097e4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	7b19      	ldrb	r1, [r3, #12]
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	7bd8      	ldrb	r0, [r3, #15]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	8b52      	ldrh	r2, [r2, #26]
 8007b98:	9202      	str	r2, [sp, #8]
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	9201      	str	r2, [sp, #4]
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	4623      	mov	r3, r4
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f001 fe1d 	bl	80097e4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	7b5b      	ldrb	r3, [r3, #13]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	4619      	mov	r1, r3
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f002 f928 	bl	8009e10 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	7b1b      	ldrb	r3, [r3, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f002 f921 	bl	8009e10 <USBH_LL_SetToggle>

  return USBH_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3714      	adds	r7, #20
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd90      	pop	{r4, r7, pc}

08007bd8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007be6:	69db      	ldr	r3, [r3, #28]
 8007be8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d00e      	beq.n	8007c10 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f001 fe12 	bl	8009822 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	4619      	mov	r1, r3
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f001 fe3d 	bl	8009884 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	7b1b      	ldrb	r3, [r3, #12]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00e      	beq.n	8007c36 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	7b1b      	ldrb	r3, [r3, #12]
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f001 fdff 	bl	8009822 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	7b1b      	ldrb	r3, [r3, #12]
 8007c28:	4619      	mov	r1, r3
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f001 fe2a 	bl	8009884 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	7b5b      	ldrb	r3, [r3, #13]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00e      	beq.n	8007c5c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	7b5b      	ldrb	r3, [r3, #13]
 8007c42:	4619      	mov	r1, r3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f001 fdec 	bl	8009822 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	7b5b      	ldrb	r3, [r3, #13]
 8007c4e:	4619      	mov	r1, r3
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f001 fe17 	bl	8009884 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c62:	69db      	ldr	r3, [r3, #28]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00b      	beq.n	8007c80 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c6e:	69db      	ldr	r3, [r3, #28]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f002 f983 	bl	8009f7c <free>
    phost->pActiveClass->pData = 0U;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b084      	sub	sp, #16
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c98:	69db      	ldr	r3, [r3, #28]
 8007c9a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	3340      	adds	r3, #64	; 0x40
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f8b1 	bl	8007e0a <GetLineCoding>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007cac:	7afb      	ldrb	r3, [r7, #11]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d105      	bne.n	8007cbe <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007cb8:	2102      	movs	r1, #2
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007cbe:	7afb      	ldrb	r3, [r7, #11]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007ce8:	2b04      	cmp	r3, #4
 8007cea:	d877      	bhi.n	8007ddc <USBH_CDC_Process+0x114>
 8007cec:	a201      	add	r2, pc, #4	; (adr r2, 8007cf4 <USBH_CDC_Process+0x2c>)
 8007cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf2:	bf00      	nop
 8007cf4:	08007d09 	.word	0x08007d09
 8007cf8:	08007d0f 	.word	0x08007d0f
 8007cfc:	08007d3f 	.word	0x08007d3f
 8007d00:	08007db3 	.word	0x08007db3
 8007d04:	08007dc1 	.word	0x08007dc1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d0c:	e06d      	b.n	8007dea <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 f897 	bl	8007e48 <SetLineCoding>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007d1e:	7bbb      	ldrb	r3, [r7, #14]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d104      	bne.n	8007d2e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	2202      	movs	r2, #2
 8007d28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007d2c:	e058      	b.n	8007de0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007d2e:	7bbb      	ldrb	r3, [r7, #14]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d055      	beq.n	8007de0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	2204      	movs	r2, #4
 8007d38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007d3c:	e050      	b.n	8007de0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	3340      	adds	r3, #64	; 0x40
 8007d42:	4619      	mov	r1, r3
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 f860 	bl	8007e0a <GetLineCoding>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007d4e:	7bbb      	ldrb	r3, [r7, #14]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d126      	bne.n	8007da2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d66:	791b      	ldrb	r3, [r3, #4]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d13b      	bne.n	8007de4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d76:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d133      	bne.n	8007de4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d86:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d12b      	bne.n	8007de4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d94:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d124      	bne.n	8007de4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f958 	bl	8008050 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007da0:	e020      	b.n	8007de4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007da2:	7bbb      	ldrb	r3, [r7, #14]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d01d      	beq.n	8007de4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	2204      	movs	r2, #4
 8007dac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007db0:	e018      	b.n	8007de4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f867 	bl	8007e86 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 f8da 	bl	8007f72 <CDC_ProcessReception>
      break;
 8007dbe:	e014      	b.n	8007dea <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 ffef 	bl	8008da6 <USBH_ClrFeature>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007dcc:	7bbb      	ldrb	r3, [r7, #14]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10a      	bne.n	8007de8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007dda:	e005      	b.n	8007de8 <USBH_CDC_Process+0x120>

    default:
      break;
 8007ddc:	bf00      	nop
 8007dde:	e004      	b.n	8007dea <USBH_CDC_Process+0x122>
      break;
 8007de0:	bf00      	nop
 8007de2:	e002      	b.n	8007dea <USBH_CDC_Process+0x122>
      break;
 8007de4:	bf00      	nop
 8007de6:	e000      	b.n	8007dea <USBH_CDC_Process+0x122>
      break;
 8007de8:	bf00      	nop

  }

  return status;
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b082      	sub	sp, #8
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	22a1      	movs	r2, #161	; 0xa1
 8007e18:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2221      	movs	r2, #33	; 0x21
 8007e1e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2207      	movs	r2, #7
 8007e30:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	2207      	movs	r2, #7
 8007e36:	4619      	mov	r1, r3
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f001 fa81 	bl	8009340 <USBH_CtlReq>
 8007e3e:	4603      	mov	r3, r0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2221      	movs	r2, #33	; 0x21
 8007e56:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2220      	movs	r2, #32
 8007e5c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2207      	movs	r2, #7
 8007e6e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	2207      	movs	r2, #7
 8007e74:	4619      	mov	r1, r3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f001 fa62 	bl	8009340 <USBH_CtlReq>
 8007e7c:	4603      	mov	r3, r0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b086      	sub	sp, #24
 8007e8a:	af02      	add	r7, sp, #8
 8007e8c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e94:	69db      	ldr	r3, [r3, #28]
 8007e96:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d002      	beq.n	8007eac <CDC_ProcessTransmission+0x26>
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d023      	beq.n	8007ef2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007eaa:	e05e      	b.n	8007f6a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	8b12      	ldrh	r2, [r2, #24]
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d90b      	bls.n	8007ed0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	69d9      	ldr	r1, [r3, #28]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	8b1a      	ldrh	r2, [r3, #24]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	7b5b      	ldrb	r3, [r3, #13]
 8007ec4:	2001      	movs	r0, #1
 8007ec6:	9000      	str	r0, [sp, #0]
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f001 fc48 	bl	800975e <USBH_BulkSendData>
 8007ece:	e00b      	b.n	8007ee8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	7b5b      	ldrb	r3, [r3, #13]
 8007ede:	2001      	movs	r0, #1
 8007ee0:	9000      	str	r0, [sp, #0]
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f001 fc3b 	bl	800975e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2202      	movs	r2, #2
 8007eec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007ef0:	e03b      	b.n	8007f6a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	7b5b      	ldrb	r3, [r3, #13]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f001 ff5f 	bl	8009dbc <USBH_LL_GetURBState>
 8007efe:	4603      	mov	r3, r0
 8007f00:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007f02:	7afb      	ldrb	r3, [r7, #11]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d128      	bne.n	8007f5a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	8b12      	ldrh	r2, [r2, #24]
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d90e      	bls.n	8007f32 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	8b12      	ldrh	r2, [r2, #24]
 8007f1c:	1a9a      	subs	r2, r3, r2
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	69db      	ldr	r3, [r3, #28]
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	8b12      	ldrh	r2, [r2, #24]
 8007f2a:	441a      	add	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	61da      	str	r2, [r3, #28]
 8007f30:	e002      	b.n	8007f38 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d004      	beq.n	8007f4a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007f48:	e00e      	b.n	8007f68 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f868 	bl	8008028 <USBH_CDC_TransmitCallback>
      break;
 8007f58:	e006      	b.n	8007f68 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007f5a:	7afb      	ldrb	r3, [r7, #11]
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d103      	bne.n	8007f68 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007f68:	bf00      	nop
  }
}
 8007f6a:	bf00      	nop
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b086      	sub	sp, #24
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f80:	69db      	ldr	r3, [r3, #28]
 8007f82:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007f84:	2300      	movs	r3, #0
 8007f86:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007f8e:	2b03      	cmp	r3, #3
 8007f90:	d002      	beq.n	8007f98 <CDC_ProcessReception+0x26>
 8007f92:	2b04      	cmp	r3, #4
 8007f94:	d00e      	beq.n	8007fb4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007f96:	e043      	b.n	8008020 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	6a19      	ldr	r1, [r3, #32]
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	8b5a      	ldrh	r2, [r3, #26]
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	7b1b      	ldrb	r3, [r3, #12]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f001 fbff 	bl	80097a8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	2204      	movs	r2, #4
 8007fae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007fb2:	e035      	b.n	8008020 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	7b1b      	ldrb	r3, [r3, #12]
 8007fb8:	4619      	mov	r1, r3
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f001 fefe 	bl	8009dbc <USBH_LL_GetURBState>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007fc4:	7cfb      	ldrb	r3, [r7, #19]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d129      	bne.n	800801e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	7b1b      	ldrb	r3, [r3, #12]
 8007fce:	4619      	mov	r1, r3
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f001 fe61 	bl	8009c98 <USBH_LL_GetLastXferSize>
 8007fd6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d016      	beq.n	8008010 <CDC_ProcessReception+0x9e>
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	8b5b      	ldrh	r3, [r3, #26]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d910      	bls.n	8008010 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	1ad2      	subs	r2, r2, r3
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	6a1a      	ldr	r2, [r3, #32]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	441a      	add	r2, r3
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	2203      	movs	r2, #3
 800800a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800800e:	e006      	b.n	800801e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	2200      	movs	r2, #0
 8008014:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f80f 	bl	800803c <USBH_CDC_ReceiveCallback>
      break;
 800801e:	bf00      	nop
  }
}
 8008020:	bf00      	nop
 8008022:	3718      	adds	r7, #24
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008044:	bf00      	nop
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	4613      	mov	r3, r2
 8008070:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d101      	bne.n	800807c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008078:	2302      	movs	r3, #2
 800807a:	e029      	b.n	80080d0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	79fa      	ldrb	r2, [r7, #7]
 8008080:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008094:	68f8      	ldr	r0, [r7, #12]
 8008096:	f000 f81f 	bl	80080d8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d003      	beq.n	80080c8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	68ba      	ldr	r2, [r7, #8]
 80080c4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f001 fd31 	bl	8009b30 <USBH_LL_Init>

  return USBH_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80080e0:	2300      	movs	r3, #0
 80080e2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80080e4:	2300      	movs	r3, #0
 80080e6:	60fb      	str	r3, [r7, #12]
 80080e8:	e009      	b.n	80080fe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	33e0      	adds	r3, #224	; 0xe0
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	4413      	add	r3, r2
 80080f4:	2200      	movs	r2, #0
 80080f6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	3301      	adds	r3, #1
 80080fc:	60fb      	str	r3, [r7, #12]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2b0f      	cmp	r3, #15
 8008102:	d9f2      	bls.n	80080ea <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008104:	2300      	movs	r3, #0
 8008106:	60fb      	str	r3, [r7, #12]
 8008108:	e009      	b.n	800811e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	4413      	add	r3, r2
 8008110:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008114:	2200      	movs	r2, #0
 8008116:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	3301      	adds	r3, #1
 800811c:	60fb      	str	r3, [r7, #12]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008124:	d3f1      	bcc.n	800810a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2201      	movs	r2, #1
 8008136:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2240      	movs	r2, #64	; 0x40
 800814a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3714      	adds	r7, #20
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800818a:	2300      	movs	r3, #0
 800818c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d016      	beq.n	80081c2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10e      	bne.n	80081bc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80081a4:	1c59      	adds	r1, r3, #1
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	33de      	adds	r3, #222	; 0xde
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	73fb      	strb	r3, [r7, #15]
 80081ba:	e004      	b.n	80081c6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80081bc:	2302      	movs	r3, #2
 80081be:	73fb      	strb	r3, [r7, #15]
 80081c0:	e001      	b.n	80081c6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80081c2:	2302      	movs	r3, #2
 80081c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80081c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	460b      	mov	r3, r1
 80081de:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80081ea:	78fa      	ldrb	r2, [r7, #3]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d204      	bcs.n	80081fa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	78fa      	ldrb	r2, [r7, #3]
 80081f4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80081f8:	e001      	b.n	80081fe <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80081fa:	2302      	movs	r3, #2
 80081fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80081fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800820c:	b480      	push	{r7}
 800820e:	b087      	sub	sp, #28
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	4608      	mov	r0, r1
 8008216:	4611      	mov	r1, r2
 8008218:	461a      	mov	r2, r3
 800821a:	4603      	mov	r3, r0
 800821c:	70fb      	strb	r3, [r7, #3]
 800821e:	460b      	mov	r3, r1
 8008220:	70bb      	strb	r3, [r7, #2]
 8008222:	4613      	mov	r3, r2
 8008224:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008226:	2300      	movs	r3, #0
 8008228:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800822a:	2300      	movs	r3, #0
 800822c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008234:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008236:	e025      	b.n	8008284 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008238:	7dfb      	ldrb	r3, [r7, #23]
 800823a:	221a      	movs	r2, #26
 800823c:	fb02 f303 	mul.w	r3, r2, r3
 8008240:	3308      	adds	r3, #8
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	4413      	add	r3, r2
 8008246:	3302      	adds	r3, #2
 8008248:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	795b      	ldrb	r3, [r3, #5]
 800824e:	78fa      	ldrb	r2, [r7, #3]
 8008250:	429a      	cmp	r2, r3
 8008252:	d002      	beq.n	800825a <USBH_FindInterface+0x4e>
 8008254:	78fb      	ldrb	r3, [r7, #3]
 8008256:	2bff      	cmp	r3, #255	; 0xff
 8008258:	d111      	bne.n	800827e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800825e:	78ba      	ldrb	r2, [r7, #2]
 8008260:	429a      	cmp	r2, r3
 8008262:	d002      	beq.n	800826a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008264:	78bb      	ldrb	r3, [r7, #2]
 8008266:	2bff      	cmp	r3, #255	; 0xff
 8008268:	d109      	bne.n	800827e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800826e:	787a      	ldrb	r2, [r7, #1]
 8008270:	429a      	cmp	r2, r3
 8008272:	d002      	beq.n	800827a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008274:	787b      	ldrb	r3, [r7, #1]
 8008276:	2bff      	cmp	r3, #255	; 0xff
 8008278:	d101      	bne.n	800827e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800827a:	7dfb      	ldrb	r3, [r7, #23]
 800827c:	e006      	b.n	800828c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800827e:	7dfb      	ldrb	r3, [r7, #23]
 8008280:	3301      	adds	r3, #1
 8008282:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008284:	7dfb      	ldrb	r3, [r7, #23]
 8008286:	2b01      	cmp	r3, #1
 8008288:	d9d6      	bls.n	8008238 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800828a:	23ff      	movs	r3, #255	; 0xff
}
 800828c:	4618      	mov	r0, r3
 800828e:	371c      	adds	r7, #28
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f001 fc81 	bl	8009ba8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80082a6:	2101      	movs	r1, #1
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f001 fd9a 	bl	8009de2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b088      	sub	sp, #32
 80082bc:	af04      	add	r7, sp, #16
 80082be:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80082c0:	2302      	movs	r3, #2
 80082c2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80082c4:	2300      	movs	r3, #0
 80082c6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d102      	bne.n	80082da <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2203      	movs	r2, #3
 80082d8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	2b0b      	cmp	r3, #11
 80082e2:	f200 81be 	bhi.w	8008662 <USBH_Process+0x3aa>
 80082e6:	a201      	add	r2, pc, #4	; (adr r2, 80082ec <USBH_Process+0x34>)
 80082e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ec:	0800831d 	.word	0x0800831d
 80082f0:	0800834f 	.word	0x0800834f
 80082f4:	080083b7 	.word	0x080083b7
 80082f8:	080085fd 	.word	0x080085fd
 80082fc:	08008663 	.word	0x08008663
 8008300:	0800845b 	.word	0x0800845b
 8008304:	080085a3 	.word	0x080085a3
 8008308:	08008491 	.word	0x08008491
 800830c:	080084b1 	.word	0x080084b1
 8008310:	080084d1 	.word	0x080084d1
 8008314:	08008515 	.word	0x08008515
 8008318:	080085e5 	.word	0x080085e5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008322:	b2db      	uxtb	r3, r3
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 819e 	beq.w	8008666 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008330:	20c8      	movs	r0, #200	; 0xc8
 8008332:	f001 fd9d 	bl	8009e70 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f001 fc93 	bl	8009c62 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800834c:	e18b      	b.n	8008666 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008354:	2b01      	cmp	r3, #1
 8008356:	d107      	bne.n	8008368 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2202      	movs	r2, #2
 8008364:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008366:	e18d      	b.n	8008684 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800836e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008372:	d914      	bls.n	800839e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800837a:	3301      	adds	r3, #1
 800837c:	b2da      	uxtb	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800838a:	2b03      	cmp	r3, #3
 800838c:	d903      	bls.n	8008396 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	220d      	movs	r2, #13
 8008392:	701a      	strb	r2, [r3, #0]
      break;
 8008394:	e176      	b.n	8008684 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	701a      	strb	r2, [r3, #0]
      break;
 800839c:	e172      	b.n	8008684 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80083a4:	f103 020a 	add.w	r2, r3, #10
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80083ae:	200a      	movs	r0, #10
 80083b0:	f001 fd5e 	bl	8009e70 <USBH_Delay>
      break;
 80083b4:	e166      	b.n	8008684 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d005      	beq.n	80083cc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80083c6:	2104      	movs	r1, #4
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80083cc:	2064      	movs	r0, #100	; 0x64
 80083ce:	f001 fd4f 	bl	8009e70 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f001 fc1e 	bl	8009c14 <USBH_LL_GetSpeed>
 80083d8:	4603      	mov	r3, r0
 80083da:	461a      	mov	r2, r3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2205      	movs	r2, #5
 80083e6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80083e8:	2100      	movs	r1, #0
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f001 fa29 	bl	8009842 <USBH_AllocPipe>
 80083f0:	4603      	mov	r3, r0
 80083f2:	461a      	mov	r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80083f8:	2180      	movs	r1, #128	; 0x80
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f001 fa21 	bl	8009842 <USBH_AllocPipe>
 8008400:	4603      	mov	r3, r0
 8008402:	461a      	mov	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	7919      	ldrb	r1, [r3, #4]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800841c:	b292      	uxth	r2, r2
 800841e:	9202      	str	r2, [sp, #8]
 8008420:	2200      	movs	r2, #0
 8008422:	9201      	str	r2, [sp, #4]
 8008424:	9300      	str	r3, [sp, #0]
 8008426:	4603      	mov	r3, r0
 8008428:	2280      	movs	r2, #128	; 0x80
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f001 f9da 	bl	80097e4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	7959      	ldrb	r1, [r3, #5]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008444:	b292      	uxth	r2, r2
 8008446:	9202      	str	r2, [sp, #8]
 8008448:	2200      	movs	r2, #0
 800844a:	9201      	str	r2, [sp, #4]
 800844c:	9300      	str	r3, [sp, #0]
 800844e:	4603      	mov	r3, r0
 8008450:	2200      	movs	r2, #0
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f001 f9c6 	bl	80097e4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008458:	e114      	b.n	8008684 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f918 	bl	8008690 <USBH_HandleEnum>
 8008460:	4603      	mov	r3, r0
 8008462:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008464:	7bbb      	ldrb	r3, [r7, #14]
 8008466:	b2db      	uxtb	r3, r3
 8008468:	2b00      	cmp	r3, #0
 800846a:	f040 80fe 	bne.w	800866a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800847c:	2b01      	cmp	r3, #1
 800847e:	d103      	bne.n	8008488 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2208      	movs	r2, #8
 8008484:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008486:	e0f0      	b.n	800866a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2207      	movs	r2, #7
 800848c:	701a      	strb	r2, [r3, #0]
      break;
 800848e:	e0ec      	b.n	800866a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008496:	2b00      	cmp	r3, #0
 8008498:	f000 80e9 	beq.w	800866e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80084a2:	2101      	movs	r1, #1
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2208      	movs	r2, #8
 80084ac:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80084ae:	e0de      	b.n	800866e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	4619      	mov	r1, r3
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fc2c 	bl	8008d18 <USBH_SetCfg>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f040 80d5 	bne.w	8008672 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2209      	movs	r2, #9
 80084cc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80084ce:	e0d0      	b.n	8008672 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80084d6:	f003 0320 	and.w	r3, r3, #32
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d016      	beq.n	800850c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80084de:	2101      	movs	r1, #1
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 fc3c 	bl	8008d5e <USBH_SetFeature>
 80084e6:	4603      	mov	r3, r0
 80084e8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80084ea:	7bbb      	ldrb	r3, [r7, #14]
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d103      	bne.n	80084fa <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	220a      	movs	r2, #10
 80084f6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80084f8:	e0bd      	b.n	8008676 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80084fa:	7bbb      	ldrb	r3, [r7, #14]
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b03      	cmp	r3, #3
 8008500:	f040 80b9 	bne.w	8008676 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	220a      	movs	r2, #10
 8008508:	701a      	strb	r2, [r3, #0]
      break;
 800850a:	e0b4      	b.n	8008676 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	220a      	movs	r2, #10
 8008510:	701a      	strb	r2, [r3, #0]
      break;
 8008512:	e0b0      	b.n	8008676 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800851a:	2b00      	cmp	r3, #0
 800851c:	f000 80ad 	beq.w	800867a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008528:	2300      	movs	r3, #0
 800852a:	73fb      	strb	r3, [r7, #15]
 800852c:	e016      	b.n	800855c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800852e:	7bfa      	ldrb	r2, [r7, #15]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	32de      	adds	r2, #222	; 0xde
 8008534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008538:	791a      	ldrb	r2, [r3, #4]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008540:	429a      	cmp	r2, r3
 8008542:	d108      	bne.n	8008556 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008544:	7bfa      	ldrb	r2, [r7, #15]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	32de      	adds	r2, #222	; 0xde
 800854a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008554:	e005      	b.n	8008562 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008556:	7bfb      	ldrb	r3, [r7, #15]
 8008558:	3301      	adds	r3, #1
 800855a:	73fb      	strb	r3, [r7, #15]
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d0e5      	beq.n	800852e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008568:	2b00      	cmp	r3, #0
 800856a:	d016      	beq.n	800859a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	4798      	blx	r3
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d109      	bne.n	8008592 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2206      	movs	r2, #6
 8008582:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800858a:	2103      	movs	r1, #3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008590:	e073      	b.n	800867a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	220d      	movs	r2, #13
 8008596:	701a      	strb	r2, [r3, #0]
      break;
 8008598:	e06f      	b.n	800867a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	220d      	movs	r2, #13
 800859e:	701a      	strb	r2, [r3, #0]
      break;
 80085a0:	e06b      	b.n	800867a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d017      	beq.n	80085dc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	4798      	blx	r3
 80085b8:	4603      	mov	r3, r0
 80085ba:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80085bc:	7bbb      	ldrb	r3, [r7, #14]
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d103      	bne.n	80085cc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	220b      	movs	r2, #11
 80085c8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80085ca:	e058      	b.n	800867e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80085cc:	7bbb      	ldrb	r3, [r7, #14]
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d154      	bne.n	800867e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	220d      	movs	r2, #13
 80085d8:	701a      	strb	r2, [r3, #0]
      break;
 80085da:	e050      	b.n	800867e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	220d      	movs	r2, #13
 80085e0:	701a      	strb	r2, [r3, #0]
      break;
 80085e2:	e04c      	b.n	800867e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d049      	beq.n	8008682 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085f4:	695b      	ldr	r3, [r3, #20]
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	4798      	blx	r3
      }
      break;
 80085fa:	e042      	b.n	8008682 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f7ff fd67 	bl	80080d8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008610:	2b00      	cmp	r3, #0
 8008612:	d009      	beq.n	8008628 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800862e:	2b00      	cmp	r3, #0
 8008630:	d005      	beq.n	800863e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008638:	2105      	movs	r1, #5
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008644:	b2db      	uxtb	r3, r3
 8008646:	2b01      	cmp	r3, #1
 8008648:	d107      	bne.n	800865a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f7ff fe20 	bl	8008298 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008658:	e014      	b.n	8008684 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f001 faa4 	bl	8009ba8 <USBH_LL_Start>
      break;
 8008660:	e010      	b.n	8008684 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008662:	bf00      	nop
 8008664:	e00e      	b.n	8008684 <USBH_Process+0x3cc>
      break;
 8008666:	bf00      	nop
 8008668:	e00c      	b.n	8008684 <USBH_Process+0x3cc>
      break;
 800866a:	bf00      	nop
 800866c:	e00a      	b.n	8008684 <USBH_Process+0x3cc>
    break;
 800866e:	bf00      	nop
 8008670:	e008      	b.n	8008684 <USBH_Process+0x3cc>
      break;
 8008672:	bf00      	nop
 8008674:	e006      	b.n	8008684 <USBH_Process+0x3cc>
      break;
 8008676:	bf00      	nop
 8008678:	e004      	b.n	8008684 <USBH_Process+0x3cc>
      break;
 800867a:	bf00      	nop
 800867c:	e002      	b.n	8008684 <USBH_Process+0x3cc>
      break;
 800867e:	bf00      	nop
 8008680:	e000      	b.n	8008684 <USBH_Process+0x3cc>
      break;
 8008682:	bf00      	nop
  }
  return USBH_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop

08008690 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b088      	sub	sp, #32
 8008694:	af04      	add	r7, sp, #16
 8008696:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008698:	2301      	movs	r3, #1
 800869a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800869c:	2301      	movs	r3, #1
 800869e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	785b      	ldrb	r3, [r3, #1]
 80086a4:	2b07      	cmp	r3, #7
 80086a6:	f200 81c1 	bhi.w	8008a2c <USBH_HandleEnum+0x39c>
 80086aa:	a201      	add	r2, pc, #4	; (adr r2, 80086b0 <USBH_HandleEnum+0x20>)
 80086ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b0:	080086d1 	.word	0x080086d1
 80086b4:	0800878f 	.word	0x0800878f
 80086b8:	080087f9 	.word	0x080087f9
 80086bc:	08008887 	.word	0x08008887
 80086c0:	080088f1 	.word	0x080088f1
 80086c4:	08008961 	.word	0x08008961
 80086c8:	080089a7 	.word	0x080089a7
 80086cc:	080089ed 	.word	0x080089ed
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80086d0:	2108      	movs	r1, #8
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fa50 	bl	8008b78 <USBH_Get_DevDesc>
 80086d8:	4603      	mov	r3, r0
 80086da:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80086dc:	7bbb      	ldrb	r3, [r7, #14]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d130      	bne.n	8008744 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	7919      	ldrb	r1, [r3, #4]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008706:	b292      	uxth	r2, r2
 8008708:	9202      	str	r2, [sp, #8]
 800870a:	2200      	movs	r2, #0
 800870c:	9201      	str	r2, [sp, #4]
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	4603      	mov	r3, r0
 8008712:	2280      	movs	r2, #128	; 0x80
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f001 f865 	bl	80097e4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	7959      	ldrb	r1, [r3, #5]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800872e:	b292      	uxth	r2, r2
 8008730:	9202      	str	r2, [sp, #8]
 8008732:	2200      	movs	r2, #0
 8008734:	9201      	str	r2, [sp, #4]
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	4603      	mov	r3, r0
 800873a:	2200      	movs	r2, #0
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f001 f851 	bl	80097e4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008742:	e175      	b.n	8008a30 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008744:	7bbb      	ldrb	r3, [r7, #14]
 8008746:	2b03      	cmp	r3, #3
 8008748:	f040 8172 	bne.w	8008a30 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008752:	3301      	adds	r3, #1
 8008754:	b2da      	uxtb	r2, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008762:	2b03      	cmp	r3, #3
 8008764:	d903      	bls.n	800876e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	220d      	movs	r2, #13
 800876a:	701a      	strb	r2, [r3, #0]
      break;
 800876c:	e160      	b.n	8008a30 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	795b      	ldrb	r3, [r3, #5]
 8008772:	4619      	mov	r1, r3
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f001 f885 	bl	8009884 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	791b      	ldrb	r3, [r3, #4]
 800877e:	4619      	mov	r1, r3
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f001 f87f 	bl	8009884 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	701a      	strb	r2, [r3, #0]
      break;
 800878c:	e150      	b.n	8008a30 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800878e:	2112      	movs	r1, #18
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f9f1 	bl	8008b78 <USBH_Get_DevDesc>
 8008796:	4603      	mov	r3, r0
 8008798:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800879a:	7bbb      	ldrb	r3, [r7, #14]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d103      	bne.n	80087a8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2202      	movs	r2, #2
 80087a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80087a6:	e145      	b.n	8008a34 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087a8:	7bbb      	ldrb	r3, [r7, #14]
 80087aa:	2b03      	cmp	r3, #3
 80087ac:	f040 8142 	bne.w	8008a34 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80087b6:	3301      	adds	r3, #1
 80087b8:	b2da      	uxtb	r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80087c6:	2b03      	cmp	r3, #3
 80087c8:	d903      	bls.n	80087d2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	220d      	movs	r2, #13
 80087ce:	701a      	strb	r2, [r3, #0]
      break;
 80087d0:	e130      	b.n	8008a34 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	795b      	ldrb	r3, [r3, #5]
 80087d6:	4619      	mov	r1, r3
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f001 f853 	bl	8009884 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	791b      	ldrb	r3, [r3, #4]
 80087e2:	4619      	mov	r1, r3
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f001 f84d 	bl	8009884 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	701a      	strb	r2, [r3, #0]
      break;
 80087f6:	e11d      	b.n	8008a34 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80087f8:	2101      	movs	r1, #1
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fa68 	bl	8008cd0 <USBH_SetAddress>
 8008800:	4603      	mov	r3, r0
 8008802:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008804:	7bbb      	ldrb	r3, [r7, #14]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d132      	bne.n	8008870 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800880a:	2002      	movs	r0, #2
 800880c:	f001 fb30 	bl	8009e70 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2203      	movs	r2, #3
 800881c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	7919      	ldrb	r1, [r3, #4]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008832:	b292      	uxth	r2, r2
 8008834:	9202      	str	r2, [sp, #8]
 8008836:	2200      	movs	r2, #0
 8008838:	9201      	str	r2, [sp, #4]
 800883a:	9300      	str	r3, [sp, #0]
 800883c:	4603      	mov	r3, r0
 800883e:	2280      	movs	r2, #128	; 0x80
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 ffcf 	bl	80097e4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	7959      	ldrb	r1, [r3, #5]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800885a:	b292      	uxth	r2, r2
 800885c:	9202      	str	r2, [sp, #8]
 800885e:	2200      	movs	r2, #0
 8008860:	9201      	str	r2, [sp, #4]
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	4603      	mov	r3, r0
 8008866:	2200      	movs	r2, #0
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 ffbb 	bl	80097e4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800886e:	e0e3      	b.n	8008a38 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008870:	7bbb      	ldrb	r3, [r7, #14]
 8008872:	2b03      	cmp	r3, #3
 8008874:	f040 80e0 	bne.w	8008a38 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	220d      	movs	r2, #13
 800887c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	705a      	strb	r2, [r3, #1]
      break;
 8008884:	e0d8      	b.n	8008a38 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008886:	2109      	movs	r1, #9
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f99d 	bl	8008bc8 <USBH_Get_CfgDesc>
 800888e:	4603      	mov	r3, r0
 8008890:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008892:	7bbb      	ldrb	r3, [r7, #14]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d103      	bne.n	80088a0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2204      	movs	r2, #4
 800889c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800889e:	e0cd      	b.n	8008a3c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088a0:	7bbb      	ldrb	r3, [r7, #14]
 80088a2:	2b03      	cmp	r3, #3
 80088a4:	f040 80ca 	bne.w	8008a3c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80088ae:	3301      	adds	r3, #1
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80088be:	2b03      	cmp	r3, #3
 80088c0:	d903      	bls.n	80088ca <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	220d      	movs	r2, #13
 80088c6:	701a      	strb	r2, [r3, #0]
      break;
 80088c8:	e0b8      	b.n	8008a3c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	795b      	ldrb	r3, [r3, #5]
 80088ce:	4619      	mov	r1, r3
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 ffd7 	bl	8009884 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	791b      	ldrb	r3, [r3, #4]
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 ffd1 	bl	8009884 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	701a      	strb	r2, [r3, #0]
      break;
 80088ee:	e0a5      	b.n	8008a3c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80088f6:	4619      	mov	r1, r3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f965 	bl	8008bc8 <USBH_Get_CfgDesc>
 80088fe:	4603      	mov	r3, r0
 8008900:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008902:	7bbb      	ldrb	r3, [r7, #14]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d103      	bne.n	8008910 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2205      	movs	r2, #5
 800890c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800890e:	e097      	b.n	8008a40 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008910:	7bbb      	ldrb	r3, [r7, #14]
 8008912:	2b03      	cmp	r3, #3
 8008914:	f040 8094 	bne.w	8008a40 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800891e:	3301      	adds	r3, #1
 8008920:	b2da      	uxtb	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800892e:	2b03      	cmp	r3, #3
 8008930:	d903      	bls.n	800893a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	220d      	movs	r2, #13
 8008936:	701a      	strb	r2, [r3, #0]
      break;
 8008938:	e082      	b.n	8008a40 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	795b      	ldrb	r3, [r3, #5]
 800893e:	4619      	mov	r1, r3
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 ff9f 	bl	8009884 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	791b      	ldrb	r3, [r3, #4]
 800894a:	4619      	mov	r1, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 ff99 	bl	8009884 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	701a      	strb	r2, [r3, #0]
      break;
 800895e:	e06f      	b.n	8008a40 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008966:	2b00      	cmp	r3, #0
 8008968:	d019      	beq.n	800899e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008976:	23ff      	movs	r3, #255	; 0xff
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f949 	bl	8008c10 <USBH_Get_StringDesc>
 800897e:	4603      	mov	r3, r0
 8008980:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008982:	7bbb      	ldrb	r3, [r7, #14]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d103      	bne.n	8008990 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2206      	movs	r2, #6
 800898c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800898e:	e059      	b.n	8008a44 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008990:	7bbb      	ldrb	r3, [r7, #14]
 8008992:	2b03      	cmp	r3, #3
 8008994:	d156      	bne.n	8008a44 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2206      	movs	r2, #6
 800899a:	705a      	strb	r2, [r3, #1]
      break;
 800899c:	e052      	b.n	8008a44 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2206      	movs	r2, #6
 80089a2:	705a      	strb	r2, [r3, #1]
      break;
 80089a4:	e04e      	b.n	8008a44 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d019      	beq.n	80089e4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80089bc:	23ff      	movs	r3, #255	; 0xff
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 f926 	bl	8008c10 <USBH_Get_StringDesc>
 80089c4:	4603      	mov	r3, r0
 80089c6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d103      	bne.n	80089d6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2207      	movs	r2, #7
 80089d2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80089d4:	e038      	b.n	8008a48 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80089d6:	7bbb      	ldrb	r3, [r7, #14]
 80089d8:	2b03      	cmp	r3, #3
 80089da:	d135      	bne.n	8008a48 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2207      	movs	r2, #7
 80089e0:	705a      	strb	r2, [r3, #1]
      break;
 80089e2:	e031      	b.n	8008a48 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2207      	movs	r2, #7
 80089e8:	705a      	strb	r2, [r3, #1]
      break;
 80089ea:	e02d      	b.n	8008a48 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d017      	beq.n	8008a26 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008a02:	23ff      	movs	r3, #255	; 0xff
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f903 	bl	8008c10 <USBH_Get_StringDesc>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008a0e:	7bbb      	ldrb	r3, [r7, #14]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d102      	bne.n	8008a1a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008a14:	2300      	movs	r3, #0
 8008a16:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008a18:	e018      	b.n	8008a4c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a1a:	7bbb      	ldrb	r3, [r7, #14]
 8008a1c:	2b03      	cmp	r3, #3
 8008a1e:	d115      	bne.n	8008a4c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	73fb      	strb	r3, [r7, #15]
      break;
 8008a24:	e012      	b.n	8008a4c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008a26:	2300      	movs	r3, #0
 8008a28:	73fb      	strb	r3, [r7, #15]
      break;
 8008a2a:	e00f      	b.n	8008a4c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008a2c:	bf00      	nop
 8008a2e:	e00e      	b.n	8008a4e <USBH_HandleEnum+0x3be>
      break;
 8008a30:	bf00      	nop
 8008a32:	e00c      	b.n	8008a4e <USBH_HandleEnum+0x3be>
      break;
 8008a34:	bf00      	nop
 8008a36:	e00a      	b.n	8008a4e <USBH_HandleEnum+0x3be>
      break;
 8008a38:	bf00      	nop
 8008a3a:	e008      	b.n	8008a4e <USBH_HandleEnum+0x3be>
      break;
 8008a3c:	bf00      	nop
 8008a3e:	e006      	b.n	8008a4e <USBH_HandleEnum+0x3be>
      break;
 8008a40:	bf00      	nop
 8008a42:	e004      	b.n	8008a4e <USBH_HandleEnum+0x3be>
      break;
 8008a44:	bf00      	nop
 8008a46:	e002      	b.n	8008a4e <USBH_HandleEnum+0x3be>
      break;
 8008a48:	bf00      	nop
 8008a4a:	e000      	b.n	8008a4e <USBH_HandleEnum+0x3be>
      break;
 8008a4c:	bf00      	nop
  }
  return Status;
 8008a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3710      	adds	r7, #16
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	683a      	ldr	r2, [r7, #0]
 8008a66:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008a6a:	bf00      	nop
 8008a6c:	370c      	adds	r7, #12
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr

08008a76 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b082      	sub	sp, #8
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a84:	1c5a      	adds	r2, r3, #1
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 f804 	bl	8008a9a <USBH_HandleSof>
}
 8008a92:	bf00      	nop
 8008a94:	3708      	adds	r7, #8
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b082      	sub	sp, #8
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	2b0b      	cmp	r3, #11
 8008aaa:	d10a      	bne.n	8008ac2 <USBH_HandleSof+0x28>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d005      	beq.n	8008ac2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008abc:	699b      	ldr	r3, [r3, #24]
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	4798      	blx	r3
  }
}
 8008ac2:	bf00      	nop
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008aca:	b480      	push	{r7}
 8008acc:	b083      	sub	sp, #12
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008ada:	bf00      	nop
}
 8008adc:	370c      	adds	r7, #12
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr

08008ae6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b083      	sub	sp, #12
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008af6:	bf00      	nop
}
 8008af8:	370c      	adds	r7, #12
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr

08008b02 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008b02:	b480      	push	{r7}
 8008b04:	b083      	sub	sp, #12
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f001 f844 	bl	8009bde <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	791b      	ldrb	r3, [r3, #4]
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fe91 	bl	8009884 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	795b      	ldrb	r3, [r3, #5]
 8008b66:	4619      	mov	r1, r3
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fe8b 	bl	8009884 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af02      	add	r7, sp, #8
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	460b      	mov	r3, r1
 8008b82:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008b8a:	78fb      	ldrb	r3, [r7, #3]
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	4613      	mov	r3, r2
 8008b92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b96:	2100      	movs	r1, #0
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 f864 	bl	8008c66 <USBH_GetDescriptor>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8008ba2:	7bfb      	ldrb	r3, [r7, #15]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10a      	bne.n	8008bbe <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008bb4:	78fa      	ldrb	r2, [r7, #3]
 8008bb6:	b292      	uxth	r2, r2
 8008bb8:	4619      	mov	r1, r3
 8008bba:	f000 f918 	bl	8008dee <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b086      	sub	sp, #24
 8008bcc:	af02      	add	r7, sp, #8
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	331c      	adds	r3, #28
 8008bd8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008bda:	887b      	ldrh	r3, [r7, #2]
 8008bdc:	9300      	str	r3, [sp, #0]
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008be4:	2100      	movs	r1, #0
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f83d 	bl	8008c66 <USBH_GetDescriptor>
 8008bec:	4603      	mov	r3, r0
 8008bee:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008bf0:	7bfb      	ldrb	r3, [r7, #15]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d107      	bne.n	8008c06 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008bf6:	887b      	ldrh	r3, [r7, #2]
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	68b9      	ldr	r1, [r7, #8]
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 f987 	bl	8008f10 <USBH_ParseCfgDesc>
 8008c02:	4603      	mov	r3, r0
 8008c04:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b088      	sub	sp, #32
 8008c14:	af02      	add	r7, sp, #8
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	607a      	str	r2, [r7, #4]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	72fb      	strb	r3, [r7, #11]
 8008c20:	4613      	mov	r3, r2
 8008c22:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008c24:	7afb      	ldrb	r3, [r7, #11]
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008c2c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008c34:	893b      	ldrh	r3, [r7, #8]
 8008c36:	9300      	str	r3, [sp, #0]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f000 f812 	bl	8008c66 <USBH_GetDescriptor>
 8008c42:	4603      	mov	r3, r0
 8008c44:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008c46:	7dfb      	ldrb	r3, [r7, #23]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d107      	bne.n	8008c5c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008c52:	893a      	ldrh	r2, [r7, #8]
 8008c54:	6879      	ldr	r1, [r7, #4]
 8008c56:	4618      	mov	r0, r3
 8008c58:	f000 fb24 	bl	80092a4 <USBH_ParseStringDesc>
  }

  return status;
 8008c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3718      	adds	r7, #24
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b084      	sub	sp, #16
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	60f8      	str	r0, [r7, #12]
 8008c6e:	607b      	str	r3, [r7, #4]
 8008c70:	460b      	mov	r3, r1
 8008c72:	72fb      	strb	r3, [r7, #11]
 8008c74:	4613      	mov	r3, r2
 8008c76:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	789b      	ldrb	r3, [r3, #2]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d11c      	bne.n	8008cba <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008c80:	7afb      	ldrb	r3, [r7, #11]
 8008c82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c86:	b2da      	uxtb	r2, r3
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2206      	movs	r2, #6
 8008c90:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	893a      	ldrh	r2, [r7, #8]
 8008c96:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008c98:	893b      	ldrh	r3, [r7, #8]
 8008c9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ca2:	d104      	bne.n	8008cae <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f240 4209 	movw	r2, #1033	; 0x409
 8008caa:	829a      	strh	r2, [r3, #20]
 8008cac:	e002      	b.n	8008cb4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	8b3a      	ldrh	r2, [r7, #24]
 8008cb8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008cba:	8b3b      	ldrh	r3, [r7, #24]
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	6879      	ldr	r1, [r7, #4]
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f000 fb3d 	bl	8009340 <USBH_CtlReq>
 8008cc6:	4603      	mov	r3, r0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	789b      	ldrb	r3, [r3, #2]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d10f      	bne.n	8008d04 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2205      	movs	r2, #5
 8008cee:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008cf0:	78fb      	ldrb	r3, [r7, #3]
 8008cf2:	b29a      	uxth	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008d04:	2200      	movs	r2, #0
 8008d06:	2100      	movs	r1, #0
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fb19 	bl	8009340 <USBH_CtlReq>
 8008d0e:	4603      	mov	r3, r0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3708      	adds	r7, #8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	460b      	mov	r3, r1
 8008d22:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	789b      	ldrb	r3, [r3, #2]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d10e      	bne.n	8008d4a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2209      	movs	r2, #9
 8008d36:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	887a      	ldrh	r2, [r7, #2]
 8008d3c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 faf6 	bl	8009340 <USBH_CtlReq>
 8008d54:	4603      	mov	r3, r0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b082      	sub	sp, #8
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	460b      	mov	r3, r1
 8008d68:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	789b      	ldrb	r3, [r3, #2]
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d10f      	bne.n	8008d92 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2203      	movs	r2, #3
 8008d7c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008d7e:	78fb      	ldrb	r3, [r7, #3]
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008d92:	2200      	movs	r2, #0
 8008d94:	2100      	movs	r1, #0
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fad2 	bl	8009340 <USBH_CtlReq>
 8008d9c:	4603      	mov	r3, r0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b082      	sub	sp, #8
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
 8008dae:	460b      	mov	r3, r1
 8008db0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	789b      	ldrb	r3, [r3, #2]
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d10f      	bne.n	8008dda <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2202      	movs	r2, #2
 8008dbe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008dcc:	78fb      	ldrb	r3, [r7, #3]
 8008dce:	b29a      	uxth	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008dda:	2200      	movs	r2, #0
 8008ddc:	2100      	movs	r1, #0
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 faae 	bl	8009340 <USBH_CtlReq>
 8008de4:	4603      	mov	r3, r0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008dee:	b480      	push	{r7}
 8008df0:	b085      	sub	sp, #20
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	60f8      	str	r0, [r7, #12]
 8008df6:	60b9      	str	r1, [r7, #8]
 8008df8:	4613      	mov	r3, r2
 8008dfa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	781a      	ldrb	r2, [r3, #0]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	785a      	ldrb	r2, [r3, #1]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	3302      	adds	r3, #2
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	b29a      	uxth	r2, r3
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	3303      	adds	r3, #3
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	021b      	lsls	r3, r3, #8
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	4313      	orrs	r3, r2
 8008e22:	b29a      	uxth	r2, r3
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	791a      	ldrb	r2, [r3, #4]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	795a      	ldrb	r2, [r3, #5]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	799a      	ldrb	r2, [r3, #6]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	79da      	ldrb	r2, [r3, #7]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	79db      	ldrb	r3, [r3, #7]
 8008e4c:	2b20      	cmp	r3, #32
 8008e4e:	dc11      	bgt.n	8008e74 <USBH_ParseDevDesc+0x86>
 8008e50:	2b08      	cmp	r3, #8
 8008e52:	db16      	blt.n	8008e82 <USBH_ParseDevDesc+0x94>
 8008e54:	3b08      	subs	r3, #8
 8008e56:	2201      	movs	r2, #1
 8008e58:	fa02 f303 	lsl.w	r3, r2, r3
 8008e5c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	bf14      	ite	ne
 8008e68:	2301      	movne	r3, #1
 8008e6a:	2300      	moveq	r3, #0
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d102      	bne.n	8008e78 <USBH_ParseDevDesc+0x8a>
 8008e72:	e006      	b.n	8008e82 <USBH_ParseDevDesc+0x94>
 8008e74:	2b40      	cmp	r3, #64	; 0x40
 8008e76:	d104      	bne.n	8008e82 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	79da      	ldrb	r2, [r3, #7]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	71da      	strb	r2, [r3, #7]
      break;
 8008e80:	e003      	b.n	8008e8a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2240      	movs	r2, #64	; 0x40
 8008e86:	71da      	strb	r2, [r3, #7]
      break;
 8008e88:	bf00      	nop
  }

  if (length > 8U)
 8008e8a:	88fb      	ldrh	r3, [r7, #6]
 8008e8c:	2b08      	cmp	r3, #8
 8008e8e:	d939      	bls.n	8008f04 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	3308      	adds	r3, #8
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	3309      	adds	r3, #9
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	021b      	lsls	r3, r3, #8
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	330a      	adds	r3, #10
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	330b      	adds	r3, #11
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	021b      	lsls	r3, r3, #8
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	330c      	adds	r3, #12
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	330d      	adds	r3, #13
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	021b      	lsls	r3, r3, #8
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	4313      	orrs	r3, r2
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	7b9a      	ldrb	r2, [r3, #14]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	7bda      	ldrb	r2, [r3, #15]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	7c1a      	ldrb	r2, [r3, #16]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	7c5a      	ldrb	r2, [r3, #17]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	745a      	strb	r2, [r3, #17]
  }
}
 8008f04:	bf00      	nop
 8008f06:	3714      	adds	r7, #20
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b08c      	sub	sp, #48	; 0x30
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008f24:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008f26:	2300      	movs	r3, #0
 8008f28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008f30:	2300      	movs	r3, #0
 8008f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008f36:	2300      	movs	r3, #0
 8008f38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	781a      	ldrb	r2, [r3, #0]
 8008f44:	6a3b      	ldr	r3, [r7, #32]
 8008f46:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	785a      	ldrb	r2, [r3, #1]
 8008f4c:	6a3b      	ldr	r3, [r7, #32]
 8008f4e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	3302      	adds	r3, #2
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	3303      	adds	r3, #3
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	021b      	lsls	r3, r3, #8
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	4313      	orrs	r3, r2
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f6c:	bf28      	it	cs
 8008f6e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008f72:	b29a      	uxth	r2, r3
 8008f74:	6a3b      	ldr	r3, [r7, #32]
 8008f76:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	791a      	ldrb	r2, [r3, #4]
 8008f7c:	6a3b      	ldr	r3, [r7, #32]
 8008f7e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	795a      	ldrb	r2, [r3, #5]
 8008f84:	6a3b      	ldr	r3, [r7, #32]
 8008f86:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	799a      	ldrb	r2, [r3, #6]
 8008f8c:	6a3b      	ldr	r3, [r7, #32]
 8008f8e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	79da      	ldrb	r2, [r3, #7]
 8008f94:	6a3b      	ldr	r3, [r7, #32]
 8008f96:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	7a1a      	ldrb	r2, [r3, #8]
 8008f9c:	6a3b      	ldr	r3, [r7, #32]
 8008f9e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008fa0:	6a3b      	ldr	r3, [r7, #32]
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	2b09      	cmp	r3, #9
 8008fa6:	d002      	beq.n	8008fae <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008fa8:	6a3b      	ldr	r3, [r7, #32]
 8008faa:	2209      	movs	r2, #9
 8008fac:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008fae:	88fb      	ldrh	r3, [r7, #6]
 8008fb0:	2b09      	cmp	r3, #9
 8008fb2:	f240 809d 	bls.w	80090f0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008fb6:	2309      	movs	r3, #9
 8008fb8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008fbe:	e081      	b.n	80090c4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008fc0:	f107 0316 	add.w	r3, r7, #22
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fc8:	f000 f99f 	bl	800930a <USBH_GetNextDesc>
 8008fcc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd0:	785b      	ldrb	r3, [r3, #1]
 8008fd2:	2b04      	cmp	r3, #4
 8008fd4:	d176      	bne.n	80090c4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	2b09      	cmp	r3, #9
 8008fdc:	d002      	beq.n	8008fe4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe0:	2209      	movs	r2, #9
 8008fe2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fe8:	221a      	movs	r2, #26
 8008fea:	fb02 f303 	mul.w	r3, r2, r3
 8008fee:	3308      	adds	r3, #8
 8008ff0:	6a3a      	ldr	r2, [r7, #32]
 8008ff2:	4413      	add	r3, r2
 8008ff4:	3302      	adds	r3, #2
 8008ff6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008ff8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ffa:	69f8      	ldr	r0, [r7, #28]
 8008ffc:	f000 f87e 	bl	80090fc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009000:	2300      	movs	r3, #0
 8009002:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009006:	2300      	movs	r3, #0
 8009008:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800900a:	e043      	b.n	8009094 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800900c:	f107 0316 	add.w	r3, r7, #22
 8009010:	4619      	mov	r1, r3
 8009012:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009014:	f000 f979 	bl	800930a <USBH_GetNextDesc>
 8009018:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800901a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901c:	785b      	ldrb	r3, [r3, #1]
 800901e:	2b05      	cmp	r3, #5
 8009020:	d138      	bne.n	8009094 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	795b      	ldrb	r3, [r3, #5]
 8009026:	2b01      	cmp	r3, #1
 8009028:	d10f      	bne.n	800904a <USBH_ParseCfgDesc+0x13a>
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	799b      	ldrb	r3, [r3, #6]
 800902e:	2b02      	cmp	r3, #2
 8009030:	d10b      	bne.n	800904a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	79db      	ldrb	r3, [r3, #7]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d10f      	bne.n	800905a <USBH_ParseCfgDesc+0x14a>
 800903a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	2b09      	cmp	r3, #9
 8009040:	d00b      	beq.n	800905a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8009042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009044:	2209      	movs	r2, #9
 8009046:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009048:	e007      	b.n	800905a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800904a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	2b07      	cmp	r3, #7
 8009050:	d004      	beq.n	800905c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009054:	2207      	movs	r2, #7
 8009056:	701a      	strb	r2, [r3, #0]
 8009058:	e000      	b.n	800905c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800905a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800905c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009060:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009064:	3201      	adds	r2, #1
 8009066:	00d2      	lsls	r2, r2, #3
 8009068:	211a      	movs	r1, #26
 800906a:	fb01 f303 	mul.w	r3, r1, r3
 800906e:	4413      	add	r3, r2
 8009070:	3308      	adds	r3, #8
 8009072:	6a3a      	ldr	r2, [r7, #32]
 8009074:	4413      	add	r3, r2
 8009076:	3304      	adds	r3, #4
 8009078:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800907a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800907c:	69b9      	ldr	r1, [r7, #24]
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	f000 f86b 	bl	800915a <USBH_ParseEPDesc>
 8009084:	4603      	mov	r3, r0
 8009086:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800908a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800908e:	3301      	adds	r3, #1
 8009090:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	791b      	ldrb	r3, [r3, #4]
 8009098:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800909c:	429a      	cmp	r2, r3
 800909e:	d204      	bcs.n	80090aa <USBH_ParseCfgDesc+0x19a>
 80090a0:	6a3b      	ldr	r3, [r7, #32]
 80090a2:	885a      	ldrh	r2, [r3, #2]
 80090a4:	8afb      	ldrh	r3, [r7, #22]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d8b0      	bhi.n	800900c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	791b      	ldrb	r3, [r3, #4]
 80090ae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d201      	bcs.n	80090ba <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80090b6:	2303      	movs	r3, #3
 80090b8:	e01c      	b.n	80090f4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80090ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090be:	3301      	adds	r3, #1
 80090c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80090c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d805      	bhi.n	80090d8 <USBH_ParseCfgDesc+0x1c8>
 80090cc:	6a3b      	ldr	r3, [r7, #32]
 80090ce:	885a      	ldrh	r2, [r3, #2]
 80090d0:	8afb      	ldrh	r3, [r7, #22]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	f63f af74 	bhi.w	8008fc0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80090d8:	6a3b      	ldr	r3, [r7, #32]
 80090da:	791b      	ldrb	r3, [r3, #4]
 80090dc:	2b02      	cmp	r3, #2
 80090de:	bf28      	it	cs
 80090e0:	2302      	movcs	r3, #2
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d201      	bcs.n	80090f0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80090ec:	2303      	movs	r3, #3
 80090ee:	e001      	b.n	80090f4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80090f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3730      	adds	r7, #48	; 0x30
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	781a      	ldrb	r2, [r3, #0]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	785a      	ldrb	r2, [r3, #1]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	789a      	ldrb	r2, [r3, #2]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	78da      	ldrb	r2, [r3, #3]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	791a      	ldrb	r2, [r3, #4]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	795a      	ldrb	r2, [r3, #5]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	799a      	ldrb	r2, [r3, #6]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	79da      	ldrb	r2, [r3, #7]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	7a1a      	ldrb	r2, [r3, #8]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	721a      	strb	r2, [r3, #8]
}
 800914e:	bf00      	nop
 8009150:	370c      	adds	r7, #12
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr

0800915a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800915a:	b480      	push	{r7}
 800915c:	b087      	sub	sp, #28
 800915e:	af00      	add	r7, sp, #0
 8009160:	60f8      	str	r0, [r7, #12]
 8009162:	60b9      	str	r1, [r7, #8]
 8009164:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009166:	2300      	movs	r3, #0
 8009168:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	781a      	ldrb	r2, [r3, #0]
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	785a      	ldrb	r2, [r3, #1]
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	789a      	ldrb	r2, [r3, #2]
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	78da      	ldrb	r2, [r3, #3]
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	3304      	adds	r3, #4
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	b29a      	uxth	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	3305      	adds	r3, #5
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	b29b      	uxth	r3, r3
 800919a:	021b      	lsls	r3, r3, #8
 800919c:	b29b      	uxth	r3, r3
 800919e:	4313      	orrs	r3, r2
 80091a0:	b29a      	uxth	r2, r3
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	799a      	ldrb	r2, [r3, #6]
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	889b      	ldrh	r3, [r3, #4]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d102      	bne.n	80091bc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80091b6:	2303      	movs	r3, #3
 80091b8:	75fb      	strb	r3, [r7, #23]
 80091ba:	e033      	b.n	8009224 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	889b      	ldrh	r3, [r3, #4]
 80091c0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80091c4:	f023 0307 	bic.w	r3, r3, #7
 80091c8:	b29a      	uxth	r2, r3
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	889b      	ldrh	r3, [r3, #4]
 80091d2:	b21a      	sxth	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	3304      	adds	r3, #4
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	b299      	uxth	r1, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	3305      	adds	r3, #5
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	021b      	lsls	r3, r3, #8
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	430b      	orrs	r3, r1
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d110      	bne.n	8009216 <USBH_ParseEPDesc+0xbc>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	3304      	adds	r3, #4
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	b299      	uxth	r1, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	3305      	adds	r3, #5
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	b29b      	uxth	r3, r3
 8009204:	021b      	lsls	r3, r3, #8
 8009206:	b29b      	uxth	r3, r3
 8009208:	430b      	orrs	r3, r1
 800920a:	b29b      	uxth	r3, r3
 800920c:	b21b      	sxth	r3, r3
 800920e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009212:	b21b      	sxth	r3, r3
 8009214:	e001      	b.n	800921a <USBH_ParseEPDesc+0xc0>
 8009216:	f44f 7300 	mov.w	r3, #512	; 0x200
 800921a:	4313      	orrs	r3, r2
 800921c:	b21b      	sxth	r3, r3
 800921e:	b29a      	uxth	r2, r3
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800922a:	2b00      	cmp	r3, #0
 800922c:	d116      	bne.n	800925c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	78db      	ldrb	r3, [r3, #3]
 8009232:	f003 0303 	and.w	r3, r3, #3
 8009236:	2b01      	cmp	r3, #1
 8009238:	d005      	beq.n	8009246 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	78db      	ldrb	r3, [r3, #3]
 800923e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009242:	2b03      	cmp	r3, #3
 8009244:	d127      	bne.n	8009296 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	799b      	ldrb	r3, [r3, #6]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d003      	beq.n	8009256 <USBH_ParseEPDesc+0xfc>
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	799b      	ldrb	r3, [r3, #6]
 8009252:	2b10      	cmp	r3, #16
 8009254:	d91f      	bls.n	8009296 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009256:	2303      	movs	r3, #3
 8009258:	75fb      	strb	r3, [r7, #23]
 800925a:	e01c      	b.n	8009296 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	78db      	ldrb	r3, [r3, #3]
 8009260:	f003 0303 	and.w	r3, r3, #3
 8009264:	2b01      	cmp	r3, #1
 8009266:	d10a      	bne.n	800927e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	799b      	ldrb	r3, [r3, #6]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d003      	beq.n	8009278 <USBH_ParseEPDesc+0x11e>
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	799b      	ldrb	r3, [r3, #6]
 8009274:	2b10      	cmp	r3, #16
 8009276:	d90e      	bls.n	8009296 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009278:	2303      	movs	r3, #3
 800927a:	75fb      	strb	r3, [r7, #23]
 800927c:	e00b      	b.n	8009296 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	78db      	ldrb	r3, [r3, #3]
 8009282:	f003 0303 	and.w	r3, r3, #3
 8009286:	2b03      	cmp	r3, #3
 8009288:	d105      	bne.n	8009296 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	799b      	ldrb	r3, [r3, #6]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d101      	bne.n	8009296 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009292:	2303      	movs	r3, #3
 8009294:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8009296:	7dfb      	ldrb	r3, [r7, #23]
}
 8009298:	4618      	mov	r0, r3
 800929a:	371c      	adds	r7, #28
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b087      	sub	sp, #28
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	4613      	mov	r3, r2
 80092b0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	3301      	adds	r3, #1
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	2b03      	cmp	r3, #3
 80092ba:	d120      	bne.n	80092fe <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	1e9a      	subs	r2, r3, #2
 80092c2:	88fb      	ldrh	r3, [r7, #6]
 80092c4:	4293      	cmp	r3, r2
 80092c6:	bf28      	it	cs
 80092c8:	4613      	movcs	r3, r2
 80092ca:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	3302      	adds	r3, #2
 80092d0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80092d2:	2300      	movs	r3, #0
 80092d4:	82fb      	strh	r3, [r7, #22]
 80092d6:	e00b      	b.n	80092f0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80092d8:	8afb      	ldrh	r3, [r7, #22]
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	4413      	add	r3, r2
 80092de:	781a      	ldrb	r2, [r3, #0]
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	3301      	adds	r3, #1
 80092e8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80092ea:	8afb      	ldrh	r3, [r7, #22]
 80092ec:	3302      	adds	r3, #2
 80092ee:	82fb      	strh	r3, [r7, #22]
 80092f0:	8afa      	ldrh	r2, [r7, #22]
 80092f2:	8abb      	ldrh	r3, [r7, #20]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d3ef      	bcc.n	80092d8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	2200      	movs	r2, #0
 80092fc:	701a      	strb	r2, [r3, #0]
  }
}
 80092fe:	bf00      	nop
 8009300:	371c      	adds	r7, #28
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr

0800930a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800930a:	b480      	push	{r7}
 800930c:	b085      	sub	sp, #20
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
 8009312:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	881a      	ldrh	r2, [r3, #0]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	b29b      	uxth	r3, r3
 800931e:	4413      	add	r3, r2
 8009320:	b29a      	uxth	r2, r3
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4413      	add	r3, r2
 8009330:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009332:	68fb      	ldr	r3, [r7, #12]
}
 8009334:	4618      	mov	r0, r3
 8009336:	3714      	adds	r7, #20
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	4613      	mov	r3, r2
 800934c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800934e:	2301      	movs	r3, #1
 8009350:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	789b      	ldrb	r3, [r3, #2]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d002      	beq.n	8009360 <USBH_CtlReq+0x20>
 800935a:	2b02      	cmp	r3, #2
 800935c:	d00f      	beq.n	800937e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800935e:	e027      	b.n	80093b0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	68ba      	ldr	r2, [r7, #8]
 8009364:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	88fa      	ldrh	r2, [r7, #6]
 800936a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2201      	movs	r2, #1
 8009370:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2202      	movs	r2, #2
 8009376:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009378:	2301      	movs	r3, #1
 800937a:	75fb      	strb	r3, [r7, #23]
      break;
 800937c:	e018      	b.n	80093b0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800937e:	68f8      	ldr	r0, [r7, #12]
 8009380:	f000 f81c 	bl	80093bc <USBH_HandleControl>
 8009384:	4603      	mov	r3, r0
 8009386:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009388:	7dfb      	ldrb	r3, [r7, #23]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d002      	beq.n	8009394 <USBH_CtlReq+0x54>
 800938e:	7dfb      	ldrb	r3, [r7, #23]
 8009390:	2b03      	cmp	r3, #3
 8009392:	d106      	bne.n	80093a2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2201      	movs	r2, #1
 8009398:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	761a      	strb	r2, [r3, #24]
      break;
 80093a0:	e005      	b.n	80093ae <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80093a2:	7dfb      	ldrb	r3, [r7, #23]
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	d102      	bne.n	80093ae <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2201      	movs	r2, #1
 80093ac:	709a      	strb	r2, [r3, #2]
      break;
 80093ae:	bf00      	nop
  }
  return status;
 80093b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3718      	adds	r7, #24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
	...

080093bc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b086      	sub	sp, #24
 80093c0:	af02      	add	r7, sp, #8
 80093c2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80093c4:	2301      	movs	r3, #1
 80093c6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80093c8:	2300      	movs	r3, #0
 80093ca:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	7e1b      	ldrb	r3, [r3, #24]
 80093d0:	3b01      	subs	r3, #1
 80093d2:	2b0a      	cmp	r3, #10
 80093d4:	f200 8156 	bhi.w	8009684 <USBH_HandleControl+0x2c8>
 80093d8:	a201      	add	r2, pc, #4	; (adr r2, 80093e0 <USBH_HandleControl+0x24>)
 80093da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093de:	bf00      	nop
 80093e0:	0800940d 	.word	0x0800940d
 80093e4:	08009427 	.word	0x08009427
 80093e8:	08009491 	.word	0x08009491
 80093ec:	080094b7 	.word	0x080094b7
 80093f0:	080094ef 	.word	0x080094ef
 80093f4:	08009519 	.word	0x08009519
 80093f8:	0800956b 	.word	0x0800956b
 80093fc:	0800958d 	.word	0x0800958d
 8009400:	080095c9 	.word	0x080095c9
 8009404:	080095ef 	.word	0x080095ef
 8009408:	0800962d 	.word	0x0800962d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f103 0110 	add.w	r1, r3, #16
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	795b      	ldrb	r3, [r3, #5]
 8009416:	461a      	mov	r2, r3
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f943 	bl	80096a4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2202      	movs	r2, #2
 8009422:	761a      	strb	r2, [r3, #24]
      break;
 8009424:	e139      	b.n	800969a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	795b      	ldrb	r3, [r3, #5]
 800942a:	4619      	mov	r1, r3
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fcc5 	bl	8009dbc <USBH_LL_GetURBState>
 8009432:	4603      	mov	r3, r0
 8009434:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009436:	7bbb      	ldrb	r3, [r7, #14]
 8009438:	2b01      	cmp	r3, #1
 800943a:	d11e      	bne.n	800947a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	7c1b      	ldrb	r3, [r3, #16]
 8009440:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009444:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	8adb      	ldrh	r3, [r3, #22]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00a      	beq.n	8009464 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800944e:	7b7b      	ldrb	r3, [r7, #13]
 8009450:	2b80      	cmp	r3, #128	; 0x80
 8009452:	d103      	bne.n	800945c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2203      	movs	r2, #3
 8009458:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800945a:	e115      	b.n	8009688 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2205      	movs	r2, #5
 8009460:	761a      	strb	r2, [r3, #24]
      break;
 8009462:	e111      	b.n	8009688 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009464:	7b7b      	ldrb	r3, [r7, #13]
 8009466:	2b80      	cmp	r3, #128	; 0x80
 8009468:	d103      	bne.n	8009472 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2209      	movs	r2, #9
 800946e:	761a      	strb	r2, [r3, #24]
      break;
 8009470:	e10a      	b.n	8009688 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2207      	movs	r2, #7
 8009476:	761a      	strb	r2, [r3, #24]
      break;
 8009478:	e106      	b.n	8009688 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800947a:	7bbb      	ldrb	r3, [r7, #14]
 800947c:	2b04      	cmp	r3, #4
 800947e:	d003      	beq.n	8009488 <USBH_HandleControl+0xcc>
 8009480:	7bbb      	ldrb	r3, [r7, #14]
 8009482:	2b02      	cmp	r3, #2
 8009484:	f040 8100 	bne.w	8009688 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	220b      	movs	r2, #11
 800948c:	761a      	strb	r2, [r3, #24]
      break;
 800948e:	e0fb      	b.n	8009688 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009496:	b29a      	uxth	r2, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6899      	ldr	r1, [r3, #8]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	899a      	ldrh	r2, [r3, #12]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	791b      	ldrb	r3, [r3, #4]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 f93a 	bl	8009722 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2204      	movs	r2, #4
 80094b2:	761a      	strb	r2, [r3, #24]
      break;
 80094b4:	e0f1      	b.n	800969a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	791b      	ldrb	r3, [r3, #4]
 80094ba:	4619      	mov	r1, r3
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 fc7d 	bl	8009dbc <USBH_LL_GetURBState>
 80094c2:	4603      	mov	r3, r0
 80094c4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80094c6:	7bbb      	ldrb	r3, [r7, #14]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d102      	bne.n	80094d2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2209      	movs	r2, #9
 80094d0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80094d2:	7bbb      	ldrb	r3, [r7, #14]
 80094d4:	2b05      	cmp	r3, #5
 80094d6:	d102      	bne.n	80094de <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80094d8:	2303      	movs	r3, #3
 80094da:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80094dc:	e0d6      	b.n	800968c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80094de:	7bbb      	ldrb	r3, [r7, #14]
 80094e0:	2b04      	cmp	r3, #4
 80094e2:	f040 80d3 	bne.w	800968c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	220b      	movs	r2, #11
 80094ea:	761a      	strb	r2, [r3, #24]
      break;
 80094ec:	e0ce      	b.n	800968c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6899      	ldr	r1, [r3, #8]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	899a      	ldrh	r2, [r3, #12]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	795b      	ldrb	r3, [r3, #5]
 80094fa:	2001      	movs	r0, #1
 80094fc:	9000      	str	r0, [sp, #0]
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f8ea 	bl	80096d8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800950a:	b29a      	uxth	r2, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2206      	movs	r2, #6
 8009514:	761a      	strb	r2, [r3, #24]
      break;
 8009516:	e0c0      	b.n	800969a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	795b      	ldrb	r3, [r3, #5]
 800951c:	4619      	mov	r1, r3
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 fc4c 	bl	8009dbc <USBH_LL_GetURBState>
 8009524:	4603      	mov	r3, r0
 8009526:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009528:	7bbb      	ldrb	r3, [r7, #14]
 800952a:	2b01      	cmp	r3, #1
 800952c:	d103      	bne.n	8009536 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2207      	movs	r2, #7
 8009532:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009534:	e0ac      	b.n	8009690 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009536:	7bbb      	ldrb	r3, [r7, #14]
 8009538:	2b05      	cmp	r3, #5
 800953a:	d105      	bne.n	8009548 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	220c      	movs	r2, #12
 8009540:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009542:	2303      	movs	r3, #3
 8009544:	73fb      	strb	r3, [r7, #15]
      break;
 8009546:	e0a3      	b.n	8009690 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009548:	7bbb      	ldrb	r3, [r7, #14]
 800954a:	2b02      	cmp	r3, #2
 800954c:	d103      	bne.n	8009556 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2205      	movs	r2, #5
 8009552:	761a      	strb	r2, [r3, #24]
      break;
 8009554:	e09c      	b.n	8009690 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009556:	7bbb      	ldrb	r3, [r7, #14]
 8009558:	2b04      	cmp	r3, #4
 800955a:	f040 8099 	bne.w	8009690 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	220b      	movs	r2, #11
 8009562:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009564:	2302      	movs	r3, #2
 8009566:	73fb      	strb	r3, [r7, #15]
      break;
 8009568:	e092      	b.n	8009690 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	791b      	ldrb	r3, [r3, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	2100      	movs	r1, #0
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 f8d5 	bl	8009722 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800957e:	b29a      	uxth	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2208      	movs	r2, #8
 8009588:	761a      	strb	r2, [r3, #24]

      break;
 800958a:	e086      	b.n	800969a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	791b      	ldrb	r3, [r3, #4]
 8009590:	4619      	mov	r1, r3
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 fc12 	bl	8009dbc <USBH_LL_GetURBState>
 8009598:	4603      	mov	r3, r0
 800959a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800959c:	7bbb      	ldrb	r3, [r7, #14]
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d105      	bne.n	80095ae <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	220d      	movs	r2, #13
 80095a6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80095a8:	2300      	movs	r3, #0
 80095aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80095ac:	e072      	b.n	8009694 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80095ae:	7bbb      	ldrb	r3, [r7, #14]
 80095b0:	2b04      	cmp	r3, #4
 80095b2:	d103      	bne.n	80095bc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	220b      	movs	r2, #11
 80095b8:	761a      	strb	r2, [r3, #24]
      break;
 80095ba:	e06b      	b.n	8009694 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80095bc:	7bbb      	ldrb	r3, [r7, #14]
 80095be:	2b05      	cmp	r3, #5
 80095c0:	d168      	bne.n	8009694 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80095c2:	2303      	movs	r3, #3
 80095c4:	73fb      	strb	r3, [r7, #15]
      break;
 80095c6:	e065      	b.n	8009694 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	795b      	ldrb	r3, [r3, #5]
 80095cc:	2201      	movs	r2, #1
 80095ce:	9200      	str	r2, [sp, #0]
 80095d0:	2200      	movs	r2, #0
 80095d2:	2100      	movs	r1, #0
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f87f 	bl	80096d8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	220a      	movs	r2, #10
 80095ea:	761a      	strb	r2, [r3, #24]
      break;
 80095ec:	e055      	b.n	800969a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	795b      	ldrb	r3, [r3, #5]
 80095f2:	4619      	mov	r1, r3
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 fbe1 	bl	8009dbc <USBH_LL_GetURBState>
 80095fa:	4603      	mov	r3, r0
 80095fc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80095fe:	7bbb      	ldrb	r3, [r7, #14]
 8009600:	2b01      	cmp	r3, #1
 8009602:	d105      	bne.n	8009610 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009604:	2300      	movs	r3, #0
 8009606:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	220d      	movs	r2, #13
 800960c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800960e:	e043      	b.n	8009698 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009610:	7bbb      	ldrb	r3, [r7, #14]
 8009612:	2b02      	cmp	r3, #2
 8009614:	d103      	bne.n	800961e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2209      	movs	r2, #9
 800961a:	761a      	strb	r2, [r3, #24]
      break;
 800961c:	e03c      	b.n	8009698 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800961e:	7bbb      	ldrb	r3, [r7, #14]
 8009620:	2b04      	cmp	r3, #4
 8009622:	d139      	bne.n	8009698 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	220b      	movs	r2, #11
 8009628:	761a      	strb	r2, [r3, #24]
      break;
 800962a:	e035      	b.n	8009698 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	7e5b      	ldrb	r3, [r3, #25]
 8009630:	3301      	adds	r3, #1
 8009632:	b2da      	uxtb	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	765a      	strb	r2, [r3, #25]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	7e5b      	ldrb	r3, [r3, #25]
 800963c:	2b02      	cmp	r3, #2
 800963e:	d806      	bhi.n	800964e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2201      	movs	r2, #1
 8009644:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2201      	movs	r2, #1
 800964a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800964c:	e025      	b.n	800969a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009654:	2106      	movs	r1, #6
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	795b      	ldrb	r3, [r3, #5]
 8009664:	4619      	mov	r1, r3
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 f90c 	bl	8009884 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	791b      	ldrb	r3, [r3, #4]
 8009670:	4619      	mov	r1, r3
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f906 	bl	8009884 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800967e:	2302      	movs	r3, #2
 8009680:	73fb      	strb	r3, [r7, #15]
      break;
 8009682:	e00a      	b.n	800969a <USBH_HandleControl+0x2de>

    default:
      break;
 8009684:	bf00      	nop
 8009686:	e008      	b.n	800969a <USBH_HandleControl+0x2de>
      break;
 8009688:	bf00      	nop
 800968a:	e006      	b.n	800969a <USBH_HandleControl+0x2de>
      break;
 800968c:	bf00      	nop
 800968e:	e004      	b.n	800969a <USBH_HandleControl+0x2de>
      break;
 8009690:	bf00      	nop
 8009692:	e002      	b.n	800969a <USBH_HandleControl+0x2de>
      break;
 8009694:	bf00      	nop
 8009696:	e000      	b.n	800969a <USBH_HandleControl+0x2de>
      break;
 8009698:	bf00      	nop
  }

  return status;
 800969a:	7bfb      	ldrb	r3, [r7, #15]
}
 800969c:	4618      	mov	r0, r3
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b088      	sub	sp, #32
 80096a8:	af04      	add	r7, sp, #16
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	4613      	mov	r3, r2
 80096b0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80096b2:	79f9      	ldrb	r1, [r7, #7]
 80096b4:	2300      	movs	r3, #0
 80096b6:	9303      	str	r3, [sp, #12]
 80096b8:	2308      	movs	r3, #8
 80096ba:	9302      	str	r3, [sp, #8]
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	9301      	str	r3, [sp, #4]
 80096c0:	2300      	movs	r3, #0
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	2300      	movs	r3, #0
 80096c6:	2200      	movs	r2, #0
 80096c8:	68f8      	ldr	r0, [r7, #12]
 80096ca:	f000 fb46 	bl	8009d5a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b088      	sub	sp, #32
 80096dc:	af04      	add	r7, sp, #16
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	4611      	mov	r1, r2
 80096e4:	461a      	mov	r2, r3
 80096e6:	460b      	mov	r3, r1
 80096e8:	80fb      	strh	r3, [r7, #6]
 80096ea:	4613      	mov	r3, r2
 80096ec:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d001      	beq.n	80096fc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80096f8:	2300      	movs	r3, #0
 80096fa:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80096fc:	7979      	ldrb	r1, [r7, #5]
 80096fe:	7e3b      	ldrb	r3, [r7, #24]
 8009700:	9303      	str	r3, [sp, #12]
 8009702:	88fb      	ldrh	r3, [r7, #6]
 8009704:	9302      	str	r3, [sp, #8]
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	9301      	str	r3, [sp, #4]
 800970a:	2301      	movs	r3, #1
 800970c:	9300      	str	r3, [sp, #0]
 800970e:	2300      	movs	r3, #0
 8009710:	2200      	movs	r2, #0
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f000 fb21 	bl	8009d5a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b088      	sub	sp, #32
 8009726:	af04      	add	r7, sp, #16
 8009728:	60f8      	str	r0, [r7, #12]
 800972a:	60b9      	str	r1, [r7, #8]
 800972c:	4611      	mov	r1, r2
 800972e:	461a      	mov	r2, r3
 8009730:	460b      	mov	r3, r1
 8009732:	80fb      	strh	r3, [r7, #6]
 8009734:	4613      	mov	r3, r2
 8009736:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009738:	7979      	ldrb	r1, [r7, #5]
 800973a:	2300      	movs	r3, #0
 800973c:	9303      	str	r3, [sp, #12]
 800973e:	88fb      	ldrh	r3, [r7, #6]
 8009740:	9302      	str	r3, [sp, #8]
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	9301      	str	r3, [sp, #4]
 8009746:	2301      	movs	r3, #1
 8009748:	9300      	str	r3, [sp, #0]
 800974a:	2300      	movs	r3, #0
 800974c:	2201      	movs	r2, #1
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f000 fb03 	bl	8009d5a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009754:	2300      	movs	r3, #0

}
 8009756:	4618      	mov	r0, r3
 8009758:	3710      	adds	r7, #16
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b088      	sub	sp, #32
 8009762:	af04      	add	r7, sp, #16
 8009764:	60f8      	str	r0, [r7, #12]
 8009766:	60b9      	str	r1, [r7, #8]
 8009768:	4611      	mov	r1, r2
 800976a:	461a      	mov	r2, r3
 800976c:	460b      	mov	r3, r1
 800976e:	80fb      	strh	r3, [r7, #6]
 8009770:	4613      	mov	r3, r2
 8009772:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800977a:	2b00      	cmp	r3, #0
 800977c:	d001      	beq.n	8009782 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800977e:	2300      	movs	r3, #0
 8009780:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009782:	7979      	ldrb	r1, [r7, #5]
 8009784:	7e3b      	ldrb	r3, [r7, #24]
 8009786:	9303      	str	r3, [sp, #12]
 8009788:	88fb      	ldrh	r3, [r7, #6]
 800978a:	9302      	str	r3, [sp, #8]
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	9301      	str	r3, [sp, #4]
 8009790:	2301      	movs	r3, #1
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	2302      	movs	r3, #2
 8009796:	2200      	movs	r2, #0
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f000 fade 	bl	8009d5a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b088      	sub	sp, #32
 80097ac:	af04      	add	r7, sp, #16
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	4611      	mov	r1, r2
 80097b4:	461a      	mov	r2, r3
 80097b6:	460b      	mov	r3, r1
 80097b8:	80fb      	strh	r3, [r7, #6]
 80097ba:	4613      	mov	r3, r2
 80097bc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80097be:	7979      	ldrb	r1, [r7, #5]
 80097c0:	2300      	movs	r3, #0
 80097c2:	9303      	str	r3, [sp, #12]
 80097c4:	88fb      	ldrh	r3, [r7, #6]
 80097c6:	9302      	str	r3, [sp, #8]
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	9301      	str	r3, [sp, #4]
 80097cc:	2301      	movs	r3, #1
 80097ce:	9300      	str	r3, [sp, #0]
 80097d0:	2302      	movs	r3, #2
 80097d2:	2201      	movs	r2, #1
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f000 fac0 	bl	8009d5a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3710      	adds	r7, #16
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af04      	add	r7, sp, #16
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	4608      	mov	r0, r1
 80097ee:	4611      	mov	r1, r2
 80097f0:	461a      	mov	r2, r3
 80097f2:	4603      	mov	r3, r0
 80097f4:	70fb      	strb	r3, [r7, #3]
 80097f6:	460b      	mov	r3, r1
 80097f8:	70bb      	strb	r3, [r7, #2]
 80097fa:	4613      	mov	r3, r2
 80097fc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80097fe:	7878      	ldrb	r0, [r7, #1]
 8009800:	78ba      	ldrb	r2, [r7, #2]
 8009802:	78f9      	ldrb	r1, [r7, #3]
 8009804:	8b3b      	ldrh	r3, [r7, #24]
 8009806:	9302      	str	r3, [sp, #8]
 8009808:	7d3b      	ldrb	r3, [r7, #20]
 800980a:	9301      	str	r3, [sp, #4]
 800980c:	7c3b      	ldrb	r3, [r7, #16]
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	4603      	mov	r3, r0
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fa53 	bl	8009cbe <USBH_LL_OpenPipe>

  return USBH_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b082      	sub	sp, #8
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
 800982a:	460b      	mov	r3, r1
 800982c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800982e:	78fb      	ldrb	r3, [r7, #3]
 8009830:	4619      	mov	r1, r3
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 fa72 	bl	8009d1c <USBH_LL_ClosePipe>

  return USBH_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3708      	adds	r7, #8
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b084      	sub	sp, #16
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
 800984a:	460b      	mov	r3, r1
 800984c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 f836 	bl	80098c0 <USBH_GetFreePipe>
 8009854:	4603      	mov	r3, r0
 8009856:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009858:	89fb      	ldrh	r3, [r7, #14]
 800985a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800985e:	4293      	cmp	r3, r2
 8009860:	d00a      	beq.n	8009878 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009862:	78fa      	ldrb	r2, [r7, #3]
 8009864:	89fb      	ldrh	r3, [r7, #14]
 8009866:	f003 030f 	and.w	r3, r3, #15
 800986a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800986e:	6879      	ldr	r1, [r7, #4]
 8009870:	33e0      	adds	r3, #224	; 0xe0
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	440b      	add	r3, r1
 8009876:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009878:	89fb      	ldrh	r3, [r7, #14]
 800987a:	b2db      	uxtb	r3, r3
}
 800987c:	4618      	mov	r0, r3
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	460b      	mov	r3, r1
 800988e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009890:	78fb      	ldrb	r3, [r7, #3]
 8009892:	2b0f      	cmp	r3, #15
 8009894:	d80d      	bhi.n	80098b2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009896:	78fb      	ldrb	r3, [r7, #3]
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	33e0      	adds	r3, #224	; 0xe0
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4413      	add	r3, r2
 80098a0:	685a      	ldr	r2, [r3, #4]
 80098a2:	78fb      	ldrb	r3, [r7, #3]
 80098a4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80098a8:	6879      	ldr	r1, [r7, #4]
 80098aa:	33e0      	adds	r3, #224	; 0xe0
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	440b      	add	r3, r1
 80098b0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	370c      	adds	r7, #12
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b085      	sub	sp, #20
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80098c8:	2300      	movs	r3, #0
 80098ca:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80098cc:	2300      	movs	r3, #0
 80098ce:	73fb      	strb	r3, [r7, #15]
 80098d0:	e00f      	b.n	80098f2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80098d2:	7bfb      	ldrb	r3, [r7, #15]
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	33e0      	adds	r3, #224	; 0xe0
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	4413      	add	r3, r2
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d102      	bne.n	80098ec <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80098e6:	7bfb      	ldrb	r3, [r7, #15]
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	e007      	b.n	80098fc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80098ec:	7bfb      	ldrb	r3, [r7, #15]
 80098ee:	3301      	adds	r3, #1
 80098f0:	73fb      	strb	r3, [r7, #15]
 80098f2:	7bfb      	ldrb	r3, [r7, #15]
 80098f4:	2b0f      	cmp	r3, #15
 80098f6:	d9ec      	bls.n	80098d2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80098f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3714      	adds	r7, #20
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800990c:	2201      	movs	r2, #1
 800990e:	490e      	ldr	r1, [pc, #56]	; (8009948 <MX_USB_HOST_Init+0x40>)
 8009910:	480e      	ldr	r0, [pc, #56]	; (800994c <MX_USB_HOST_Init+0x44>)
 8009912:	f7fe fba7 	bl	8008064 <USBH_Init>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d001      	beq.n	8009920 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800991c:	f7f8 fb94 	bl	8002048 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009920:	490b      	ldr	r1, [pc, #44]	; (8009950 <MX_USB_HOST_Init+0x48>)
 8009922:	480a      	ldr	r0, [pc, #40]	; (800994c <MX_USB_HOST_Init+0x44>)
 8009924:	f7fe fc2c 	bl	8008180 <USBH_RegisterClass>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d001      	beq.n	8009932 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800992e:	f7f8 fb8b 	bl	8002048 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009932:	4806      	ldr	r0, [pc, #24]	; (800994c <MX_USB_HOST_Init+0x44>)
 8009934:	f7fe fcb0 	bl	8008298 <USBH_Start>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d001      	beq.n	8009942 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800993e:	f7f8 fb83 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009942:	bf00      	nop
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	08009969 	.word	0x08009969
 800994c:	20000234 	.word	0x20000234
 8009950:	2000000c 	.word	0x2000000c

08009954 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009958:	4802      	ldr	r0, [pc, #8]	; (8009964 <MX_USB_HOST_Process+0x10>)
 800995a:	f7fe fcad 	bl	80082b8 <USBH_Process>
}
 800995e:	bf00      	nop
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	20000234 	.word	0x20000234

08009968 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	460b      	mov	r3, r1
 8009972:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009974:	78fb      	ldrb	r3, [r7, #3]
 8009976:	3b01      	subs	r3, #1
 8009978:	2b04      	cmp	r3, #4
 800997a:	d819      	bhi.n	80099b0 <USBH_UserProcess+0x48>
 800997c:	a201      	add	r2, pc, #4	; (adr r2, 8009984 <USBH_UserProcess+0x1c>)
 800997e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009982:	bf00      	nop
 8009984:	080099b1 	.word	0x080099b1
 8009988:	080099a1 	.word	0x080099a1
 800998c:	080099b1 	.word	0x080099b1
 8009990:	080099a9 	.word	0x080099a9
 8009994:	08009999 	.word	0x08009999
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009998:	4b09      	ldr	r3, [pc, #36]	; (80099c0 <USBH_UserProcess+0x58>)
 800999a:	2203      	movs	r2, #3
 800999c:	701a      	strb	r2, [r3, #0]
  break;
 800999e:	e008      	b.n	80099b2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80099a0:	4b07      	ldr	r3, [pc, #28]	; (80099c0 <USBH_UserProcess+0x58>)
 80099a2:	2202      	movs	r2, #2
 80099a4:	701a      	strb	r2, [r3, #0]
  break;
 80099a6:	e004      	b.n	80099b2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80099a8:	4b05      	ldr	r3, [pc, #20]	; (80099c0 <USBH_UserProcess+0x58>)
 80099aa:	2201      	movs	r2, #1
 80099ac:	701a      	strb	r2, [r3, #0]
  break;
 80099ae:	e000      	b.n	80099b2 <USBH_UserProcess+0x4a>

  default:
  break;
 80099b0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80099b2:	bf00      	nop
 80099b4:	370c      	adds	r7, #12
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop
 80099c0:	2000060c 	.word	0x2000060c

080099c4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b08a      	sub	sp, #40	; 0x28
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099cc:	f107 0314 	add.w	r3, r7, #20
 80099d0:	2200      	movs	r2, #0
 80099d2:	601a      	str	r2, [r3, #0]
 80099d4:	605a      	str	r2, [r3, #4]
 80099d6:	609a      	str	r2, [r3, #8]
 80099d8:	60da      	str	r2, [r3, #12]
 80099da:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099e4:	d147      	bne.n	8009a76 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80099e6:	2300      	movs	r3, #0
 80099e8:	613b      	str	r3, [r7, #16]
 80099ea:	4b25      	ldr	r3, [pc, #148]	; (8009a80 <HAL_HCD_MspInit+0xbc>)
 80099ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ee:	4a24      	ldr	r2, [pc, #144]	; (8009a80 <HAL_HCD_MspInit+0xbc>)
 80099f0:	f043 0301 	orr.w	r3, r3, #1
 80099f4:	6313      	str	r3, [r2, #48]	; 0x30
 80099f6:	4b22      	ldr	r3, [pc, #136]	; (8009a80 <HAL_HCD_MspInit+0xbc>)
 80099f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099fa:	f003 0301 	and.w	r3, r3, #1
 80099fe:	613b      	str	r3, [r7, #16]
 8009a00:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009a02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009a10:	f107 0314 	add.w	r3, r7, #20
 8009a14:	4619      	mov	r1, r3
 8009a16:	481b      	ldr	r0, [pc, #108]	; (8009a84 <HAL_HCD_MspInit+0xc0>)
 8009a18:	f7f8 fe10 	bl	800263c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009a1c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a22:	2302      	movs	r3, #2
 8009a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a26:	2300      	movs	r3, #0
 8009a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009a2e:	230a      	movs	r3, #10
 8009a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a32:	f107 0314 	add.w	r3, r7, #20
 8009a36:	4619      	mov	r1, r3
 8009a38:	4812      	ldr	r0, [pc, #72]	; (8009a84 <HAL_HCD_MspInit+0xc0>)
 8009a3a:	f7f8 fdff 	bl	800263c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009a3e:	4b10      	ldr	r3, [pc, #64]	; (8009a80 <HAL_HCD_MspInit+0xbc>)
 8009a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a42:	4a0f      	ldr	r2, [pc, #60]	; (8009a80 <HAL_HCD_MspInit+0xbc>)
 8009a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a48:	6353      	str	r3, [r2, #52]	; 0x34
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	60fb      	str	r3, [r7, #12]
 8009a4e:	4b0c      	ldr	r3, [pc, #48]	; (8009a80 <HAL_HCD_MspInit+0xbc>)
 8009a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a52:	4a0b      	ldr	r2, [pc, #44]	; (8009a80 <HAL_HCD_MspInit+0xbc>)
 8009a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a58:	6453      	str	r3, [r2, #68]	; 0x44
 8009a5a:	4b09      	ldr	r3, [pc, #36]	; (8009a80 <HAL_HCD_MspInit+0xbc>)
 8009a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a62:	60fb      	str	r3, [r7, #12]
 8009a64:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009a66:	2200      	movs	r2, #0
 8009a68:	2100      	movs	r1, #0
 8009a6a:	2043      	movs	r0, #67	; 0x43
 8009a6c:	f7f8 fdaf 	bl	80025ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009a70:	2043      	movs	r0, #67	; 0x43
 8009a72:	f7f8 fdc8 	bl	8002606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009a76:	bf00      	nop
 8009a78:	3728      	adds	r7, #40	; 0x28
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	40023800 	.word	0x40023800
 8009a84:	40020000 	.word	0x40020000

08009a88 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7fe ffed 	bl	8008a76 <USBH_LL_IncTimer>
}
 8009a9c:	bf00      	nop
 8009a9e:	3708      	adds	r7, #8
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7ff f825 	bl	8008b02 <USBH_LL_Connect>
}
 8009ab8:	bf00      	nop
 8009aba:	3708      	adds	r7, #8
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7ff f82e 	bl	8008b30 <USBH_LL_Disconnect>
}
 8009ad4:	bf00      	nop
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	70fb      	strb	r3, [r7, #3]
 8009ae8:	4613      	mov	r3, r2
 8009aea:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009aec:	bf00      	nop
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fe ffdf 	bl	8008aca <USBH_LL_PortEnabled>
}
 8009b0c:	bf00      	nop
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7fe ffdf 	bl	8008ae6 <USBH_LL_PortDisabled>
}
 8009b28:	bf00      	nop
 8009b2a:	3708      	adds	r7, #8
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d12a      	bne.n	8009b98 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009b42:	4a18      	ldr	r2, [pc, #96]	; (8009ba4 <USBH_LL_Init+0x74>)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4a15      	ldr	r2, [pc, #84]	; (8009ba4 <USBH_LL_Init+0x74>)
 8009b4e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009b52:	4b14      	ldr	r3, [pc, #80]	; (8009ba4 <USBH_LL_Init+0x74>)
 8009b54:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009b58:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009b5a:	4b12      	ldr	r3, [pc, #72]	; (8009ba4 <USBH_LL_Init+0x74>)
 8009b5c:	2208      	movs	r2, #8
 8009b5e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009b60:	4b10      	ldr	r3, [pc, #64]	; (8009ba4 <USBH_LL_Init+0x74>)
 8009b62:	2201      	movs	r2, #1
 8009b64:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009b66:	4b0f      	ldr	r3, [pc, #60]	; (8009ba4 <USBH_LL_Init+0x74>)
 8009b68:	2200      	movs	r2, #0
 8009b6a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009b6c:	4b0d      	ldr	r3, [pc, #52]	; (8009ba4 <USBH_LL_Init+0x74>)
 8009b6e:	2202      	movs	r2, #2
 8009b70:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009b72:	4b0c      	ldr	r3, [pc, #48]	; (8009ba4 <USBH_LL_Init+0x74>)
 8009b74:	2200      	movs	r2, #0
 8009b76:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009b78:	480a      	ldr	r0, [pc, #40]	; (8009ba4 <USBH_LL_Init+0x74>)
 8009b7a:	f7f8 fefc 	bl	8002976 <HAL_HCD_Init>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d001      	beq.n	8009b88 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009b84:	f7f8 fa60 	bl	8002048 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009b88:	4806      	ldr	r0, [pc, #24]	; (8009ba4 <USBH_LL_Init+0x74>)
 8009b8a:	f7f9 fae0 	bl	800314e <HAL_HCD_GetCurrentFrame>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	4619      	mov	r1, r3
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f7fe ff60 	bl	8008a58 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3708      	adds	r7, #8
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	20000610 	.word	0x20000610

08009ba8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7f9 fa4f 	bl	8003062 <HAL_HCD_Start>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009bc8:	7bfb      	ldrb	r3, [r7, #15]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f000 f95c 	bl	8009e88 <USBH_Get_USB_Status>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b084      	sub	sp, #16
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009be6:	2300      	movs	r3, #0
 8009be8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009bea:	2300      	movs	r3, #0
 8009bec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7f9 fa57 	bl	80030a8 <HAL_HCD_Stop>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009bfe:	7bfb      	ldrb	r3, [r7, #15]
 8009c00:	4618      	mov	r0, r3
 8009c02:	f000 f941 	bl	8009e88 <USBH_Get_USB_Status>
 8009c06:	4603      	mov	r3, r0
 8009c08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3710      	adds	r7, #16
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7f9 fa9f 	bl	800316a <HAL_HCD_GetCurrentSpeed>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	d00c      	beq.n	8009c4c <USBH_LL_GetSpeed+0x38>
 8009c32:	2b02      	cmp	r3, #2
 8009c34:	d80d      	bhi.n	8009c52 <USBH_LL_GetSpeed+0x3e>
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d002      	beq.n	8009c40 <USBH_LL_GetSpeed+0x2c>
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d003      	beq.n	8009c46 <USBH_LL_GetSpeed+0x32>
 8009c3e:	e008      	b.n	8009c52 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009c40:	2300      	movs	r3, #0
 8009c42:	73fb      	strb	r3, [r7, #15]
    break;
 8009c44:	e008      	b.n	8009c58 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009c46:	2301      	movs	r3, #1
 8009c48:	73fb      	strb	r3, [r7, #15]
    break;
 8009c4a:	e005      	b.n	8009c58 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009c4c:	2302      	movs	r3, #2
 8009c4e:	73fb      	strb	r3, [r7, #15]
    break;
 8009c50:	e002      	b.n	8009c58 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009c52:	2301      	movs	r3, #1
 8009c54:	73fb      	strb	r3, [r7, #15]
    break;
 8009c56:	bf00      	nop
  }
  return  speed;
 8009c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3710      	adds	r7, #16
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b084      	sub	sp, #16
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7f9 fa32 	bl	80030e2 <HAL_HCD_ResetPort>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009c82:	7bfb      	ldrb	r3, [r7, #15]
 8009c84:	4618      	mov	r0, r3
 8009c86:	f000 f8ff 	bl	8009e88 <USBH_Get_USB_Status>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3710      	adds	r7, #16
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009caa:	78fa      	ldrb	r2, [r7, #3]
 8009cac:	4611      	mov	r1, r2
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7f9 fa39 	bl	8003126 <HAL_HCD_HC_GetXferCount>
 8009cb4:	4603      	mov	r3, r0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3708      	adds	r7, #8
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009cbe:	b590      	push	{r4, r7, lr}
 8009cc0:	b089      	sub	sp, #36	; 0x24
 8009cc2:	af04      	add	r7, sp, #16
 8009cc4:	6078      	str	r0, [r7, #4]
 8009cc6:	4608      	mov	r0, r1
 8009cc8:	4611      	mov	r1, r2
 8009cca:	461a      	mov	r2, r3
 8009ccc:	4603      	mov	r3, r0
 8009cce:	70fb      	strb	r3, [r7, #3]
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	70bb      	strb	r3, [r7, #2]
 8009cd4:	4613      	mov	r3, r2
 8009cd6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009ce6:	787c      	ldrb	r4, [r7, #1]
 8009ce8:	78ba      	ldrb	r2, [r7, #2]
 8009cea:	78f9      	ldrb	r1, [r7, #3]
 8009cec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009cee:	9302      	str	r3, [sp, #8]
 8009cf0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009cf4:	9301      	str	r3, [sp, #4]
 8009cf6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	4623      	mov	r3, r4
 8009cfe:	f7f8 fe9c 	bl	8002a3a <HAL_HCD_HC_Init>
 8009d02:	4603      	mov	r3, r0
 8009d04:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009d06:	7bfb      	ldrb	r3, [r7, #15]
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f000 f8bd 	bl	8009e88 <USBH_Get_USB_Status>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d12:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3714      	adds	r7, #20
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd90      	pop	{r4, r7, pc}

08009d1c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	460b      	mov	r3, r1
 8009d26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009d36:	78fa      	ldrb	r2, [r7, #3]
 8009d38:	4611      	mov	r1, r2
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7f8 ff0c 	bl	8002b58 <HAL_HCD_HC_Halt>
 8009d40:	4603      	mov	r3, r0
 8009d42:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009d44:	7bfb      	ldrb	r3, [r7, #15]
 8009d46:	4618      	mov	r0, r3
 8009d48:	f000 f89e 	bl	8009e88 <USBH_Get_USB_Status>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d50:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009d5a:	b590      	push	{r4, r7, lr}
 8009d5c:	b089      	sub	sp, #36	; 0x24
 8009d5e:	af04      	add	r7, sp, #16
 8009d60:	6078      	str	r0, [r7, #4]
 8009d62:	4608      	mov	r0, r1
 8009d64:	4611      	mov	r1, r2
 8009d66:	461a      	mov	r2, r3
 8009d68:	4603      	mov	r3, r0
 8009d6a:	70fb      	strb	r3, [r7, #3]
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	70bb      	strb	r3, [r7, #2]
 8009d70:	4613      	mov	r3, r2
 8009d72:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d74:	2300      	movs	r3, #0
 8009d76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009d82:	787c      	ldrb	r4, [r7, #1]
 8009d84:	78ba      	ldrb	r2, [r7, #2]
 8009d86:	78f9      	ldrb	r1, [r7, #3]
 8009d88:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009d8c:	9303      	str	r3, [sp, #12]
 8009d8e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009d90:	9302      	str	r3, [sp, #8]
 8009d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d94:	9301      	str	r3, [sp, #4]
 8009d96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	4623      	mov	r3, r4
 8009d9e:	f7f8 feff 	bl	8002ba0 <HAL_HCD_HC_SubmitRequest>
 8009da2:	4603      	mov	r3, r0
 8009da4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009da6:	7bfb      	ldrb	r3, [r7, #15]
 8009da8:	4618      	mov	r0, r3
 8009daa:	f000 f86d 	bl	8009e88 <USBH_Get_USB_Status>
 8009dae:	4603      	mov	r3, r0
 8009db0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009db2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3714      	adds	r7, #20
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd90      	pop	{r4, r7, pc}

08009dbc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009dce:	78fa      	ldrb	r2, [r7, #3]
 8009dd0:	4611      	mov	r1, r2
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7f9 f993 	bl	80030fe <HAL_HCD_HC_GetURBState>
 8009dd8:	4603      	mov	r3, r0
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3708      	adds	r7, #8
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b082      	sub	sp, #8
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
 8009dea:	460b      	mov	r3, r1
 8009dec:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d103      	bne.n	8009e00 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009df8:	78fb      	ldrb	r3, [r7, #3]
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f000 f870 	bl	8009ee0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009e00:	20c8      	movs	r0, #200	; 0xc8
 8009e02:	f7f8 fae5 	bl	80023d0 <HAL_Delay>
  return USBH_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3708      	adds	r7, #8
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	460b      	mov	r3, r1
 8009e1a:	70fb      	strb	r3, [r7, #3]
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009e26:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009e28:	78fb      	ldrb	r3, [r7, #3]
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	212c      	movs	r1, #44	; 0x2c
 8009e2e:	fb01 f303 	mul.w	r3, r1, r3
 8009e32:	4413      	add	r3, r2
 8009e34:	333b      	adds	r3, #59	; 0x3b
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d009      	beq.n	8009e50 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009e3c:	78fb      	ldrb	r3, [r7, #3]
 8009e3e:	68fa      	ldr	r2, [r7, #12]
 8009e40:	212c      	movs	r1, #44	; 0x2c
 8009e42:	fb01 f303 	mul.w	r3, r1, r3
 8009e46:	4413      	add	r3, r2
 8009e48:	3354      	adds	r3, #84	; 0x54
 8009e4a:	78ba      	ldrb	r2, [r7, #2]
 8009e4c:	701a      	strb	r2, [r3, #0]
 8009e4e:	e008      	b.n	8009e62 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009e50:	78fb      	ldrb	r3, [r7, #3]
 8009e52:	68fa      	ldr	r2, [r7, #12]
 8009e54:	212c      	movs	r1, #44	; 0x2c
 8009e56:	fb01 f303 	mul.w	r3, r1, r3
 8009e5a:	4413      	add	r3, r2
 8009e5c:	3355      	adds	r3, #85	; 0x55
 8009e5e:	78ba      	ldrb	r2, [r7, #2]
 8009e60:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009e62:	2300      	movs	r3, #0
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3714      	adds	r7, #20
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr

08009e70 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f7f8 faa9 	bl	80023d0 <HAL_Delay>
}
 8009e7e:	bf00      	nop
 8009e80:	3708      	adds	r7, #8
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
	...

08009e88 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b085      	sub	sp, #20
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	4603      	mov	r3, r0
 8009e90:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e92:	2300      	movs	r3, #0
 8009e94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e96:	79fb      	ldrb	r3, [r7, #7]
 8009e98:	2b03      	cmp	r3, #3
 8009e9a:	d817      	bhi.n	8009ecc <USBH_Get_USB_Status+0x44>
 8009e9c:	a201      	add	r2, pc, #4	; (adr r2, 8009ea4 <USBH_Get_USB_Status+0x1c>)
 8009e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea2:	bf00      	nop
 8009ea4:	08009eb5 	.word	0x08009eb5
 8009ea8:	08009ebb 	.word	0x08009ebb
 8009eac:	08009ec1 	.word	0x08009ec1
 8009eb0:	08009ec7 	.word	0x08009ec7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	73fb      	strb	r3, [r7, #15]
    break;
 8009eb8:	e00b      	b.n	8009ed2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009eba:	2302      	movs	r3, #2
 8009ebc:	73fb      	strb	r3, [r7, #15]
    break;
 8009ebe:	e008      	b.n	8009ed2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ec4:	e005      	b.n	8009ed2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009ec6:	2302      	movs	r3, #2
 8009ec8:	73fb      	strb	r3, [r7, #15]
    break;
 8009eca:	e002      	b.n	8009ed2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009ecc:	2302      	movs	r3, #2
 8009ece:	73fb      	strb	r3, [r7, #15]
    break;
 8009ed0:	bf00      	nop
  }
  return usb_status;
 8009ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3714      	adds	r7, #20
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009eea:	79fb      	ldrb	r3, [r7, #7]
 8009eec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009eee:	79fb      	ldrb	r3, [r7, #7]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d102      	bne.n	8009efa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	73fb      	strb	r3, [r7, #15]
 8009ef8:	e001      	b.n	8009efe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009efa:	2301      	movs	r3, #1
 8009efc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009efe:	7bfb      	ldrb	r3, [r7, #15]
 8009f00:	461a      	mov	r2, r3
 8009f02:	2101      	movs	r1, #1
 8009f04:	4803      	ldr	r0, [pc, #12]	; (8009f14 <MX_DriverVbusFS+0x34>)
 8009f06:	f7f8 fd1d 	bl	8002944 <HAL_GPIO_WritePin>
}
 8009f0a:	bf00      	nop
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	40020800 	.word	0x40020800

08009f18 <__errno>:
 8009f18:	4b01      	ldr	r3, [pc, #4]	; (8009f20 <__errno+0x8>)
 8009f1a:	6818      	ldr	r0, [r3, #0]
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	2000002c 	.word	0x2000002c

08009f24 <__libc_init_array>:
 8009f24:	b570      	push	{r4, r5, r6, lr}
 8009f26:	4d0d      	ldr	r5, [pc, #52]	; (8009f5c <__libc_init_array+0x38>)
 8009f28:	4c0d      	ldr	r4, [pc, #52]	; (8009f60 <__libc_init_array+0x3c>)
 8009f2a:	1b64      	subs	r4, r4, r5
 8009f2c:	10a4      	asrs	r4, r4, #2
 8009f2e:	2600      	movs	r6, #0
 8009f30:	42a6      	cmp	r6, r4
 8009f32:	d109      	bne.n	8009f48 <__libc_init_array+0x24>
 8009f34:	4d0b      	ldr	r5, [pc, #44]	; (8009f64 <__libc_init_array+0x40>)
 8009f36:	4c0c      	ldr	r4, [pc, #48]	; (8009f68 <__libc_init_array+0x44>)
 8009f38:	f000 f92e 	bl	800a198 <_init>
 8009f3c:	1b64      	subs	r4, r4, r5
 8009f3e:	10a4      	asrs	r4, r4, #2
 8009f40:	2600      	movs	r6, #0
 8009f42:	42a6      	cmp	r6, r4
 8009f44:	d105      	bne.n	8009f52 <__libc_init_array+0x2e>
 8009f46:	bd70      	pop	{r4, r5, r6, pc}
 8009f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f4c:	4798      	blx	r3
 8009f4e:	3601      	adds	r6, #1
 8009f50:	e7ee      	b.n	8009f30 <__libc_init_array+0xc>
 8009f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f56:	4798      	blx	r3
 8009f58:	3601      	adds	r6, #1
 8009f5a:	e7f2      	b.n	8009f42 <__libc_init_array+0x1e>
 8009f5c:	0800a1d4 	.word	0x0800a1d4
 8009f60:	0800a1d4 	.word	0x0800a1d4
 8009f64:	0800a1d4 	.word	0x0800a1d4
 8009f68:	0800a1d8 	.word	0x0800a1d8

08009f6c <malloc>:
 8009f6c:	4b02      	ldr	r3, [pc, #8]	; (8009f78 <malloc+0xc>)
 8009f6e:	4601      	mov	r1, r0
 8009f70:	6818      	ldr	r0, [r3, #0]
 8009f72:	f000 b87f 	b.w	800a074 <_malloc_r>
 8009f76:	bf00      	nop
 8009f78:	2000002c 	.word	0x2000002c

08009f7c <free>:
 8009f7c:	4b02      	ldr	r3, [pc, #8]	; (8009f88 <free+0xc>)
 8009f7e:	4601      	mov	r1, r0
 8009f80:	6818      	ldr	r0, [r3, #0]
 8009f82:	f000 b80b 	b.w	8009f9c <_free_r>
 8009f86:	bf00      	nop
 8009f88:	2000002c 	.word	0x2000002c

08009f8c <memset>:
 8009f8c:	4402      	add	r2, r0
 8009f8e:	4603      	mov	r3, r0
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d100      	bne.n	8009f96 <memset+0xa>
 8009f94:	4770      	bx	lr
 8009f96:	f803 1b01 	strb.w	r1, [r3], #1
 8009f9a:	e7f9      	b.n	8009f90 <memset+0x4>

08009f9c <_free_r>:
 8009f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f9e:	2900      	cmp	r1, #0
 8009fa0:	d044      	beq.n	800a02c <_free_r+0x90>
 8009fa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fa6:	9001      	str	r0, [sp, #4]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	f1a1 0404 	sub.w	r4, r1, #4
 8009fae:	bfb8      	it	lt
 8009fb0:	18e4      	addlt	r4, r4, r3
 8009fb2:	f000 f8e3 	bl	800a17c <__malloc_lock>
 8009fb6:	4a1e      	ldr	r2, [pc, #120]	; (800a030 <_free_r+0x94>)
 8009fb8:	9801      	ldr	r0, [sp, #4]
 8009fba:	6813      	ldr	r3, [r2, #0]
 8009fbc:	b933      	cbnz	r3, 8009fcc <_free_r+0x30>
 8009fbe:	6063      	str	r3, [r4, #4]
 8009fc0:	6014      	str	r4, [r2, #0]
 8009fc2:	b003      	add	sp, #12
 8009fc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009fc8:	f000 b8de 	b.w	800a188 <__malloc_unlock>
 8009fcc:	42a3      	cmp	r3, r4
 8009fce:	d908      	bls.n	8009fe2 <_free_r+0x46>
 8009fd0:	6825      	ldr	r5, [r4, #0]
 8009fd2:	1961      	adds	r1, r4, r5
 8009fd4:	428b      	cmp	r3, r1
 8009fd6:	bf01      	itttt	eq
 8009fd8:	6819      	ldreq	r1, [r3, #0]
 8009fda:	685b      	ldreq	r3, [r3, #4]
 8009fdc:	1949      	addeq	r1, r1, r5
 8009fde:	6021      	streq	r1, [r4, #0]
 8009fe0:	e7ed      	b.n	8009fbe <_free_r+0x22>
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	b10b      	cbz	r3, 8009fec <_free_r+0x50>
 8009fe8:	42a3      	cmp	r3, r4
 8009fea:	d9fa      	bls.n	8009fe2 <_free_r+0x46>
 8009fec:	6811      	ldr	r1, [r2, #0]
 8009fee:	1855      	adds	r5, r2, r1
 8009ff0:	42a5      	cmp	r5, r4
 8009ff2:	d10b      	bne.n	800a00c <_free_r+0x70>
 8009ff4:	6824      	ldr	r4, [r4, #0]
 8009ff6:	4421      	add	r1, r4
 8009ff8:	1854      	adds	r4, r2, r1
 8009ffa:	42a3      	cmp	r3, r4
 8009ffc:	6011      	str	r1, [r2, #0]
 8009ffe:	d1e0      	bne.n	8009fc2 <_free_r+0x26>
 800a000:	681c      	ldr	r4, [r3, #0]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	6053      	str	r3, [r2, #4]
 800a006:	4421      	add	r1, r4
 800a008:	6011      	str	r1, [r2, #0]
 800a00a:	e7da      	b.n	8009fc2 <_free_r+0x26>
 800a00c:	d902      	bls.n	800a014 <_free_r+0x78>
 800a00e:	230c      	movs	r3, #12
 800a010:	6003      	str	r3, [r0, #0]
 800a012:	e7d6      	b.n	8009fc2 <_free_r+0x26>
 800a014:	6825      	ldr	r5, [r4, #0]
 800a016:	1961      	adds	r1, r4, r5
 800a018:	428b      	cmp	r3, r1
 800a01a:	bf04      	itt	eq
 800a01c:	6819      	ldreq	r1, [r3, #0]
 800a01e:	685b      	ldreq	r3, [r3, #4]
 800a020:	6063      	str	r3, [r4, #4]
 800a022:	bf04      	itt	eq
 800a024:	1949      	addeq	r1, r1, r5
 800a026:	6021      	streq	r1, [r4, #0]
 800a028:	6054      	str	r4, [r2, #4]
 800a02a:	e7ca      	b.n	8009fc2 <_free_r+0x26>
 800a02c:	b003      	add	sp, #12
 800a02e:	bd30      	pop	{r4, r5, pc}
 800a030:	20000914 	.word	0x20000914

0800a034 <sbrk_aligned>:
 800a034:	b570      	push	{r4, r5, r6, lr}
 800a036:	4e0e      	ldr	r6, [pc, #56]	; (800a070 <sbrk_aligned+0x3c>)
 800a038:	460c      	mov	r4, r1
 800a03a:	6831      	ldr	r1, [r6, #0]
 800a03c:	4605      	mov	r5, r0
 800a03e:	b911      	cbnz	r1, 800a046 <sbrk_aligned+0x12>
 800a040:	f000 f88c 	bl	800a15c <_sbrk_r>
 800a044:	6030      	str	r0, [r6, #0]
 800a046:	4621      	mov	r1, r4
 800a048:	4628      	mov	r0, r5
 800a04a:	f000 f887 	bl	800a15c <_sbrk_r>
 800a04e:	1c43      	adds	r3, r0, #1
 800a050:	d00a      	beq.n	800a068 <sbrk_aligned+0x34>
 800a052:	1cc4      	adds	r4, r0, #3
 800a054:	f024 0403 	bic.w	r4, r4, #3
 800a058:	42a0      	cmp	r0, r4
 800a05a:	d007      	beq.n	800a06c <sbrk_aligned+0x38>
 800a05c:	1a21      	subs	r1, r4, r0
 800a05e:	4628      	mov	r0, r5
 800a060:	f000 f87c 	bl	800a15c <_sbrk_r>
 800a064:	3001      	adds	r0, #1
 800a066:	d101      	bne.n	800a06c <sbrk_aligned+0x38>
 800a068:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a06c:	4620      	mov	r0, r4
 800a06e:	bd70      	pop	{r4, r5, r6, pc}
 800a070:	20000918 	.word	0x20000918

0800a074 <_malloc_r>:
 800a074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a078:	1ccd      	adds	r5, r1, #3
 800a07a:	f025 0503 	bic.w	r5, r5, #3
 800a07e:	3508      	adds	r5, #8
 800a080:	2d0c      	cmp	r5, #12
 800a082:	bf38      	it	cc
 800a084:	250c      	movcc	r5, #12
 800a086:	2d00      	cmp	r5, #0
 800a088:	4607      	mov	r7, r0
 800a08a:	db01      	blt.n	800a090 <_malloc_r+0x1c>
 800a08c:	42a9      	cmp	r1, r5
 800a08e:	d905      	bls.n	800a09c <_malloc_r+0x28>
 800a090:	230c      	movs	r3, #12
 800a092:	603b      	str	r3, [r7, #0]
 800a094:	2600      	movs	r6, #0
 800a096:	4630      	mov	r0, r6
 800a098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a09c:	4e2e      	ldr	r6, [pc, #184]	; (800a158 <_malloc_r+0xe4>)
 800a09e:	f000 f86d 	bl	800a17c <__malloc_lock>
 800a0a2:	6833      	ldr	r3, [r6, #0]
 800a0a4:	461c      	mov	r4, r3
 800a0a6:	bb34      	cbnz	r4, 800a0f6 <_malloc_r+0x82>
 800a0a8:	4629      	mov	r1, r5
 800a0aa:	4638      	mov	r0, r7
 800a0ac:	f7ff ffc2 	bl	800a034 <sbrk_aligned>
 800a0b0:	1c43      	adds	r3, r0, #1
 800a0b2:	4604      	mov	r4, r0
 800a0b4:	d14d      	bne.n	800a152 <_malloc_r+0xde>
 800a0b6:	6834      	ldr	r4, [r6, #0]
 800a0b8:	4626      	mov	r6, r4
 800a0ba:	2e00      	cmp	r6, #0
 800a0bc:	d140      	bne.n	800a140 <_malloc_r+0xcc>
 800a0be:	6823      	ldr	r3, [r4, #0]
 800a0c0:	4631      	mov	r1, r6
 800a0c2:	4638      	mov	r0, r7
 800a0c4:	eb04 0803 	add.w	r8, r4, r3
 800a0c8:	f000 f848 	bl	800a15c <_sbrk_r>
 800a0cc:	4580      	cmp	r8, r0
 800a0ce:	d13a      	bne.n	800a146 <_malloc_r+0xd2>
 800a0d0:	6821      	ldr	r1, [r4, #0]
 800a0d2:	3503      	adds	r5, #3
 800a0d4:	1a6d      	subs	r5, r5, r1
 800a0d6:	f025 0503 	bic.w	r5, r5, #3
 800a0da:	3508      	adds	r5, #8
 800a0dc:	2d0c      	cmp	r5, #12
 800a0de:	bf38      	it	cc
 800a0e0:	250c      	movcc	r5, #12
 800a0e2:	4629      	mov	r1, r5
 800a0e4:	4638      	mov	r0, r7
 800a0e6:	f7ff ffa5 	bl	800a034 <sbrk_aligned>
 800a0ea:	3001      	adds	r0, #1
 800a0ec:	d02b      	beq.n	800a146 <_malloc_r+0xd2>
 800a0ee:	6823      	ldr	r3, [r4, #0]
 800a0f0:	442b      	add	r3, r5
 800a0f2:	6023      	str	r3, [r4, #0]
 800a0f4:	e00e      	b.n	800a114 <_malloc_r+0xa0>
 800a0f6:	6822      	ldr	r2, [r4, #0]
 800a0f8:	1b52      	subs	r2, r2, r5
 800a0fa:	d41e      	bmi.n	800a13a <_malloc_r+0xc6>
 800a0fc:	2a0b      	cmp	r2, #11
 800a0fe:	d916      	bls.n	800a12e <_malloc_r+0xba>
 800a100:	1961      	adds	r1, r4, r5
 800a102:	42a3      	cmp	r3, r4
 800a104:	6025      	str	r5, [r4, #0]
 800a106:	bf18      	it	ne
 800a108:	6059      	strne	r1, [r3, #4]
 800a10a:	6863      	ldr	r3, [r4, #4]
 800a10c:	bf08      	it	eq
 800a10e:	6031      	streq	r1, [r6, #0]
 800a110:	5162      	str	r2, [r4, r5]
 800a112:	604b      	str	r3, [r1, #4]
 800a114:	4638      	mov	r0, r7
 800a116:	f104 060b 	add.w	r6, r4, #11
 800a11a:	f000 f835 	bl	800a188 <__malloc_unlock>
 800a11e:	f026 0607 	bic.w	r6, r6, #7
 800a122:	1d23      	adds	r3, r4, #4
 800a124:	1af2      	subs	r2, r6, r3
 800a126:	d0b6      	beq.n	800a096 <_malloc_r+0x22>
 800a128:	1b9b      	subs	r3, r3, r6
 800a12a:	50a3      	str	r3, [r4, r2]
 800a12c:	e7b3      	b.n	800a096 <_malloc_r+0x22>
 800a12e:	6862      	ldr	r2, [r4, #4]
 800a130:	42a3      	cmp	r3, r4
 800a132:	bf0c      	ite	eq
 800a134:	6032      	streq	r2, [r6, #0]
 800a136:	605a      	strne	r2, [r3, #4]
 800a138:	e7ec      	b.n	800a114 <_malloc_r+0xa0>
 800a13a:	4623      	mov	r3, r4
 800a13c:	6864      	ldr	r4, [r4, #4]
 800a13e:	e7b2      	b.n	800a0a6 <_malloc_r+0x32>
 800a140:	4634      	mov	r4, r6
 800a142:	6876      	ldr	r6, [r6, #4]
 800a144:	e7b9      	b.n	800a0ba <_malloc_r+0x46>
 800a146:	230c      	movs	r3, #12
 800a148:	603b      	str	r3, [r7, #0]
 800a14a:	4638      	mov	r0, r7
 800a14c:	f000 f81c 	bl	800a188 <__malloc_unlock>
 800a150:	e7a1      	b.n	800a096 <_malloc_r+0x22>
 800a152:	6025      	str	r5, [r4, #0]
 800a154:	e7de      	b.n	800a114 <_malloc_r+0xa0>
 800a156:	bf00      	nop
 800a158:	20000914 	.word	0x20000914

0800a15c <_sbrk_r>:
 800a15c:	b538      	push	{r3, r4, r5, lr}
 800a15e:	4d06      	ldr	r5, [pc, #24]	; (800a178 <_sbrk_r+0x1c>)
 800a160:	2300      	movs	r3, #0
 800a162:	4604      	mov	r4, r0
 800a164:	4608      	mov	r0, r1
 800a166:	602b      	str	r3, [r5, #0]
 800a168:	f7f8 f84e 	bl	8002208 <_sbrk>
 800a16c:	1c43      	adds	r3, r0, #1
 800a16e:	d102      	bne.n	800a176 <_sbrk_r+0x1a>
 800a170:	682b      	ldr	r3, [r5, #0]
 800a172:	b103      	cbz	r3, 800a176 <_sbrk_r+0x1a>
 800a174:	6023      	str	r3, [r4, #0]
 800a176:	bd38      	pop	{r3, r4, r5, pc}
 800a178:	2000091c 	.word	0x2000091c

0800a17c <__malloc_lock>:
 800a17c:	4801      	ldr	r0, [pc, #4]	; (800a184 <__malloc_lock+0x8>)
 800a17e:	f000 b809 	b.w	800a194 <__retarget_lock_acquire_recursive>
 800a182:	bf00      	nop
 800a184:	20000920 	.word	0x20000920

0800a188 <__malloc_unlock>:
 800a188:	4801      	ldr	r0, [pc, #4]	; (800a190 <__malloc_unlock+0x8>)
 800a18a:	f000 b804 	b.w	800a196 <__retarget_lock_release_recursive>
 800a18e:	bf00      	nop
 800a190:	20000920 	.word	0x20000920

0800a194 <__retarget_lock_acquire_recursive>:
 800a194:	4770      	bx	lr

0800a196 <__retarget_lock_release_recursive>:
 800a196:	4770      	bx	lr

0800a198 <_init>:
 800a198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19a:	bf00      	nop
 800a19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a19e:	bc08      	pop	{r3}
 800a1a0:	469e      	mov	lr, r3
 800a1a2:	4770      	bx	lr

0800a1a4 <_fini>:
 800a1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1a6:	bf00      	nop
 800a1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1aa:	bc08      	pop	{r3}
 800a1ac:	469e      	mov	lr, r3
 800a1ae:	4770      	bx	lr
